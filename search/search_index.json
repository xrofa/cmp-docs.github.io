{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! \ud83c\udf89 You are now one step closer from making privacy a core feature in your web application. We are here to help you build trust with your users. For starters, please follow the guide on how to implement our Browser UI . If you want to implement your own UI, please follow Browser SDK .","title":"Introduction"},{"location":"#welcome","text":"You are now one step closer from making privacy a core feature in your web application. We are here to help you build trust with your users. For starters, please follow the guide on how to implement our Browser UI . If you want to implement your own UI, please follow Browser SDK .","title":"Welcome! \ud83c\udf89"},{"location":"pages/api/control-the-ui/","text":"Additional options to show the CMP layers. Suppress the CMP Programmatic way to suppress the CMP via JavaScript Parameter Not required. Return Value Nothing to return. Example: < script type = \"application/javascript\" > var UC_UI_SUPPRESS_CMP_DISPLAY = true ; </ script > showFirstLayer Programmatic way to show First Layer. Parameter Not required. Return Value Nothing to return. Example: UC_UI . showFirstLayer (); showSecondLayer Programmatic way to show Second Layer. If a service/vendor Id value is passed, Second Layer will open the right tab, scroll to the given service/vendor entry and expand it. If no Id is passed, Second Layer will be shown without srcolling to any specific service/vendor. Parameter string | number : Service Template Id or TCF Vendor Id (if TCF enabled, )e.g. \"BJ59EidsWQ\" Required: no Return Value Nothing to return. Example: UC_UI . showSecondLayer ( \"SERVICE_OR_VENDOR_ID\" ); closeCMP Programmatic way to close the CMP layers. Parameter No parameter. Return Value Nothing to return. Example: UC_UI . closeCMP ();","title":"Control the UI"},{"location":"pages/api/control-the-ui/#suppress-the-cmp","text":"Programmatic way to suppress the CMP via JavaScript Parameter Not required. Return Value Nothing to return. Example: < script type = \"application/javascript\" > var UC_UI_SUPPRESS_CMP_DISPLAY = true ; </ script >","title":"Suppress the CMP"},{"location":"pages/api/control-the-ui/#showfirstlayer","text":"Programmatic way to show First Layer. Parameter Not required. Return Value Nothing to return. Example: UC_UI . showFirstLayer ();","title":"showFirstLayer"},{"location":"pages/api/control-the-ui/#showsecondlayer","text":"Programmatic way to show Second Layer. If a service/vendor Id value is passed, Second Layer will open the right tab, scroll to the given service/vendor entry and expand it. If no Id is passed, Second Layer will be shown without srcolling to any specific service/vendor. Parameter string | number : Service Template Id or TCF Vendor Id (if TCF enabled, )e.g. \"BJ59EidsWQ\" Required: no Return Value Nothing to return. Example: UC_UI . showSecondLayer ( \"SERVICE_OR_VENDOR_ID\" );","title":"showSecondLayer"},{"location":"pages/api/control-the-ui/#closecmp","text":"Programmatic way to close the CMP layers. Parameter No parameter. Return Value Nothing to return. Example: UC_UI . closeCMP ();","title":"closeCMP"},{"location":"pages/api/custom-functionality/","text":"Additional options to save user privacy settings and get CMP relevant information. acceptAllConsents A method for accepting all consents. Parameter Not required. Return Value void promise | null : null if UI_VARIANT not defined, otherwise void promise. Example: UC_UI . acceptAllConsents (). then ( () => console . log ( 'All consents are accepted' ) ); acceptService A method for accepting a single service. Parameter string: Service Template Id, e.g. \"BJ59EidsWQ\" Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . acceptService ( \"SERVICE_ID\" ). then ( () => console . log ( 'Service is accepted' ) ); acceptServices A method for accepting multiple services. Parameter string[]: Service Template Id, e.g. [\"BJ59EidsWQ\". \"HkocEodjb7\"] Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . acceptServices ([ \"SERVICE_ID\" , \"SERVICE_ID\" ]). then ( () => console . log ( 'Services are accepted' ) ); denyAllConsents A method for denying all consents. Parameter Not required. Return Value void promise | null : null if UI_VARIANT not defined, otherwise void promise. Example: UC_UI . denyAllConsents (). then ( () => console . log ( 'All consents are denied' ) ); rejectService A method for rejecting a single service. Parameter string: Service Template Id, e.g. \"BJ59EidsWQ\" Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . rejectService ( \"SERVICE_ID\" ). then ( () => console . log ( 'Service is rejected' ) ); rejectServices A method for rejecting multiple services. Parameter string[]: Service Template Id, e.g. [\"BJ59EidsWQ\". \"HkocEodjb7\"] Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . rejectServices ([ \"SERVICE_ID\" , \"SERVICE_ID\" ]). then ( () => console . log ( 'Services are rejected' ) ); getActiveLanguage A method to get active language selected by user Parameter Not required. Return Value string: language code, eg: 'en' Example: UC_UI . getActiveLanguage (); // returns \"en\" getServices The method is deprecated since version 2.2.9. If you need similar behavior, use getServicesBaseInfo or getServicesFullInfo getServicesBaseInfo A method to get array of all services with their basic information Parameter Not required. Return Value array of object: BaseService containing: categorySlug: string; consent: Consent; fetchSubServices: () => Promise ; id: string; isEssential: boolean; isHidden: boolean; name: string; processorId: string; subServices: Service[]; subServicesLength: number; version: string; Example: UC_UI . getServicesBaseInfo (); Use .filter() to filter the result and seek a more detailed answer The below example will return all the services that have been consented (all that are \"true\") UC_UI . getServicesBaseInfo (). filter ( data => data . consent . status === true ) Use .find() to find a specific service based on a property The below example will return the service with id equal to SERVICE_ID (e.g. \"BJ59EidsWQ\") or null if it doesn't exist UC_UI . getServicesBaseInfo (). find ( service => service . id === \"SERVICE_ID\" ) After using .find() to find a specific service, it is also possible to retrieve any value from that specific service The example below will return the consent status of the found service with an id equal to SERVICE_ID (e.g. \"BJ59EidsWQ\") UC_UI . getServicesBaseInfo (). find ( data => ( data . id === \"SERVICE_ID\" ) ). consent . status getServicesFullInfo A method to get array of all services with their full information. An extra api request will be made, therefore the return represents the eventual completion (or failure) of an asynchronous operation and its returning value. Parameter Not required. Return Value array of object promise: Services containing all the base information, plus: cookieMaxAgeSeconds: number | null; cookieRefresh: boolean | null; dataCollected: string[]; dataDistribution: DataDistribution | null; dataProtectionOfficer: string | null; dataPurposes: string[]; dataRecipients: string[]; description: string | null; deviceStorage: DeviceStorage | null; deviceStorageDisclosureUrl: string | null; language: Language | null; legalBasis: ServiceLegalBasis[]; processingCompany: ProcessingCompany | null; retentionPeriodDescription: string | null; technologiesUsed: string[]; urls: URLs | null; usesCookies: boolean | null; usesNonCookieAccess: boolean | null; Example: UC_UI . getServicesFullInfo () . then (( fullService ) => { console . log ( fullService ); }) . catch ( err => { console . log ( err ) }); isInitialized A method to check if app is initialized or not Parameter Not required. Return Value boolean: true if app is initialized, otherwise false Example: const customMethod = () => { } if ( window . UC_UI && window . UC_UI . isInitialized ()) { console . log ( 'UC UI is already initialized' ); } enableScriptsForServicesWithConsent Programmatic way to check all adjusted data processing services script tags and change the type according to the given consent (e.g. consent = true | type=\"text/plain\" => type=\"text/javascript\"). Parameter Not Required. Return Value Nothing to Return. Example: UC_UI . enableScriptsForServicesWithConsent () updateLanguage Programmatic way to set language for the CMP. Parameter string: Two character country code, e.g. \"en\" = set language to English Required: yes Return Value Nothing to Return. Example: UC_UI . updateLanguage ( \"en\" ); restartCMP Programmatic way to restart the CMP interface Parameter Not required. Return Value Nothing to Return. Example: UC_UI . restartCMP ();","title":"Custom Functionality"},{"location":"pages/api/custom-functionality/#acceptallconsents","text":"A method for accepting all consents. Parameter Not required. Return Value void promise | null : null if UI_VARIANT not defined, otherwise void promise. Example: UC_UI . acceptAllConsents (). then ( () => console . log ( 'All consents are accepted' ) );","title":"acceptAllConsents"},{"location":"pages/api/custom-functionality/#acceptservice","text":"A method for accepting a single service. Parameter string: Service Template Id, e.g. \"BJ59EidsWQ\" Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . acceptService ( \"SERVICE_ID\" ). then ( () => console . log ( 'Service is accepted' ) );","title":"acceptService"},{"location":"pages/api/custom-functionality/#acceptservices","text":"A method for accepting multiple services. Parameter string[]: Service Template Id, e.g. [\"BJ59EidsWQ\". \"HkocEodjb7\"] Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . acceptServices ([ \"SERVICE_ID\" , \"SERVICE_ID\" ]). then ( () => console . log ( 'Services are accepted' ) );","title":"acceptServices"},{"location":"pages/api/custom-functionality/#denyallconsents","text":"A method for denying all consents. Parameter Not required. Return Value void promise | null : null if UI_VARIANT not defined, otherwise void promise. Example: UC_UI . denyAllConsents (). then ( () => console . log ( 'All consents are denied' ) );","title":"denyAllConsents"},{"location":"pages/api/custom-functionality/#rejectservice","text":"A method for rejecting a single service. Parameter string: Service Template Id, e.g. \"BJ59EidsWQ\" Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . rejectService ( \"SERVICE_ID\" ). then ( () => console . log ( 'Service is rejected' ) );","title":"rejectService"},{"location":"pages/api/custom-functionality/#rejectservices","text":"A method for rejecting multiple services. Parameter string[]: Service Template Id, e.g. [\"BJ59EidsWQ\". \"HkocEodjb7\"] Required: yes string: Consent type, e.g. \"explicit\" or \"implicit\" Required: no Default value: \"explicit\" Return Value void promise. Example: UC_UI . rejectServices ([ \"SERVICE_ID\" , \"SERVICE_ID\" ]). then ( () => console . log ( 'Services are rejected' ) );","title":"rejectServices"},{"location":"pages/api/custom-functionality/#getactivelanguage","text":"A method to get active language selected by user Parameter Not required. Return Value string: language code, eg: 'en' Example: UC_UI . getActiveLanguage (); // returns \"en\"","title":"getActiveLanguage"},{"location":"pages/api/custom-functionality/#getservices","text":"The method is deprecated since version 2.2.9. If you need similar behavior, use getServicesBaseInfo or getServicesFullInfo","title":"getServices"},{"location":"pages/api/custom-functionality/#getservicesbaseinfo","text":"A method to get array of all services with their basic information Parameter Not required. Return Value array of object: BaseService containing: categorySlug: string; consent: Consent; fetchSubServices: () => Promise ; id: string; isEssential: boolean; isHidden: boolean; name: string; processorId: string; subServices: Service[]; subServicesLength: number; version: string; Example: UC_UI . getServicesBaseInfo (); Use .filter() to filter the result and seek a more detailed answer The below example will return all the services that have been consented (all that are \"true\") UC_UI . getServicesBaseInfo (). filter ( data => data . consent . status === true ) Use .find() to find a specific service based on a property The below example will return the service with id equal to SERVICE_ID (e.g. \"BJ59EidsWQ\") or null if it doesn't exist UC_UI . getServicesBaseInfo (). find ( service => service . id === \"SERVICE_ID\" ) After using .find() to find a specific service, it is also possible to retrieve any value from that specific service The example below will return the consent status of the found service with an id equal to SERVICE_ID (e.g. \"BJ59EidsWQ\") UC_UI . getServicesBaseInfo (). find ( data => ( data . id === \"SERVICE_ID\" ) ). consent . status","title":"getServicesBaseInfo"},{"location":"pages/api/custom-functionality/#getservicesfullinfo","text":"A method to get array of all services with their full information. An extra api request will be made, therefore the return represents the eventual completion (or failure) of an asynchronous operation and its returning value. Parameter Not required. Return Value array of object promise: Services containing all the base information, plus: cookieMaxAgeSeconds: number | null; cookieRefresh: boolean | null; dataCollected: string[]; dataDistribution: DataDistribution | null; dataProtectionOfficer: string | null; dataPurposes: string[]; dataRecipients: string[]; description: string | null; deviceStorage: DeviceStorage | null; deviceStorageDisclosureUrl: string | null; language: Language | null; legalBasis: ServiceLegalBasis[]; processingCompany: ProcessingCompany | null; retentionPeriodDescription: string | null; technologiesUsed: string[]; urls: URLs | null; usesCookies: boolean | null; usesNonCookieAccess: boolean | null; Example: UC_UI . getServicesFullInfo () . then (( fullService ) => { console . log ( fullService ); }) . catch ( err => { console . log ( err ) });","title":"getServicesFullInfo"},{"location":"pages/api/custom-functionality/#isinitialized","text":"A method to check if app is initialized or not Parameter Not required. Return Value boolean: true if app is initialized, otherwise false Example: const customMethod = () => { } if ( window . UC_UI && window . UC_UI . isInitialized ()) { console . log ( 'UC UI is already initialized' ); }","title":"isInitialized"},{"location":"pages/api/custom-functionality/#enablescriptsforserviceswithconsent","text":"Programmatic way to check all adjusted data processing services script tags and change the type according to the given consent (e.g. consent = true | type=\"text/plain\" => type=\"text/javascript\"). Parameter Not Required. Return Value Nothing to Return. Example: UC_UI . enableScriptsForServicesWithConsent ()","title":"enableScriptsForServicesWithConsent"},{"location":"pages/api/custom-functionality/#updatelanguage","text":"Programmatic way to set language for the CMP. Parameter string: Two character country code, e.g. \"en\" = set language to English Required: yes Return Value Nothing to Return. Example: UC_UI . updateLanguage ( \"en\" );","title":"updateLanguage"},{"location":"pages/api/custom-functionality/#restartcmp","text":"Programmatic way to restart the CMP interface Parameter Not required. Return Value Nothing to Return. Example: UC_UI . restartCMP ();","title":"restartCMP"},{"location":"pages/api/introduction/","text":"Control the UI and customize the CMP functionality with our CMP JavaScript API","title":"Introduction"},{"location":"pages/features/custom-css/","text":"Custom CSS In this documentation, we will provide all information regarding Custom CSS in the CMP v2, including the customizable classes and specific cases. Warning By using Custom CSS, you will be in control of your custom UI. Please be aware that your CSS adjustments will affect the layout of your CMP and possibly also of your website. You'll make these adjustments at your own risk and outside of the sphere of the Usercentrics support. All Device Classes These are the editable CSS classes that we offer for the basic cases. We also share the properties that are possible to change for each class. All values written for these properties are just examples. Banner Message Banner Message of your Privacy Banner. . uc-message { color : purple ; font-weight : bold ; font-family : \"Times New Roman\" , Times , serif ; } Banner Title Title for the Privacy Banner. . uc-title { color : red ; font-family : arial ; text-align : center ; font-size : 10 px ; font-weight : 100 ; line-height : 15 px ; } Buttons Buttons of the CMP (Accept all / Deny All / More Information / Save). . uc-action-button { border : 2 px dashed #ccc ; font-size : 14 px ; font-weight : normal ; height : 30 px ; margin : 0 10 px ; padding : 2 px ; width : auto ; } Buttons Container The buttons wrapper of the CMP (Accept all / Deny All / More Information / Save). . uc-buttons-container { flex-direction : row-reverse ; } Category / Purpose and Services / Vendors Wrapper The wrapper that contains the Vendors / Services / Categories / Purposes list. . uc-tab-content { background : #ccc ; color : red ; margin : 20 px ; padding : 0 30 px ; } CMP Wrapper The wrapper that containts the entire CMP. . uc-layer { border : 10 px solid #000 ; height : 80 % ; margin : 50 px auto 0 ; padding : 30 px ; width : 60 % ; max-width : 50 % ; } Language Switch Language switch menu on the first and second layer. . uc-language-switch { background : green ; color : #fff ; font-size : 14 px ; } Links Adjust the links to the privacy policy / legal notice on your first layer. . uc-links { font-size : 16 px ; text-decoration : underline ; font-weight : 100 ; line-height : 15 px ; } Tab Buttons The tab buttons for Categories and Services (Purposes and Vendors in TCF2.0). . uc-tab-button { background : #ccc ; font : arial ; height : 30 px ; margin : 5 px ; padding : 10 px ; width : 100 px ; font-size : 10 px ; font-weight : 100 ; line-height : 15 px ; } Cards The cards for Categories and Services (Purposes and Vendors in TCF2.0). . uc-card-title { font-size : 20 px ; font-weight : 300 ; line-height : 15 px ; } . uc-card-description { font-size : 15 px ; font-weight : 100 ; line-height : 15 px ; } Case-Specific Classes We also offer the possibility to change the CSS only for specific cases, by adding __CASE in front of the mentioned all device classes. All the properties associated with the classes mentioned before also apply to these case-specific classes. Desktop-Specific Classes For desktop-specific classes, where the width (in portrait) or where the height (in landscape) are equal or higher than 768px, just add __desktop to any of the all device classes. For example: . uc-action-button__desktop { border : 2 px dashed #ccc } Internet Explorer 11 Classes For IE11-specific classes, just add __ie to any of the all device classes. For example: . uc-tab-content__ie { background-color : #ccc ; } Landscape-Specific Classes For landscape-specific classes, just add __landscape to any of the all device classes. For example: . uc-tab-content__landscape { background-color : #ccc ; } Portrait-Specific Classes For portrait-specific classes, just add __portrait to any of the all device classes. For example: . uc-tab-content__portrait { background-color : #ccc ; } Mobile-Specific Classes For mobile-specific classes, where the width (portrait) and the height (landscape) is smaller than 768px and equal or higher than 600px, just add __mobile to any of the all device classes. For example: . uc-tab-content__mobile { background-color : #ccc ; } Small Mobile-Specific Classes For small mobile-specific classes, where the width (portrait) and the height (landscape) is smaller than 600px and equal or higher than 400px, just add __mobileSmall to any of the all device classes. For example: . uc-tab-content__mobileSmall { background-color : #ccc ; } Extra Small Mobile-Specific Classes For extra small mobile-specific classes, where the width (portrait) and the height (landscape) is smaller than 400px, just add __mobileExtraSmall to any of the all device classes. For example: . uc-tab-content__mobileExtraSmall { background-color : #ccc ; } Example of Custom CSS In this example we tested most possible changes to show you what you can do with Custom CSS in the CMP v2. Example Code . uc-action-button { border : 2 px dashed #ccc ; font-size : 14 px ; font-weight : normal ; height : 10 px ; margin : 0 10 px ; padding : 2 px ; width : auto ; } . uc-message { color : gray ; font-weight : 0 ; } . uc-language-switch { background : gray ; color : #fff ; font-size : 14 px ; } . uc-layer { border : 10 px solid #000 ; height : 60 % ; margin : 50 px auto 0 ; padding : 30 px ; width : 100 % ; max-width : 50 % ; } . uc-tab-button { background : #ccc ; font : arial ; height : 30 px ; margin : 5 px ; padding : 10 px ; width : 100 px ; } . uc-tab-content { background : lightgray ; color : red ; margin : 5 px ; padding : 10 px ; } . uc-title { color : black ; font-family : arial ; text-align : center ; } . uc-card-title { font-size : 20 px ; font-weight : 300 ; line-height : 15 px ; } . uc-card-description { font-size : 15 px ; font-weight : 100 ; line-height : 15 px ; } . uc-links { font-size : 16 px ; text-decoration : underline ; font-weight : 100 ; line-height : 15 px ; }","title":"Custom CSS"},{"location":"pages/features/custom-css/#custom-css","text":"In this documentation, we will provide all information regarding Custom CSS in the CMP v2, including the customizable classes and specific cases. Warning By using Custom CSS, you will be in control of your custom UI. Please be aware that your CSS adjustments will affect the layout of your CMP and possibly also of your website. You'll make these adjustments at your own risk and outside of the sphere of the Usercentrics support.","title":"Custom CSS"},{"location":"pages/features/custom-css/#all-device-classes","text":"These are the editable CSS classes that we offer for the basic cases. We also share the properties that are possible to change for each class. All values written for these properties are just examples.","title":"All Device Classes"},{"location":"pages/features/custom-css/#banner-message","text":"Banner Message of your Privacy Banner. . uc-message { color : purple ; font-weight : bold ; font-family : \"Times New Roman\" , Times , serif ; }","title":"Banner Message"},{"location":"pages/features/custom-css/#banner-title","text":"Title for the Privacy Banner. . uc-title { color : red ; font-family : arial ; text-align : center ; font-size : 10 px ; font-weight : 100 ; line-height : 15 px ; }","title":"Banner Title"},{"location":"pages/features/custom-css/#buttons","text":"Buttons of the CMP (Accept all / Deny All / More Information / Save). . uc-action-button { border : 2 px dashed #ccc ; font-size : 14 px ; font-weight : normal ; height : 30 px ; margin : 0 10 px ; padding : 2 px ; width : auto ; }","title":"Buttons"},{"location":"pages/features/custom-css/#buttons-container","text":"The buttons wrapper of the CMP (Accept all / Deny All / More Information / Save). . uc-buttons-container { flex-direction : row-reverse ; }","title":"Buttons Container"},{"location":"pages/features/custom-css/#category-purpose-and-services-vendors-wrapper","text":"The wrapper that contains the Vendors / Services / Categories / Purposes list. . uc-tab-content { background : #ccc ; color : red ; margin : 20 px ; padding : 0 30 px ; }","title":"Category / Purpose and Services / Vendors Wrapper"},{"location":"pages/features/custom-css/#cmp-wrapper","text":"The wrapper that containts the entire CMP. . uc-layer { border : 10 px solid #000 ; height : 80 % ; margin : 50 px auto 0 ; padding : 30 px ; width : 60 % ; max-width : 50 % ; }","title":"CMP Wrapper"},{"location":"pages/features/custom-css/#language-switch","text":"Language switch menu on the first and second layer. . uc-language-switch { background : green ; color : #fff ; font-size : 14 px ; }","title":"Language Switch"},{"location":"pages/features/custom-css/#links","text":"Adjust the links to the privacy policy / legal notice on your first layer. . uc-links { font-size : 16 px ; text-decoration : underline ; font-weight : 100 ; line-height : 15 px ; }","title":"Links"},{"location":"pages/features/custom-css/#tab-buttons","text":"The tab buttons for Categories and Services (Purposes and Vendors in TCF2.0). . uc-tab-button { background : #ccc ; font : arial ; height : 30 px ; margin : 5 px ; padding : 10 px ; width : 100 px ; font-size : 10 px ; font-weight : 100 ; line-height : 15 px ; }","title":"Tab Buttons"},{"location":"pages/features/custom-css/#cards","text":"The cards for Categories and Services (Purposes and Vendors in TCF2.0). . uc-card-title { font-size : 20 px ; font-weight : 300 ; line-height : 15 px ; } . uc-card-description { font-size : 15 px ; font-weight : 100 ; line-height : 15 px ; }","title":"Cards"},{"location":"pages/features/custom-css/#case-specific-classes","text":"We also offer the possibility to change the CSS only for specific cases, by adding __CASE in front of the mentioned all device classes. All the properties associated with the classes mentioned before also apply to these case-specific classes.","title":"Case-Specific Classes"},{"location":"pages/features/custom-css/#desktop-specific-classes","text":"For desktop-specific classes, where the width (in portrait) or where the height (in landscape) are equal or higher than 768px, just add __desktop to any of the all device classes. For example: . uc-action-button__desktop { border : 2 px dashed #ccc }","title":"Desktop-Specific Classes"},{"location":"pages/features/custom-css/#internet-explorer-11-classes","text":"For IE11-specific classes, just add __ie to any of the all device classes. For example: . uc-tab-content__ie { background-color : #ccc ; }","title":"Internet Explorer 11 Classes"},{"location":"pages/features/custom-css/#landscape-specific-classes","text":"For landscape-specific classes, just add __landscape to any of the all device classes. For example: . uc-tab-content__landscape { background-color : #ccc ; }","title":"Landscape-Specific Classes"},{"location":"pages/features/custom-css/#portrait-specific-classes","text":"For portrait-specific classes, just add __portrait to any of the all device classes. For example: . uc-tab-content__portrait { background-color : #ccc ; }","title":"Portrait-Specific Classes"},{"location":"pages/features/custom-css/#mobile-specific-classes","text":"For mobile-specific classes, where the width (portrait) and the height (landscape) is smaller than 768px and equal or higher than 600px, just add __mobile to any of the all device classes. For example: . uc-tab-content__mobile { background-color : #ccc ; }","title":"Mobile-Specific Classes"},{"location":"pages/features/custom-css/#small-mobile-specific-classes","text":"For small mobile-specific classes, where the width (portrait) and the height (landscape) is smaller than 600px and equal or higher than 400px, just add __mobileSmall to any of the all device classes. For example: . uc-tab-content__mobileSmall { background-color : #ccc ; }","title":"Small Mobile-Specific Classes"},{"location":"pages/features/custom-css/#extra-small-mobile-specific-classes","text":"For extra small mobile-specific classes, where the width (portrait) and the height (landscape) is smaller than 400px, just add __mobileExtraSmall to any of the all device classes. For example: . uc-tab-content__mobileExtraSmall { background-color : #ccc ; }","title":"Extra Small Mobile-Specific Classes"},{"location":"pages/features/custom-css/#example-of-custom-css","text":"In this example we tested most possible changes to show you what you can do with Custom CSS in the CMP v2.","title":"Example of Custom CSS"},{"location":"pages/features/custom-css/#example-code","text":". uc-action-button { border : 2 px dashed #ccc ; font-size : 14 px ; font-weight : normal ; height : 10 px ; margin : 0 10 px ; padding : 2 px ; width : auto ; } . uc-message { color : gray ; font-weight : 0 ; } . uc-language-switch { background : gray ; color : #fff ; font-size : 14 px ; } . uc-layer { border : 10 px solid #000 ; height : 60 % ; margin : 50 px auto 0 ; padding : 30 px ; width : 100 % ; max-width : 50 % ; } . uc-tab-button { background : #ccc ; font : arial ; height : 30 px ; margin : 5 px ; padding : 10 px ; width : 100 px ; } . uc-tab-content { background : lightgray ; color : red ; margin : 5 px ; padding : 10 px ; } . uc-title { color : black ; font-family : arial ; text-align : center ; } . uc-card-title { font-size : 20 px ; font-weight : 300 ; line-height : 15 px ; } . uc-card-description { font-size : 15 px ; font-weight : 100 ; line-height : 15 px ; } . uc-links { font-size : 16 px ; text-decoration : underline ; font-weight : 100 ; line-height : 15 px ; }","title":"Example Code"},{"location":"pages/features/embeddings/","text":"Privacy Policy Embeddings Integrate our Data Processing Services directly into your website, e.g. your privacy policy. Introduction Design your privacy policy page with our embeddings so you don't have to maintain the difference between your privacy policy and your CMP. Keep your legally required information easily up to date, instead of extracting the information from our CMP and manually integrate it into your privacy policy page. We provide an Embedding for all your services with customization options to only display the required information. Embedding Data Processing Services Offers to embed Data Processing Services on a custom level of information. Embed all Data Processing Service with full information < div class = \"uc-embed\" uc-data = \"all\" ></ div > Embed a single Data Processing Service with full information // e.g. Embedding for Facebook Connect < div class = \"uc-embed\" uc-consent-name = \"Facebook Connect\" uc-data = \"all\" ></ div > Embed a single Data Processing Service with selected information // e.g. Embedding for Google Tag Manager with name, description and data Purposes < div class = \"uc-embed\" uc-layout = \"serviceDetails\" uc-consent-name = \"Google Tag Manager\" uc-data = \"processorNames, description, dataPurposes\" ></ div > Optional attributes for controlling the information level uc-data: String with optional content, e.g. uc-data=\"processorNames, description, dataPurposes, ...\" optInCheckboxWithLabel: Name of the Data Processing Service including a checkbox for consenting or denying the service. processorNames: Name of the data processor as well as its address. description: Description of the Data Processing Service. If you have changed the description in the settings manually, the adjusted text will be displayed. dataPurposes: List of the data processing purposes. technologiesUsed: List of the used technologies. dataCollected: List of the collected data. legalBasis: Legal basis, the data processing purpose is based on. retentionPeriod: Retention period of the processed data. dataRecipients: Further companies, which receive the processed data. thirdCountryTransfer: List of all countries, in which the processed data is saved. dataProtectionOfficer: E-Mail address of the data protection officer of the data processing service. furtherInformation: Additional information: opt-out link, opt-out description, privacy policy link, cookie policy link, link to the order processing contract, cookie storage information. processingLocation: Location where data is processed. all: Use this attribute only to show all the mentioned information above of the data processing service. Embed types and UC Styling Choose whether to embed Data Processing Services grouped by Category, and wheter to set predefined styling of the embed list Attribute name: uc-embedding-type Possible values: \"all\", \"category\", \"category-only Default value: \"all\" Attribute name: uc-styling Default value: \"false\" Type all: uc-embedding-type=\"all\" uc-styling=\"true\" uc-embedding-type=\"all\" uc-styling=\"false\" There is a specific style applied to all elements in the list, which also includes a collapsable logic for the list items No style is applied to the HTML Elements Type category: uc-embedding-type=\"category\" uc-styling=\"true\" uc-embedding-type=\"category\" uc-styling=\"false\" Services grouped by Category with style applied Services grouped by Category no style applied Type category only: uc-embedding-type=\"category-only\" uc-styling=\"true\" uc-embedding-type=\"category-only\" uc-styling=\"false\" Categories with style applied (no services) Categories no style applied (no services) Embed Data Processing Services with Toggles Choose whether to show toggles on each DPS Note: This option is only available when styled option is enabled Attribute name: uc-show-toggle Default value: \"false\" uc-embedding-type=\"all\" uc-show-toggle=\"true\" uc-embedding-type=\"category\" uc-show-toggle=\"true\" uc-embedding-type=\"category-only\" uc-show-toggle=\"true\" All Services with visible toggles Services grouped by Category with visible toggles All Categories with visible toggles (without services) It is also possible to customize the toggles' colors by defining CSS rules for each kind of toggle Toggle State CSS Class On .uc-embed-toggle-button.toggle-on Off .uc-embed-toggle-button.toggle-off Disabled .uc-embed-toggle-button.toggle-disabled Example: CSS Result . uc-embed-toggle-button . toggle-on > svg g path : first-child { fill : #00FF00 ; } . uc-embed-toggle-button . toggle-off > svg g path : first-child { fill : #FF0000 ; } Embedding TCF 2.0 Setup If you are using TCF you can embed the Information regarding purposes and vendors by simply defining HTML Div Elements with class=\"uc-embed-tcf\" on your site, which then will be automatically filled. There are options you can specify using specific element attributes. All attributes have default values and do not need to be specified, if the default value is the desired one. Setup Options < div class = \"uc-embed-tcf\" uc-styling = \"true\" uc-embedding-type = \"purpose\" > </ div > Use UC Styling Set predefined styling of the embed list Attribute name: uc-styling Default value: \"true\" uc-styling=\"true\" uc-styling=\"false\" There is a specific style applied to all elements in the list, which also includes a collapsable logic for the list items No style is applied to the HTML Elements Embedding type Attribute name: uc-embedding-type Possible values: \"vendor\", \"purpose\" Default value: \"vendor\" Vendor List Example: < div class = \"uc-embed-tcf\" uc-styling = \"true\" uc-embedding-type = \"vendor\" uc-embedding-title = \"Custom-Headline\" uc-embedding-vendors = \"Custom-IAB_V-Headline\" uc-embedding-non-iab-vendors = \"Custom-NON_IAB_V-Headline\" > </ div > Embedding Title The title of the whole embedded list Attribute name: uc-embedding-title Default value: tab name of the second layer (\"Vendors\") Embedding List Title for IAB TCF Vendors The title of the sublist of IAB TCF Vendors Attribute name: uc-embedding-vendors Default value: headline of the IAB TCF Vendor list in the second layer (\"Vendors who are part of the IAB TCF\") Embedding List Title for NON IAB TCF Vendors The title of the sublist of NON IAB TCF Vendors Attribute name: uc-embedding-non-iab-vendors Default value: headline of the NON IAB TCF Vendor list in the second layer (\"Vendors who are not part of the IAB TCF\") Purpose List Example: < div class = \"uc-embed-tcf\" uc-styling = \"true\" uc-embedding-type = \"purpose\" uc-embedding-title = \"Custom-Headline\" uc-embedding-purpose = \"Custom-IAB_P-Headline\" uc-embedding-non-iab-purpose = \"Custom-NON_IAB_P-Headline\" > </ div > Embedding Title The title of the whole embedded list Attribute name: uc-embedding-title Default value: tab name of the second layer (\"Purposes\") Embedding List Title for IAB TCF Purposes The title of the sublist of IAB TCF Purposes Attribute name: uc-embedding-purpose Default value: headline of the Purposes list in the second layer (\"Purposes\") Embedding List Title for NON IAB TCF Purposes The title of the Sublist of NON IAB TCF Purposes Attribute name: uc-embedding-non-iab-purpose Default value: headline of the NON IAB TCF Purposes list in the second layer (\"Non-IAB Purposes\") Outer HTML Structure without UC style Vendor < div class = \"uc-embed-tcf\" uc-embedding-type = \"vendor\" uc-styling = \"false\" > < div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Vendors </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are not part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div > </ div > Purpose < div class = \"uc-embed-tcf\" uc-embedding-type = \"purpose\" uc-styling = \"false\" > < div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Purposes </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Purposes </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Features </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Non-IAB Purposes </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div > </ div > Outer HTML Structure with UC style Vendor < div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Vendors </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" style = \"display: inline-grid\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are not part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div > Purpose < div class = \"uc-embed-tcf\" uc-embedding-type = \"purpose\" uc-styling = \"true\" > < div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Purposes </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Purposes </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Features </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Non-IAB Purposes </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div > </ div > Collapse structure Collapsed ... < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... Opened ... < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-opened-button\" > < div class = \"uc-embed-opened-button-content\" > name </ div > < i class = \"uc-embed-opened-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: inline-block; ...\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... Subelement HTML Structure All these HTML Elements can be part of a subelement. < div class = \"uc-embed-subelement\" > <!-- Headline of the Subelement --> < h5 class = \"uc-embed-subelement-headline\" > Subelement Headline </ h5 > <!-- Bullet point list --> < ul class = \"uc-embed-subelement-item-list\" > < li class = \"uc-embed-subelement-item-list-element\" > Bullet point </ li > ... </ ul > <!-- Link --> < a class = \"uc-embed-link\" href = \"...\" > text </ a > <!-- Show more button (Opens second layer of the CMP) --> < button class = \"uc-embed-block-list-view-more-button\" > Show more </ button > <!-- Description --> < p class = \"uc-embed-subelement-description\" > text </ p > <!-- Special List (if UC Style is enabled) --> < ul class = \"uc-embed-subelement-block-list\" > < li class = \"uc-embed-subelement-block-list-element\" > text </ li > ... </ ul > <!-- Expandable Link (if UC Style is enabled) --> < button class = \"uc-embed-collapsed-link\" > < div class = \"uc-embed-collapsed-link-content\" > label </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > <!-- All subelements described above can be part of an expandable link content --> <!-- Stored Information Subelement --> < div class = \"uc-embed-subelement-stored-info\" > <!-- See Subelement Stored Information HTML Structure --> </ div > ... </ div > </ div > Subelement Stored Information HTML Structure Loading and Retry represent states of the process of getting the stored information data, so they don't coexist with Info Headline and Info Data. Retry state should be shown if something goes wrong while loading the data. Info Headline alongside with Info Data represent the success state of getting the data. < div class = \"uc-embed-subelement-stored-info\" > <!-- Stored Info Item --> < div class = \"uc-embed-stored-info-item\" > <!-- Stored Info Loading/Retry Text --> < div class = \"uc-embed-stored-info-action\" > < p class = \"uc-embed-stored-info-action-item\" ></ p > ... </ div > <!-- Stored Info Headline --> < p class = \"uc-embed-stored-info-item-headline\" ></ p > <!-- Stored Info Data --> < div class = \"uc-embed-stored-info-item-data\" > < p class = \"uc-embed-stored-info-item-data-element\" ></ p > ... </ div > </ div > </ div >","title":"Embeddings"},{"location":"pages/features/embeddings/#privacy-policy-embeddings","text":"Integrate our Data Processing Services directly into your website, e.g. your privacy policy.","title":"Privacy Policy Embeddings"},{"location":"pages/features/embeddings/#introduction","text":"Design your privacy policy page with our embeddings so you don't have to maintain the difference between your privacy policy and your CMP. Keep your legally required information easily up to date, instead of extracting the information from our CMP and manually integrate it into your privacy policy page. We provide an Embedding for all your services with customization options to only display the required information.","title":"Introduction"},{"location":"pages/features/embeddings/#embedding-data-processing-services","text":"Offers to embed Data Processing Services on a custom level of information. Embed all Data Processing Service with full information < div class = \"uc-embed\" uc-data = \"all\" ></ div > Embed a single Data Processing Service with full information // e.g. Embedding for Facebook Connect < div class = \"uc-embed\" uc-consent-name = \"Facebook Connect\" uc-data = \"all\" ></ div > Embed a single Data Processing Service with selected information // e.g. Embedding for Google Tag Manager with name, description and data Purposes < div class = \"uc-embed\" uc-layout = \"serviceDetails\" uc-consent-name = \"Google Tag Manager\" uc-data = \"processorNames, description, dataPurposes\" ></ div > Optional attributes for controlling the information level uc-data: String with optional content, e.g. uc-data=\"processorNames, description, dataPurposes, ...\" optInCheckboxWithLabel: Name of the Data Processing Service including a checkbox for consenting or denying the service. processorNames: Name of the data processor as well as its address. description: Description of the Data Processing Service. If you have changed the description in the settings manually, the adjusted text will be displayed. dataPurposes: List of the data processing purposes. technologiesUsed: List of the used technologies. dataCollected: List of the collected data. legalBasis: Legal basis, the data processing purpose is based on. retentionPeriod: Retention period of the processed data. dataRecipients: Further companies, which receive the processed data. thirdCountryTransfer: List of all countries, in which the processed data is saved. dataProtectionOfficer: E-Mail address of the data protection officer of the data processing service. furtherInformation: Additional information: opt-out link, opt-out description, privacy policy link, cookie policy link, link to the order processing contract, cookie storage information. processingLocation: Location where data is processed. all: Use this attribute only to show all the mentioned information above of the data processing service. Embed types and UC Styling Choose whether to embed Data Processing Services grouped by Category, and wheter to set predefined styling of the embed list Attribute name: uc-embedding-type Possible values: \"all\", \"category\", \"category-only Default value: \"all\" Attribute name: uc-styling Default value: \"false\" Type all: uc-embedding-type=\"all\" uc-styling=\"true\" uc-embedding-type=\"all\" uc-styling=\"false\" There is a specific style applied to all elements in the list, which also includes a collapsable logic for the list items No style is applied to the HTML Elements Type category: uc-embedding-type=\"category\" uc-styling=\"true\" uc-embedding-type=\"category\" uc-styling=\"false\" Services grouped by Category with style applied Services grouped by Category no style applied Type category only: uc-embedding-type=\"category-only\" uc-styling=\"true\" uc-embedding-type=\"category-only\" uc-styling=\"false\" Categories with style applied (no services) Categories no style applied (no services) Embed Data Processing Services with Toggles Choose whether to show toggles on each DPS Note: This option is only available when styled option is enabled Attribute name: uc-show-toggle Default value: \"false\" uc-embedding-type=\"all\" uc-show-toggle=\"true\" uc-embedding-type=\"category\" uc-show-toggle=\"true\" uc-embedding-type=\"category-only\" uc-show-toggle=\"true\" All Services with visible toggles Services grouped by Category with visible toggles All Categories with visible toggles (without services) It is also possible to customize the toggles' colors by defining CSS rules for each kind of toggle Toggle State CSS Class On .uc-embed-toggle-button.toggle-on Off .uc-embed-toggle-button.toggle-off Disabled .uc-embed-toggle-button.toggle-disabled Example: CSS Result . uc-embed-toggle-button . toggle-on > svg g path : first-child { fill : #00FF00 ; } . uc-embed-toggle-button . toggle-off > svg g path : first-child { fill : #FF0000 ; }","title":"Embedding Data Processing Services"},{"location":"pages/features/embeddings/#embedding-tcf-20","text":"","title":"Embedding TCF 2.0"},{"location":"pages/features/embeddings/#setup","text":"If you are using TCF you can embed the Information regarding purposes and vendors by simply defining HTML Div Elements with class=\"uc-embed-tcf\" on your site, which then will be automatically filled. There are options you can specify using specific element attributes. All attributes have default values and do not need to be specified, if the default value is the desired one. Setup Options < div class = \"uc-embed-tcf\" uc-styling = \"true\" uc-embedding-type = \"purpose\" > </ div > Use UC Styling Set predefined styling of the embed list Attribute name: uc-styling Default value: \"true\" uc-styling=\"true\" uc-styling=\"false\" There is a specific style applied to all elements in the list, which also includes a collapsable logic for the list items No style is applied to the HTML Elements Embedding type Attribute name: uc-embedding-type Possible values: \"vendor\", \"purpose\" Default value: \"vendor\"","title":"Setup"},{"location":"pages/features/embeddings/#vendor-list","text":"Example: < div class = \"uc-embed-tcf\" uc-styling = \"true\" uc-embedding-type = \"vendor\" uc-embedding-title = \"Custom-Headline\" uc-embedding-vendors = \"Custom-IAB_V-Headline\" uc-embedding-non-iab-vendors = \"Custom-NON_IAB_V-Headline\" > </ div > Embedding Title The title of the whole embedded list Attribute name: uc-embedding-title Default value: tab name of the second layer (\"Vendors\") Embedding List Title for IAB TCF Vendors The title of the sublist of IAB TCF Vendors Attribute name: uc-embedding-vendors Default value: headline of the IAB TCF Vendor list in the second layer (\"Vendors who are part of the IAB TCF\") Embedding List Title for NON IAB TCF Vendors The title of the sublist of NON IAB TCF Vendors Attribute name: uc-embedding-non-iab-vendors Default value: headline of the NON IAB TCF Vendor list in the second layer (\"Vendors who are not part of the IAB TCF\")","title":"Vendor List"},{"location":"pages/features/embeddings/#purpose-list","text":"Example: < div class = \"uc-embed-tcf\" uc-styling = \"true\" uc-embedding-type = \"purpose\" uc-embedding-title = \"Custom-Headline\" uc-embedding-purpose = \"Custom-IAB_P-Headline\" uc-embedding-non-iab-purpose = \"Custom-NON_IAB_P-Headline\" > </ div > Embedding Title The title of the whole embedded list Attribute name: uc-embedding-title Default value: tab name of the second layer (\"Purposes\") Embedding List Title for IAB TCF Purposes The title of the sublist of IAB TCF Purposes Attribute name: uc-embedding-purpose Default value: headline of the Purposes list in the second layer (\"Purposes\") Embedding List Title for NON IAB TCF Purposes The title of the Sublist of NON IAB TCF Purposes Attribute name: uc-embedding-non-iab-purpose Default value: headline of the NON IAB TCF Purposes list in the second layer (\"Non-IAB Purposes\")","title":"Purpose List"},{"location":"pages/features/embeddings/#outer-html-structure-without-uc-style","text":"","title":"Outer HTML Structure without UC style"},{"location":"pages/features/embeddings/#vendor","text":"< div class = \"uc-embed-tcf\" uc-embedding-type = \"vendor\" uc-styling = \"false\" > < div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Vendors </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are not part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div > </ div >","title":"Vendor"},{"location":"pages/features/embeddings/#purpose","text":"< div class = \"uc-embed-tcf\" uc-embedding-type = \"purpose\" uc-styling = \"false\" > < div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Purposes </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Purposes </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Features </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Non-IAB Purposes </ h3 > < div class = \"uc-embed-list-item\" > < h4 class = \"uc-embed-list-item-headline\" > name </ h4 > < div class = \"uc-embed-list-item-content\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div > </ div >","title":"Purpose"},{"location":"pages/features/embeddings/#outer-html-structure-with-uc-style","text":"","title":"Outer HTML Structure with UC style"},{"location":"pages/features/embeddings/#vendor_1","text":"< div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Vendors </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" style = \"display: inline-grid\" > < h3 class = \"uc-embed-list-headline\" > Vendors who are not part of the IAB TCF </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div >","title":"Vendor"},{"location":"pages/features/embeddings/#purpose_1","text":"< div class = \"uc-embed-tcf\" uc-embedding-type = \"purpose\" uc-styling = \"true\" > < div class = \"uc-embed-container\" > < h2 class = \"uc-embed-headline\" > Purposes </ h2 > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Purposes </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Features </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > < div class = \"uc-embed-list\" > < h3 class = \"uc-embed-list-headline\" > Non-IAB Purposes </ h3 > < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ... </ div > </ div > </ div > Collapse structure","title":"Purpose"},{"location":"pages/features/embeddings/#collapsed","text":"... < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-collapsed-button\" > < div class = \"uc-embed-collapsed-button-content\" > name </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ...","title":"Collapsed"},{"location":"pages/features/embeddings/#opened","text":"... < div class = \"uc-embed-list-item\" > < button class = \"uc-embed-opened-button\" > < div class = \"uc-embed-opened-button-content\" > name </ div > < i class = \"uc-embed-opened-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: inline-block; ...\" id = \"uc-embed-collapsable-...\" > < div class = \"uc-embed-subelement\" > <!-- See Subelement HTML Structure --> </ div > ... </ div > </ div > ...","title":"Opened"},{"location":"pages/features/embeddings/#subelement-html-structure","text":"All these HTML Elements can be part of a subelement. < div class = \"uc-embed-subelement\" > <!-- Headline of the Subelement --> < h5 class = \"uc-embed-subelement-headline\" > Subelement Headline </ h5 > <!-- Bullet point list --> < ul class = \"uc-embed-subelement-item-list\" > < li class = \"uc-embed-subelement-item-list-element\" > Bullet point </ li > ... </ ul > <!-- Link --> < a class = \"uc-embed-link\" href = \"...\" > text </ a > <!-- Show more button (Opens second layer of the CMP) --> < button class = \"uc-embed-block-list-view-more-button\" > Show more </ button > <!-- Description --> < p class = \"uc-embed-subelement-description\" > text </ p > <!-- Special List (if UC Style is enabled) --> < ul class = \"uc-embed-subelement-block-list\" > < li class = \"uc-embed-subelement-block-list-element\" > text </ li > ... </ ul > <!-- Expandable Link (if UC Style is enabled) --> < button class = \"uc-embed-collapsed-link\" > < div class = \"uc-embed-collapsed-link-content\" > label </ div > < i class = \"uc-embed-collapsed-arrow\" ></ i > </ button > < div class = \"uc-embed-collapse-content\" style = \"display: none\" id = \"uc-embed-collapsable-...\" > <!-- All subelements described above can be part of an expandable link content --> <!-- Stored Information Subelement --> < div class = \"uc-embed-subelement-stored-info\" > <!-- See Subelement Stored Information HTML Structure --> </ div > ... </ div > </ div > Subelement Stored Information HTML Structure Loading and Retry represent states of the process of getting the stored information data, so they don't coexist with Info Headline and Info Data. Retry state should be shown if something goes wrong while loading the data. Info Headline alongside with Info Data represent the success state of getting the data. < div class = \"uc-embed-subelement-stored-info\" > <!-- Stored Info Item --> < div class = \"uc-embed-stored-info-item\" > <!-- Stored Info Loading/Retry Text --> < div class = \"uc-embed-stored-info-action\" > < p class = \"uc-embed-stored-info-action-item\" ></ p > ... </ div > <!-- Stored Info Headline --> < p class = \"uc-embed-stored-info-item-headline\" ></ p > <!-- Stored Info Data --> < div class = \"uc-embed-stored-info-item-data\" > < p class = \"uc-embed-stored-info-item-data-element\" ></ p > ... </ div > </ div > </ div >","title":"Subelement HTML Structure"},{"location":"pages/features/events/","text":"The Browser UI provides different events that inform about consent changes or app initialization. These events can be used for Tag Manager and custom implementations. Consent Events Usercentrics provides Data Layer and Window events that specifically target consent changes. consent_status This event gets triggered on two occasions: After the app initialized with the default consent status or the current consent status After saving any new consent change. Example of event details: Tealium I n c : true Userce ntr ics Co nsent Ma na geme nt Pla tf orm : true Web tre kk : true eve nt : \"consent_status\" t ype : \"explicit\" Event name: always \"consent_status\" Event type: implicit: Consents that are not set purposely by the user, eg by Usercentrics on the first-time page visit with the configured default status. explicit: Consents that are set purposely by the user, eg a click on a button. Usage with Google Tag Manager / Data Layer Prerequisites In order to follow this documentation, we assume you have: - A Google Tag Manager account . - Created a Google Tag Manager container on you website. - Inserted the Google Tag Manager script into your website. - Inserted your Usercentrics script into your website. To configure your Google Tag Manger to listen to events pushed into the Data Layer follow these steps: Create Variables You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent. Navigate to \"Variables\" in the side menu of the Google Tag Manager and then click on \"New\". Add a new variable of type \"Data Layer Variable\". In the top left, name the variable \"XXX Variable\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g Google Analytics Under \"Data Layer Variable Name\", insert the name of Data Processing Service e.g \u201cGoogle Analytics\u201d. a. The name has to match exactly (hyphenation, and capitalisation) the Service name you added in your Admin Interface under Service Settings Tick \"Set Default Value\" and set the default value to false. Save \"Google Analytics Variable\". Repeat for all non-IAB vendor scripts Add Trigger There are several ways on how to implement triggers in a Tag Management System. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. Navigate to \"Triggers\" in the side-menu and click on \"New\". Add a new trigger of type \"Custom Event\". In the top left, name the trigger \"XXX Trigger\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g \u201cGoogle Analytics Trigger\u201d Tick \"Use regex matching\" next to the \"Event Name\" input field Under \"Event Name\", insert \"(consent_status.*)\". a. please be ensure to spell consent_status exactly like this. Tick \"Some Custom Events\". In the drop-down menus, set the following condition: \"Google Analytics Variable\" contains true. a. Explanation: The variable contains the user's consent information (variable=true - user opted in || variable=false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable=true Save \"Google Analytics Trigger\". Add the trigger to \"Google Analytics Tag\". Repeat this for each non-IAB vendor script in your Tag Manager Repeat this for each non-IAB vendor Create a default status variable Create a new trigger on the event consent_status for the vendor script tag Add the trigger condition for the respective tag with the condition: \"XXX Variable\" contains true. a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g Google Analytics Add the trigger to the tag Usage as Window Event It is also possible to listen to events that we dispatch as Window Event. The window event name can be configured in the admin interface under Implementation -> Data Layer and Events -> Window Event . In the following example we assume you created a Window Event with the name \"ucEvent\". This is an example code for an event listener: Example: listen to event and check consent status of a service: window . addEventListener ( \"ucEvent\" , function ( e ) { if ( e . detail && e . detail . event == \"consent_status\" ) { // check for consent status of service \"Google Ads Remarketing\" if ( e . detail [ 'Google Ads Remarketing' ] === true ) { console . log ( 'Google Ads Remarketing has consent' ); } else { console . log ( 'Google Ads Remarketing has no consent' ); } } }); App initialization (Browser UI) To ensure the CMP is already initialized before performing app interactions, you can use one of the following options. Event You can add an event listener of app initialization before loading our CMP script Example: window . addEventListener ( 'UC_UI_INITIALIZED' , function ( event ) { // initialized }); Window Method Once the app is initialized, the window variable isInitialized is set to true. Example: UC_UI . isInitialized () : bool Example usage In this example, we show you how to display Second Layer once the app is initialized. if ( window . UC_UI && window . UC_UI . isInitialized ()) { UC_UI . showSecondLayer () } else { window . addEventListener ( 'UC_UI_INITIALIZED' , function ( e ) { UC_UI . showSecondLayer () }); } App navigation (Browser UI) Usercentrics provides a window event to target the user navigation on the CMP layers. Anchors custom events This event gets triggered if you save #onUc(.*)Click for an anchor URL in the admin on the Content area. Those are the anchor links: - privacy policy - cookie policy - imprint Example usage Example of an URL: https://mywebsite.de/privacy-policy.html#onUcMyPrivacyLinkEventNamingClick A user click on the privacy policy link would trigger a \"onUcMyPrivacyLinkEventNamingClick\" custom event. window . addEventListener ( 'onUcMyPrivacyLinkEventNamingClick' , function ( event ) { console . log ( 'Click on the privacy link.' ); }); Privacy Policy and Imprint Custom Events We provide two custom events for the Imprint and Privacy Policy URL fields in the Admin Interface: - #onUcPrivacyClick for the Privacy Policy URL field - #onUcImprintClick for the Imprint URL field. You can add these anchors in Content > First Layer . With these custom events, you can define a Window Event Listener to do a action that you want, for example, you can create an event to redirect to your privacy policy page. window . addEventListener ( \"onUcImprintClick\" , function ( e ){ console . log ( \"Insert here your logic for Imprint\" ) }) window . addEventListener ( \"onUcPrivacyClick\" , function ( e ) { console . log ( \"Insert here your logic for Privacy Policy\" ) }) UC_UI_VIEW_CHANGED This event gets triggered when: - the user opens a layer - the user switches from layer one to layer two - the user switches from layer two to layer one - the user closes all layers The event also holds additional data with more details about the user behaviour. It is possible to know the current layer displayed for the user and the previous layer. Possible values for the current view and previous are: - \"FIRST_LAYER\", - \"NONE\", - \"PRIVACY_BUTTON\", - \"SECOND_LAYER\", UC_UI_CMP_EVENT This event is triggered by the most important actions through the Consent Management Platform, enabling you to listen to user interactions and compare the different variants when using the AB testing for CMP v2 . Those actions are: Event Name Description CMP_SHOWN Event triggered when the CMP is shown ACCEPT_ALL Event triggered by clicking the Accept All button DENY_ALL Event triggered by clicking the Deny All button SAVE Event triggered by clicking the Save button MORE_INFORMATION_LINK Event triggered by clicking the More Information button IMPRINT_LINK Event triggered by clicking the Imprint link PRIVACY_POLICY_LINK Event triggered by clicking the Privacy Policy link Example usage You can add an event listener to detect view changes Example: window . addEventListener ( 'UC_UI_VIEW_CHANGED' , function ( event ) { console . log ( 'Current view is: ' + event . detail . view ); console . log ( 'Previous view is: ' + event . detail . previousView ); });","title":"Events"},{"location":"pages/features/events/#consent-events","text":"Usercentrics provides Data Layer and Window events that specifically target consent changes.","title":"Consent Events"},{"location":"pages/features/events/#consent_status","text":"This event gets triggered on two occasions: After the app initialized with the default consent status or the current consent status After saving any new consent change. Example of event details: Tealium I n c : true Userce ntr ics Co nsent Ma na geme nt Pla tf orm : true Web tre kk : true eve nt : \"consent_status\" t ype : \"explicit\" Event name: always \"consent_status\" Event type: implicit: Consents that are not set purposely by the user, eg by Usercentrics on the first-time page visit with the configured default status. explicit: Consents that are set purposely by the user, eg a click on a button.","title":"consent_status"},{"location":"pages/features/events/#usage-with-google-tag-manager-data-layer","text":"","title":"Usage with Google Tag Manager / Data Layer"},{"location":"pages/features/events/#prerequisites","text":"In order to follow this documentation, we assume you have: - A Google Tag Manager account . - Created a Google Tag Manager container on you website. - Inserted the Google Tag Manager script into your website. - Inserted your Usercentrics script into your website. To configure your Google Tag Manger to listen to events pushed into the Data Layer follow these steps:","title":"Prerequisites"},{"location":"pages/features/events/#create-variables","text":"You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent. Navigate to \"Variables\" in the side menu of the Google Tag Manager and then click on \"New\". Add a new variable of type \"Data Layer Variable\". In the top left, name the variable \"XXX Variable\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g Google Analytics Under \"Data Layer Variable Name\", insert the name of Data Processing Service e.g \u201cGoogle Analytics\u201d. a. The name has to match exactly (hyphenation, and capitalisation) the Service name you added in your Admin Interface under Service Settings Tick \"Set Default Value\" and set the default value to false. Save \"Google Analytics Variable\". Repeat for all non-IAB vendor scripts","title":"Create Variables"},{"location":"pages/features/events/#add-trigger","text":"There are several ways on how to implement triggers in a Tag Management System. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. Navigate to \"Triggers\" in the side-menu and click on \"New\". Add a new trigger of type \"Custom Event\". In the top left, name the trigger \"XXX Trigger\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g \u201cGoogle Analytics Trigger\u201d Tick \"Use regex matching\" next to the \"Event Name\" input field Under \"Event Name\", insert \"(consent_status.*)\". a. please be ensure to spell consent_status exactly like this. Tick \"Some Custom Events\". In the drop-down menus, set the following condition: \"Google Analytics Variable\" contains true. a. Explanation: The variable contains the user's consent information (variable=true - user opted in || variable=false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable=true Save \"Google Analytics Trigger\". Add the trigger to \"Google Analytics Tag\". Repeat this for each non-IAB vendor script in your Tag Manager","title":"Add Trigger"},{"location":"pages/features/events/#repeat-this-for-each-non-iab-vendor","text":"Create a default status variable Create a new trigger on the event consent_status for the vendor script tag Add the trigger condition for the respective tag with the condition: \"XXX Variable\" contains true. a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g Google Analytics Add the trigger to the tag","title":"Repeat this for each non-IAB vendor"},{"location":"pages/features/events/#usage-as-window-event","text":"It is also possible to listen to events that we dispatch as Window Event. The window event name can be configured in the admin interface under Implementation -> Data Layer and Events -> Window Event . In the following example we assume you created a Window Event with the name \"ucEvent\". This is an example code for an event listener: Example: listen to event and check consent status of a service: window . addEventListener ( \"ucEvent\" , function ( e ) { if ( e . detail && e . detail . event == \"consent_status\" ) { // check for consent status of service \"Google Ads Remarketing\" if ( e . detail [ 'Google Ads Remarketing' ] === true ) { console . log ( 'Google Ads Remarketing has consent' ); } else { console . log ( 'Google Ads Remarketing has no consent' ); } } });","title":"Usage as Window Event"},{"location":"pages/features/events/#app-initialization-browser-ui","text":"To ensure the CMP is already initialized before performing app interactions, you can use one of the following options.","title":"App initialization (Browser UI)"},{"location":"pages/features/events/#event","text":"You can add an event listener of app initialization before loading our CMP script Example: window . addEventListener ( 'UC_UI_INITIALIZED' , function ( event ) { // initialized });","title":"Event"},{"location":"pages/features/events/#window-method","text":"Once the app is initialized, the window variable isInitialized is set to true. Example: UC_UI . isInitialized () : bool","title":"Window Method"},{"location":"pages/features/events/#example-usage","text":"In this example, we show you how to display Second Layer once the app is initialized. if ( window . UC_UI && window . UC_UI . isInitialized ()) { UC_UI . showSecondLayer () } else { window . addEventListener ( 'UC_UI_INITIALIZED' , function ( e ) { UC_UI . showSecondLayer () }); }","title":"Example usage"},{"location":"pages/features/events/#app-navigation-browser-ui","text":"Usercentrics provides a window event to target the user navigation on the CMP layers.","title":"App navigation (Browser UI)"},{"location":"pages/features/events/#anchors-custom-events","text":"This event gets triggered if you save #onUc(.*)Click for an anchor URL in the admin on the Content area. Those are the anchor links: - privacy policy - cookie policy - imprint","title":"Anchors custom events"},{"location":"pages/features/events/#example-usage_1","text":"Example of an URL: https://mywebsite.de/privacy-policy.html#onUcMyPrivacyLinkEventNamingClick A user click on the privacy policy link would trigger a \"onUcMyPrivacyLinkEventNamingClick\" custom event. window . addEventListener ( 'onUcMyPrivacyLinkEventNamingClick' , function ( event ) { console . log ( 'Click on the privacy link.' ); });","title":"Example usage"},{"location":"pages/features/events/#privacy-policy-and-imprint-custom-events","text":"We provide two custom events for the Imprint and Privacy Policy URL fields in the Admin Interface: - #onUcPrivacyClick for the Privacy Policy URL field - #onUcImprintClick for the Imprint URL field. You can add these anchors in Content > First Layer . With these custom events, you can define a Window Event Listener to do a action that you want, for example, you can create an event to redirect to your privacy policy page. window . addEventListener ( \"onUcImprintClick\" , function ( e ){ console . log ( \"Insert here your logic for Imprint\" ) }) window . addEventListener ( \"onUcPrivacyClick\" , function ( e ) { console . log ( \"Insert here your logic for Privacy Policy\" ) })","title":"Privacy Policy and Imprint Custom Events"},{"location":"pages/features/events/#uc_ui_view_changed","text":"This event gets triggered when: - the user opens a layer - the user switches from layer one to layer two - the user switches from layer two to layer one - the user closes all layers The event also holds additional data with more details about the user behaviour. It is possible to know the current layer displayed for the user and the previous layer. Possible values for the current view and previous are: - \"FIRST_LAYER\", - \"NONE\", - \"PRIVACY_BUTTON\", - \"SECOND_LAYER\",","title":"UC_UI_VIEW_CHANGED"},{"location":"pages/features/events/#uc_ui_cmp_event","text":"This event is triggered by the most important actions through the Consent Management Platform, enabling you to listen to user interactions and compare the different variants when using the AB testing for CMP v2 . Those actions are: Event Name Description CMP_SHOWN Event triggered when the CMP is shown ACCEPT_ALL Event triggered by clicking the Accept All button DENY_ALL Event triggered by clicking the Deny All button SAVE Event triggered by clicking the Save button MORE_INFORMATION_LINK Event triggered by clicking the More Information button IMPRINT_LINK Event triggered by clicking the Imprint link PRIVACY_POLICY_LINK Event triggered by clicking the Privacy Policy link","title":"UC_UI_CMP_EVENT"},{"location":"pages/features/events/#example-usage_2","text":"You can add an event listener to detect view changes Example: window . addEventListener ( 'UC_UI_VIEW_CHANGED' , function ( event ) { console . log ( 'Current view is: ' + event . detail . view ); console . log ( 'Previous view is: ' + event . detail . previousView ); });","title":"Example usage"},{"location":"pages/features/smart-data-protector/","text":"Smart Data Protector The Usercentrics Smart Data Protector is a service that blocks third-party technologies you added to your website and activates them only for customers that gave their consent to do so. This service is not limited to cookies and can prevent multiple types of resources from being loaded, thus preventing data to be sent to the third-party service. For example, for a visual service like an embedded YouTube Video, the Smart Data Protector will not only prevent any data from being sent to the YouTube server but also provide your users with a preview image of the video, provided by our server. Similarly for a non-visual service like Google Analytics, it will block the scripts and prevent data from being sent to the servers of the service provider. Installation Add the following elements before all other script in your header. Do not set the asynchronous flag for the Smart Data Protector script, or else other scripts may load in parallel and are activated before the Smart Data Protector can block them. If not done already, add the Usercentrics CMP script tag depending on the version you are using. Add the templates of used Data Processing Services (e.g. YouTube) to your Settings in the Admin Interface . This step is required for the Smart Data Protector to be able to unblock the technologies after the user consented. Add the Smart Data Protector script in your HTML header. < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" ></ script > The script must load synchronously to block technologies before they are executed. Do not add attributes like async , defer or type=\"module\" . To improve performance, it is recommended to add the following statements at the top of your <head> section < link rel = \"preconnect\" href = \"//privacy-proxy.usercentrics.eu\" > < link rel = \"preload\" href = \"//privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" as = \"script\" > Finally, your page code will have the following structure: < html > < head > < title > Page title </ title > < meta name = \"description\" content = \"Description\" > <!-- [...] other meta tags --> <!-- BEGIN Usercentrics related code --> < link rel = \"preconnect\" href = \"//app.usercentrics.eu\" > < link rel = \"preconnect\" href = \"//api.usercentrics.eu\" > < link rel = \"preconnect\" href = \"//privacy-proxy.usercentrics.eu\" > < link rel = \"preload\" href = \"//app.usercentrics.eu/browser-ui/latest/loader.js\" as = \"script\" > < link rel = \"preload\" href = \"//privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" as = \"script\" > < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" async ></ script > < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" ></ script > < script > // (optional) additional configs for the Smart Data Protector uc . reloadOnOptIn ( 'BJz7qNsdj-7' ); // reload page on YouTube opt-in </ script > <!-- END Usercentrics related code --> <!-- IMPORTANT: all other scripts are added **after** the Smart Data Protector --> < script type = \"application/javascript\" src = \"//...\" ></ script > </ head > < body ></ body > </ html > noscript protection If a user visits your website with JavaScript disabled in the browser, the Usercentrics Smart Data Protector can not prevent that data is loaded from the iframe source (e.g. Youtube Video). To be GDPR compliant for this case, replace the src attribute in your iframe with uc-src . See the example section for further details. Known limitations Due to the way how modern web browsers work, the Usercentrics Smart Data Protector currently has the following limitations: The Usercentrics technology is based on JavaScript. If your customers have JavaScript deactivated in their web browser and you have a <noscript> tag added to your website, transferring data to a third party can not be blocked. We suggest not using <noscript> tags at all. Although the execution of JavaScript code is blocked, Smart Data Protector cannot prevent the download of the referenced JavaScript files. Because the IP address is sent during such a request, a third party company will still receive the IP address of your visitors. The previous statement also holds true for CSS code. Smart Data Protector cannot prevent the download of CSS files. A complete blocking is only possible for iframes. References to third party servers inside CSS files using the @import statement can not be blocked. Support for custom service templates The Smart Data Protector only recognizes the predefined service templates by default. Custom service templates can be supported by mapping the template ID of the custom template with the respective predefined template. Please add the following script under your Smart Data Protector script. < script > uc . setServiceAlias ({ 'BJz7qNsdj-7' : 'XXXXX' }) // XXXXX needs to be the templateId of custom Youtube service template // ... you can also map more service IDs similarly </ script > Please note that custom service templates must be mapped to the correct predefined service template in order for this feature to work correctly. Note: After implementing all the necessary installation steps, certain technologies(especially implemented via Javascript libraries, like Lightbox) might still not be enabled correctly after the consent is given. In such cases, we provide the fallback option to trigger a page reload in order to restore the technologies correctly. Please add the following script to your website to trigger a page reload, after the consent is given. < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" > </ script > < script > uc . reloadOnOptIn ( 'BJz7qNsdj-7' ); // reload page on YouTube opt-in // ... you can also add more service IDs similarly </ script > Similarly, in case the consent is revoked, we also provide the fallback option to trigger a page reload in order to block the technologies correctly. Please add the following script to your website to trigger a page reload, after the consent is revoked. < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" > </ script > < script > uc . reloadOnOptOut ( 'BJz7qNsdj-7' ); // reload page on YouTube opt-out // ... you can also add more service IDs similarly </ script > Deactivate Smart Data Protector for specific services The following scripts help to deactivate or activate Smart Data Protector for specific services. Smart Data Protector will ignore deactivated Services completely. Whereas, when using blockOnly SDP will only block/unblock the mentioned services and ignore the rest. The methods deactivateBlocking and blockOnly should not be used together. Deactivate specific Services: < script > uc . deactivateBlocking ([ 'BJz7qNsdj-7' , // YouTube is not blocked 'HkocEodjb7' , // Google Analytics is not blocked // ... you can also add more service IDs similarly ]); </ script > Only activate specific Services: < script > uc . blockOnly ([ 'BJz7qNsdj-7' , // YouTube is blocked 'HkocEodjb7' , // Google Analytics is blocked // ... all other technologies will be ignored! ]); </ script > Please note, this script is only relevant for pre-defined Data Processing Services. If you want to use a custom service, kindly use the service ID for the corresponding pre-defined service. Display overlay for custom elements For visually-supported services, the Smart Data Protector provides overlays with contextual opt-ins for iframe elements by default, in case consent is not given. For non-iframe or custom elements that have a visual component, an overlay can be displayed using the following script: < script > uc . blockElements ({ 'BJz7qNsdj-7' : '#custom-container' , // Show youtube overlay over the element with ID 'custom-container' 'SJFe9NousWX' : '.another-example' // Show Adition overlay over the element with class 'another-example' }); </ script > Example - if Google Maps is injected under a div tag <div id=\"12345\"></div> then the SDP script would be as follows: < script > uc . blockElements ({ 'S1pcEj_jZX' : '#12345' // Show google maps overlay over the element with ID '12345' }); </ script > Please note : This will still be applicable only for the currently supported technologies listed below. Set custom texts on SDP overlays For the currently supported technologies, you can change the text displayed on the overlay by using the uc.setCustomTranslations() method. To enable this, you need to host the files with the custom translations on your server and provide the Smart Data Protector with the host. For example, to set custom English texts, follow the steps mentioned below: 1. Create a file with English version and name it en.json 2. Fill it with following content: { \"ACCEPT\" : \"Accept\" , \"DEFAULT_DESCRIPTION\" : \"We use %TECHNOLOGY_NAME% to embed content that may collect data about your activity. Please review the details and accept the service to see this content.\" , \"DEFAULT_TITLE\" : \"We need your consent to load the %TECHNOLOGY_NAME% service!\" } %TECHNOLOGY_NAME% will be replaced with the name of the service for which the overlay is shown. Host this file on your server (e.g. https://website.com/translations/en.json) Repeat these steps for each language you want to change. Use the supported language ISO codes mentioned here . Add this script to your website: < script > uc . setCustomTranslations ( 'https://website.com/translations' ); </ script > Note that the value in function should point to the directory where language jsons are stored. Smart Data Protector will then try to fetch the custom translations for the selected language. In case some texts are missing for some languages, the default text provided by us will be displayed. List of all available text options: ACCEPT , DEFAULT_DESCRIPTION , DEFAULT_TITLE , FACEBOOK_DESCRIPTION , MAP_DESCRIPTION , MIXCLOUD_DESCRIPTION , MORE_INFO , NOT_PERMITTED_TEXT , PAYPAL_DESCRIPTION , POWERED_BY , RECAPTCHA_ALERT , RECAPTCHA_DESCRIPTION , VIDEO_DESCRIPTION , XING_DESCRIPTION The following diagram shows some of above options: In case if something is wrong with CMP NOT_PERMITTED_TEXT is shown instead of DEFAULT_DESCRIPTION . In order to provide more context, some technologies use different texts instead of the default ones. Find the list of these technologies below Option Template Id Description FACEBOOK_DESCRIPTION XYQZBUojc Facebook MAP_DESCRIPTION S1pcEj_jZX Google Maps MIXCLOUD_DESCRIPTION 4UGBLUJUN Mixcloud PAYPAL_DESCRIPTION JiFH1ubU PayPal RECAPTCHA_DESCRIPTION Hko_qNsui-Q Recaptcha overlay description RECAPTCHA_ALERT Hko_qNsui-Q For recaptcha 3 we have to use some specific functionality (alert is shown instead of overlay). So above text option is used for this alert description VIDEO_DESCRIPTION BJz7qNsdj-7, HyEX5Nidi-m, SJ1aqNjOs-m For some services (YouTube, Vimeo, Wistia) we use another type of embedding - video embedding. This option is used for the overlay description of above technologies XING_DESCRIPTION BJREqEiOiZQ Xing Example of a custom translation: en.json de.json Support for TCF 2.0 The Smart Data Protector is a stand-alone product and works independently from the used CMP version. For the Browser UI, Smart Data Protector therefore also works. However, only for TCF 2.0 there are technical restrictions. The reason for this is that for TCF 2.0, all vendors have to transmit any collected data without any restrictions. But when Smart Data Protector is used, it automatically blocks all supported technologies and replaces them with a placeholder, no matter if the technology is part of the Global Vendor List or not. This means that the data is no longer transmitted without restrictions and for this reason TCF 2.0 is not compatible with Smart Data Protector. Currently supported technologies We support as many implementations as possible of the technologies listed below. Technologies are sorted alphabetically. (click to expand) Technologies Add This (ByOJZ54odjW7) Adition (SJFe9NousWX) Adobe Experience Cloud (f6nkjdUL) Adobe Typekit (HJy4c4s_jbX) Amazon advertising (N2spyFPL) anchor.fm (6znewg1hW) ArcGIS Map (aXnTc_Y3n) AT Internet (fiQX6mqi) Audioboom (c6lt-aZ0) Audiocon (mdM6tHJ4s) Bitmovin (SkdccNsdj-X) Bookingkit (Ewb9uz1Rp) Bryter (A91MHlBY6) Civey (xI9qM4Yhk) Criteo (HyeqVsdjWX) Dailymotion (VJNO26pZe) DataWrapper (8Nxb4ZtSa) Discord (hvWNhpF0T) Disqus (r1rX94i_iZX) eKomi (MEXztGXoM) Facebook Audience (rkUcEjuoWm) Facebook Pixel (ko1w5PpFl) Facebook Social Plugin (XYQZBUojc) Facebook Videos (r5-Z_erQ0) Flickr (X0wJtpzqX) Flockler (uJyv6-Nm) Flourish (kbmJpLAUf) Glomex - BySu54sOjZQ Google Ads (S1_9Vsuj-Q) Google AdWords Remarketing (S1_9Vsuj-Q) Google Analytics (HkocEodjb7) Google Calendar (n1jiXg1v) Google Forms (wgTnPe7i1) Google Maps (S1pcEj_jZX) Google Syndication (SkPc5EjOsWm) Google Tag Manager (BJ59EidsWQ) Google Fonts (HkPBYFofN) Here (0V-E5N_GQ) HubSpot (ry0QcNodoWQ) HubSpot forms (r1Fhc4iOoWX) Instagram (SyUQ54odobQ) Intercom (ryDQcVoOoZQ) Issuu (dwkRM0PG) JotForm (J9V5VBp3y) Juicer (-ONUgPRHp) Juris (YiVeMG4Ma) JW Player (ppPIzs4e) Klaviyo (m5uB6gnoW) LinkedIn Plugin (Hkx754i_iWm) Livestorm.io (KpU9UXKjc) Machineseeker (ukU5jpn0K) Mapbox (U8QkTd2W) Matomo (zqWojrT0P) Matomo (self hosted) - u6fxocwTs Media Math (SJ6xqVidi-X) Mixcloud (4UGBLUJUN) News Anwaltblatt (SJ_6Qo9DJ) Open as App (nTiHcYnDd) Open Street Map (j7Igy6o8D) Opinion Stage (pNOkVRbV6) Paypal (JiFH1ubU) Pinterest (9Q2qrmB3) Piwik Pro - Duda (ze3Iyetr) Playbuzz - cv9bw3QAq Podigee (nhLMP6qX) Prescreen (Sy1naC5nN) PriceHubble (FB_cLNwjQ) reCAPTCHA v1/v2 (Hko_qNsui-Q) reCAPTCHA v3 automatically bind variant (Hko_qNsui-Q) ShareThis (B1639EiOs-7) Shore (W0apH00t) Site Analytics - Duda (wkt-Vgmf7) Site Personalization - Duda (8u-otMeLg) Slideshare (jhJqRRPUe) Smart-rechner (lr0gmwVMY) Snatchbot (t-J9SUrOD) SoundCloud (HyP_q4sdobm) Sovendus (Di_NMaFOX) Splicky (1dU2WuKlq) Spotify (CguMb4Rq) Taboola (HkMucNoOjWX) Taggbox (RyDAUe7cq) Thinglink (T7-yEXGyq) TikTok (Z0TcXjY0P) TwentyThree (1rXAPWvo) Twitch (FPZz1xJI) Twitter Plugin (BJTzqNi_i-m) Typeform (r1PkZcEs_iWQ) Videoask (VtnVCeUzx) Videolyser (SDFUIfvK_) Vidyard (KRDJ6FLgY) Vimeo (HyEX5Nidi-m) Walls.io (FtE1AC6zU) Webtrekk (rJOZc4jOiWQ) Wetter (rerXlW9h2) Wigeogis (uJRRy9uiQ) Wistia (SJ1aqNjOs-m.) Xing Plugin (BJREqEiOiZQ) Yelp (5qKtc_BS) Youtube Video (BJz7qNsdj-7) Yumpu (6LdBYXdAl) Zoho SalesIQ (sKBym34ck) In addition to the above, we support Fancybox 3 implementation of Lightbox Javascript Library. Service providers might update implementations of services that we already support. Please contact us if a specific implementation needs to be supported, we will evaluate and get back to you as soon as possible. Technologies and examples For some technologies we provide a Smart Data Protector Wall as listed below so the users can accept the correspondant services directly. Youtube iFrame Block the Youtube iframe <iframe src=\"https://www.youtube.com/embed/XXX\" Youtube iFrame with noscript protection A Youtube Video iframe which adjusted attribute <iframe uc-src=\"https://www.youtube.com/embed/XXX\" will not be loaded even JavaScript is disabled in the browser of the visitor. Vimeo iFrame Block the Vimeo iframe <iframe src=\"https://player.vimeo.com/video/XXX\" Google Maps Block the Google Map iframe <iframe src=\"https://maps.google.com/maps?q=Munich&...\" Block the Google Map iframe (via Google's \"embed map\" export) <iframe src=\"https://www.google.com/maps/embed?pb=...\" SoundCloud Block the SoundCloud iframe <iframe width=\"100%\" height=\"450\"... Spotify Block the Spotify iframe <iframe src=\"https://open.spotify.com/embed/track/1IbNYr8ByXsgwGbmOxLBXP\"... Facebook Block the Facebook iframe <iframe src=\"https://www.facebook.com/plugins/post.php... Instagram Block the Instagram Blockquote <blockquote class=\"instagram-media\" data-instgrm-permalink=\"https://www.instagram... View this post on Instagram A post shared by Usercentrics GmbH (@usercentrics) on Jul 31, 2020 at 11:55pm PDT ReCaptchaV2 Block the Recaptcha form <form action=\"?\" method=\"POST\"> <div class=\"g-recaptcha\"... Twitter Block the Twitter blockquote <blockquote class=\"twitter-tweet\"... #Oracle & #Salesforce facing class action lawsuits in NL & UK because of doubts about whether the data usage by their marketing platforms had been consented. The industry is changing. Privacy is the new normal. #consentmanagement https://t.co/Kd4ROXGAHU \u2014 Usercentrics GmbH (@usercentrics) August 14, 2020 Customization (CSS) In case the overlay is not displayed correctly on your website or the design does not fit, the layout of the overlays can be customized with your individual CSS code. We recommend to use the descendant combinator to make your rules more specific, for example to change the accept button color use the parent container as a reference: . uc-embedding-container . uc-embedding-buttons . uc-embedding-accept { background-color : green ; } The following diagram shows all available CSS classes:","title":"Smart Data Protector"},{"location":"pages/features/smart-data-protector/#smart-data-protector","text":"The Usercentrics Smart Data Protector is a service that blocks third-party technologies you added to your website and activates them only for customers that gave their consent to do so. This service is not limited to cookies and can prevent multiple types of resources from being loaded, thus preventing data to be sent to the third-party service. For example, for a visual service like an embedded YouTube Video, the Smart Data Protector will not only prevent any data from being sent to the YouTube server but also provide your users with a preview image of the video, provided by our server. Similarly for a non-visual service like Google Analytics, it will block the scripts and prevent data from being sent to the servers of the service provider.","title":"Smart Data Protector"},{"location":"pages/features/smart-data-protector/#installation","text":"Add the following elements before all other script in your header. Do not set the asynchronous flag for the Smart Data Protector script, or else other scripts may load in parallel and are activated before the Smart Data Protector can block them. If not done already, add the Usercentrics CMP script tag depending on the version you are using. Add the templates of used Data Processing Services (e.g. YouTube) to your Settings in the Admin Interface . This step is required for the Smart Data Protector to be able to unblock the technologies after the user consented. Add the Smart Data Protector script in your HTML header. < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" ></ script > The script must load synchronously to block technologies before they are executed. Do not add attributes like async , defer or type=\"module\" . To improve performance, it is recommended to add the following statements at the top of your <head> section < link rel = \"preconnect\" href = \"//privacy-proxy.usercentrics.eu\" > < link rel = \"preload\" href = \"//privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" as = \"script\" > Finally, your page code will have the following structure: < html > < head > < title > Page title </ title > < meta name = \"description\" content = \"Description\" > <!-- [...] other meta tags --> <!-- BEGIN Usercentrics related code --> < link rel = \"preconnect\" href = \"//app.usercentrics.eu\" > < link rel = \"preconnect\" href = \"//api.usercentrics.eu\" > < link rel = \"preconnect\" href = \"//privacy-proxy.usercentrics.eu\" > < link rel = \"preload\" href = \"//app.usercentrics.eu/browser-ui/latest/loader.js\" as = \"script\" > < link rel = \"preload\" href = \"//privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" as = \"script\" > < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" async ></ script > < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" ></ script > < script > // (optional) additional configs for the Smart Data Protector uc . reloadOnOptIn ( 'BJz7qNsdj-7' ); // reload page on YouTube opt-in </ script > <!-- END Usercentrics related code --> <!-- IMPORTANT: all other scripts are added **after** the Smart Data Protector --> < script type = \"application/javascript\" src = \"//...\" ></ script > </ head > < body ></ body > </ html >","title":"Installation"},{"location":"pages/features/smart-data-protector/#noscript-protection","text":"If a user visits your website with JavaScript disabled in the browser, the Usercentrics Smart Data Protector can not prevent that data is loaded from the iframe source (e.g. Youtube Video). To be GDPR compliant for this case, replace the src attribute in your iframe with uc-src . See the example section for further details.","title":"noscript protection"},{"location":"pages/features/smart-data-protector/#known-limitations","text":"Due to the way how modern web browsers work, the Usercentrics Smart Data Protector currently has the following limitations: The Usercentrics technology is based on JavaScript. If your customers have JavaScript deactivated in their web browser and you have a <noscript> tag added to your website, transferring data to a third party can not be blocked. We suggest not using <noscript> tags at all. Although the execution of JavaScript code is blocked, Smart Data Protector cannot prevent the download of the referenced JavaScript files. Because the IP address is sent during such a request, a third party company will still receive the IP address of your visitors. The previous statement also holds true for CSS code. Smart Data Protector cannot prevent the download of CSS files. A complete blocking is only possible for iframes. References to third party servers inside CSS files using the @import statement can not be blocked.","title":"Known limitations"},{"location":"pages/features/smart-data-protector/#support-for-custom-service-templates","text":"The Smart Data Protector only recognizes the predefined service templates by default. Custom service templates can be supported by mapping the template ID of the custom template with the respective predefined template. Please add the following script under your Smart Data Protector script. < script > uc . setServiceAlias ({ 'BJz7qNsdj-7' : 'XXXXX' }) // XXXXX needs to be the templateId of custom Youtube service template // ... you can also map more service IDs similarly </ script > Please note that custom service templates must be mapped to the correct predefined service template in order for this feature to work correctly. Note: After implementing all the necessary installation steps, certain technologies(especially implemented via Javascript libraries, like Lightbox) might still not be enabled correctly after the consent is given. In such cases, we provide the fallback option to trigger a page reload in order to restore the technologies correctly. Please add the following script to your website to trigger a page reload, after the consent is given. < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" > </ script > < script > uc . reloadOnOptIn ( 'BJz7qNsdj-7' ); // reload page on YouTube opt-in // ... you can also add more service IDs similarly </ script > Similarly, in case the consent is revoked, we also provide the fallback option to trigger a page reload in order to block the technologies correctly. Please add the following script to your website to trigger a page reload, after the consent is revoked. < script type = \"application/javascript\" src = \"https://privacy-proxy.usercentrics.eu/latest/uc-block.bundle.js\" > </ script > < script > uc . reloadOnOptOut ( 'BJz7qNsdj-7' ); // reload page on YouTube opt-out // ... you can also add more service IDs similarly </ script >","title":"Support for custom service templates"},{"location":"pages/features/smart-data-protector/#deactivate-smart-data-protector-for-specific-services","text":"The following scripts help to deactivate or activate Smart Data Protector for specific services. Smart Data Protector will ignore deactivated Services completely. Whereas, when using blockOnly SDP will only block/unblock the mentioned services and ignore the rest. The methods deactivateBlocking and blockOnly should not be used together. Deactivate specific Services: < script > uc . deactivateBlocking ([ 'BJz7qNsdj-7' , // YouTube is not blocked 'HkocEodjb7' , // Google Analytics is not blocked // ... you can also add more service IDs similarly ]); </ script > Only activate specific Services: < script > uc . blockOnly ([ 'BJz7qNsdj-7' , // YouTube is blocked 'HkocEodjb7' , // Google Analytics is blocked // ... all other technologies will be ignored! ]); </ script > Please note, this script is only relevant for pre-defined Data Processing Services. If you want to use a custom service, kindly use the service ID for the corresponding pre-defined service.","title":"Deactivate Smart Data Protector for specific services"},{"location":"pages/features/smart-data-protector/#display-overlay-for-custom-elements","text":"For visually-supported services, the Smart Data Protector provides overlays with contextual opt-ins for iframe elements by default, in case consent is not given. For non-iframe or custom elements that have a visual component, an overlay can be displayed using the following script: < script > uc . blockElements ({ 'BJz7qNsdj-7' : '#custom-container' , // Show youtube overlay over the element with ID 'custom-container' 'SJFe9NousWX' : '.another-example' // Show Adition overlay over the element with class 'another-example' }); </ script > Example - if Google Maps is injected under a div tag <div id=\"12345\"></div> then the SDP script would be as follows: < script > uc . blockElements ({ 'S1pcEj_jZX' : '#12345' // Show google maps overlay over the element with ID '12345' }); </ script > Please note : This will still be applicable only for the currently supported technologies listed below.","title":"Display overlay for custom elements"},{"location":"pages/features/smart-data-protector/#set-custom-texts-on-sdp-overlays","text":"For the currently supported technologies, you can change the text displayed on the overlay by using the uc.setCustomTranslations() method. To enable this, you need to host the files with the custom translations on your server and provide the Smart Data Protector with the host. For example, to set custom English texts, follow the steps mentioned below: 1. Create a file with English version and name it en.json 2. Fill it with following content: { \"ACCEPT\" : \"Accept\" , \"DEFAULT_DESCRIPTION\" : \"We use %TECHNOLOGY_NAME% to embed content that may collect data about your activity. Please review the details and accept the service to see this content.\" , \"DEFAULT_TITLE\" : \"We need your consent to load the %TECHNOLOGY_NAME% service!\" } %TECHNOLOGY_NAME% will be replaced with the name of the service for which the overlay is shown. Host this file on your server (e.g. https://website.com/translations/en.json) Repeat these steps for each language you want to change. Use the supported language ISO codes mentioned here . Add this script to your website: < script > uc . setCustomTranslations ( 'https://website.com/translations' ); </ script > Note that the value in function should point to the directory where language jsons are stored. Smart Data Protector will then try to fetch the custom translations for the selected language. In case some texts are missing for some languages, the default text provided by us will be displayed. List of all available text options: ACCEPT , DEFAULT_DESCRIPTION , DEFAULT_TITLE , FACEBOOK_DESCRIPTION , MAP_DESCRIPTION , MIXCLOUD_DESCRIPTION , MORE_INFO , NOT_PERMITTED_TEXT , PAYPAL_DESCRIPTION , POWERED_BY , RECAPTCHA_ALERT , RECAPTCHA_DESCRIPTION , VIDEO_DESCRIPTION , XING_DESCRIPTION The following diagram shows some of above options: In case if something is wrong with CMP NOT_PERMITTED_TEXT is shown instead of DEFAULT_DESCRIPTION . In order to provide more context, some technologies use different texts instead of the default ones. Find the list of these technologies below Option Template Id Description FACEBOOK_DESCRIPTION XYQZBUojc Facebook MAP_DESCRIPTION S1pcEj_jZX Google Maps MIXCLOUD_DESCRIPTION 4UGBLUJUN Mixcloud PAYPAL_DESCRIPTION JiFH1ubU PayPal RECAPTCHA_DESCRIPTION Hko_qNsui-Q Recaptcha overlay description RECAPTCHA_ALERT Hko_qNsui-Q For recaptcha 3 we have to use some specific functionality (alert is shown instead of overlay). So above text option is used for this alert description VIDEO_DESCRIPTION BJz7qNsdj-7, HyEX5Nidi-m, SJ1aqNjOs-m For some services (YouTube, Vimeo, Wistia) we use another type of embedding - video embedding. This option is used for the overlay description of above technologies XING_DESCRIPTION BJREqEiOiZQ Xing Example of a custom translation: en.json de.json","title":"Set custom texts on SDP overlays"},{"location":"pages/features/smart-data-protector/#support-for-tcf-20","text":"The Smart Data Protector is a stand-alone product and works independently from the used CMP version. For the Browser UI, Smart Data Protector therefore also works. However, only for TCF 2.0 there are technical restrictions. The reason for this is that for TCF 2.0, all vendors have to transmit any collected data without any restrictions. But when Smart Data Protector is used, it automatically blocks all supported technologies and replaces them with a placeholder, no matter if the technology is part of the Global Vendor List or not. This means that the data is no longer transmitted without restrictions and for this reason TCF 2.0 is not compatible with Smart Data Protector.","title":"Support for TCF 2.0"},{"location":"pages/features/smart-data-protector/#currently-supported-technologies","text":"We support as many implementations as possible of the technologies listed below. Technologies are sorted alphabetically. (click to expand) Technologies Add This (ByOJZ54odjW7) Adition (SJFe9NousWX) Adobe Experience Cloud (f6nkjdUL) Adobe Typekit (HJy4c4s_jbX) Amazon advertising (N2spyFPL) anchor.fm (6znewg1hW) ArcGIS Map (aXnTc_Y3n) AT Internet (fiQX6mqi) Audioboom (c6lt-aZ0) Audiocon (mdM6tHJ4s) Bitmovin (SkdccNsdj-X) Bookingkit (Ewb9uz1Rp) Bryter (A91MHlBY6) Civey (xI9qM4Yhk) Criteo (HyeqVsdjWX) Dailymotion (VJNO26pZe) DataWrapper (8Nxb4ZtSa) Discord (hvWNhpF0T) Disqus (r1rX94i_iZX) eKomi (MEXztGXoM) Facebook Audience (rkUcEjuoWm) Facebook Pixel (ko1w5PpFl) Facebook Social Plugin (XYQZBUojc) Facebook Videos (r5-Z_erQ0) Flickr (X0wJtpzqX) Flockler (uJyv6-Nm) Flourish (kbmJpLAUf) Glomex - BySu54sOjZQ Google Ads (S1_9Vsuj-Q) Google AdWords Remarketing (S1_9Vsuj-Q) Google Analytics (HkocEodjb7) Google Calendar (n1jiXg1v) Google Forms (wgTnPe7i1) Google Maps (S1pcEj_jZX) Google Syndication (SkPc5EjOsWm) Google Tag Manager (BJ59EidsWQ) Google Fonts (HkPBYFofN) Here (0V-E5N_GQ) HubSpot (ry0QcNodoWQ) HubSpot forms (r1Fhc4iOoWX) Instagram (SyUQ54odobQ) Intercom (ryDQcVoOoZQ) Issuu (dwkRM0PG) JotForm (J9V5VBp3y) Juicer (-ONUgPRHp) Juris (YiVeMG4Ma) JW Player (ppPIzs4e) Klaviyo (m5uB6gnoW) LinkedIn Plugin (Hkx754i_iWm) Livestorm.io (KpU9UXKjc) Machineseeker (ukU5jpn0K) Mapbox (U8QkTd2W) Matomo (zqWojrT0P) Matomo (self hosted) - u6fxocwTs Media Math (SJ6xqVidi-X) Mixcloud (4UGBLUJUN) News Anwaltblatt (SJ_6Qo9DJ) Open as App (nTiHcYnDd) Open Street Map (j7Igy6o8D) Opinion Stage (pNOkVRbV6) Paypal (JiFH1ubU) Pinterest (9Q2qrmB3) Piwik Pro - Duda (ze3Iyetr) Playbuzz - cv9bw3QAq Podigee (nhLMP6qX) Prescreen (Sy1naC5nN) PriceHubble (FB_cLNwjQ) reCAPTCHA v1/v2 (Hko_qNsui-Q) reCAPTCHA v3 automatically bind variant (Hko_qNsui-Q) ShareThis (B1639EiOs-7) Shore (W0apH00t) Site Analytics - Duda (wkt-Vgmf7) Site Personalization - Duda (8u-otMeLg) Slideshare (jhJqRRPUe) Smart-rechner (lr0gmwVMY) Snatchbot (t-J9SUrOD) SoundCloud (HyP_q4sdobm) Sovendus (Di_NMaFOX) Splicky (1dU2WuKlq) Spotify (CguMb4Rq) Taboola (HkMucNoOjWX) Taggbox (RyDAUe7cq) Thinglink (T7-yEXGyq) TikTok (Z0TcXjY0P) TwentyThree (1rXAPWvo) Twitch (FPZz1xJI) Twitter Plugin (BJTzqNi_i-m) Typeform (r1PkZcEs_iWQ) Videoask (VtnVCeUzx) Videolyser (SDFUIfvK_) Vidyard (KRDJ6FLgY) Vimeo (HyEX5Nidi-m) Walls.io (FtE1AC6zU) Webtrekk (rJOZc4jOiWQ) Wetter (rerXlW9h2) Wigeogis (uJRRy9uiQ) Wistia (SJ1aqNjOs-m.) Xing Plugin (BJREqEiOiZQ) Yelp (5qKtc_BS) Youtube Video (BJz7qNsdj-7) Yumpu (6LdBYXdAl) Zoho SalesIQ (sKBym34ck) In addition to the above, we support Fancybox 3 implementation of Lightbox Javascript Library. Service providers might update implementations of services that we already support. Please contact us if a specific implementation needs to be supported, we will evaluate and get back to you as soon as possible.","title":"Currently supported technologies"},{"location":"pages/features/smart-data-protector/#technologies-and-examples","text":"For some technologies we provide a Smart Data Protector Wall as listed below so the users can accept the correspondant services directly.","title":"Technologies and examples"},{"location":"pages/features/smart-data-protector/#youtube-iframe","text":"Block the Youtube iframe <iframe src=\"https://www.youtube.com/embed/XXX\"","title":"Youtube iFrame"},{"location":"pages/features/smart-data-protector/#youtube-iframe-with-noscript-protection","text":"A Youtube Video iframe which adjusted attribute <iframe uc-src=\"https://www.youtube.com/embed/XXX\" will not be loaded even JavaScript is disabled in the browser of the visitor.","title":"Youtube iFrame with noscript protection"},{"location":"pages/features/smart-data-protector/#vimeo-iframe","text":"Block the Vimeo iframe <iframe src=\"https://player.vimeo.com/video/XXX\"","title":"Vimeo iFrame"},{"location":"pages/features/smart-data-protector/#google-maps","text":"Block the Google Map iframe <iframe src=\"https://maps.google.com/maps?q=Munich&...\" Block the Google Map iframe (via Google's \"embed map\" export) <iframe src=\"https://www.google.com/maps/embed?pb=...\"","title":"Google Maps"},{"location":"pages/features/smart-data-protector/#soundcloud","text":"Block the SoundCloud iframe <iframe width=\"100%\" height=\"450\"...","title":"SoundCloud"},{"location":"pages/features/smart-data-protector/#spotify","text":"Block the Spotify iframe <iframe src=\"https://open.spotify.com/embed/track/1IbNYr8ByXsgwGbmOxLBXP\"...","title":"Spotify"},{"location":"pages/features/smart-data-protector/#facebook","text":"Block the Facebook iframe <iframe src=\"https://www.facebook.com/plugins/post.php...","title":"Facebook"},{"location":"pages/features/smart-data-protector/#instagram","text":"Block the Instagram Blockquote <blockquote class=\"instagram-media\" data-instgrm-permalink=\"https://www.instagram... View this post on Instagram A post shared by Usercentrics GmbH (@usercentrics) on Jul 31, 2020 at 11:55pm PDT","title":"Instagram"},{"location":"pages/features/smart-data-protector/#recaptchav2","text":"Block the Recaptcha form <form action=\"?\" method=\"POST\"> <div class=\"g-recaptcha\"...","title":"ReCaptchaV2"},{"location":"pages/features/smart-data-protector/#twitter","text":"Block the Twitter blockquote <blockquote class=\"twitter-tweet\"... #Oracle & #Salesforce facing class action lawsuits in NL & UK because of doubts about whether the data usage by their marketing platforms had been consented. The industry is changing. Privacy is the new normal. #consentmanagement https://t.co/Kd4ROXGAHU \u2014 Usercentrics GmbH (@usercentrics) August 14, 2020","title":"Twitter"},{"location":"pages/features/smart-data-protector/#customization-css","text":"In case the overlay is not displayed correctly on your website or the design does not fit, the layout of the overlays can be customized with your individual CSS code. We recommend to use the descendant combinator to make your rules more specific, for example to change the accept button color use the parent container as a reference: . uc-embedding-container . uc-embedding-buttons . uc-embedding-accept { background-color : green ; } The following diagram shows all available CSS classes:","title":"Customization (CSS)"},{"location":"pages/features/tcf2/","text":"Usercentrics - TCF 2.0 General Information The Usercentrics CMP is IAB TCF 2.0 certified and therefore meets the requirements of the specification of the IAB TCF 2.0 framework. The standard regulates how user consent information has to be captured and used within the programmatic advertising ecosystem, with the goal of a frictionless functioning of the ecosystem through following a standardised approach of implementing data privacy regulations. We are briefly explaining here some key concepts of the framework: The tcString is a technical concept which encodes the consent information in a machine readable format. The tcString contains all required information for any system in the ecosystem to validate what consent has been given by a user and what processing is allowed based on that. The tcString is generated and provided by a CMP at the point where users make consent decisions. Each vendor service that collects data must take the information encoded in the tcString into account and decide if and what consent the user has given. The TCF v2 API is the technical concept that allows the vendors integrated in a website or app to interact with the CMP in order to e.g. obtain the tcString in a standardised way. Any IAB TCF v2 certified CMP implements this API. The Global Vendor List (GVL) is a list of all service vendors who registered for the IAB TCF v2 framework. By registering for the TCF 2.0 framework these vendors confirm that they comply with the framework policies. The list is maintained by the IAB and regular updates are provided, typically on a weekly basis. The list contains all necessary information about the vendors, that is required by the framework such as descriptions of the services and the data the service uses, the purposes for which the service uses the data, the duration of operation of cookies or similar information that the service stores on a user\u2019s device. The TCF v2 framework also prescribes rather strict UX behaviours for CMPs. This impacts the design but also the content shown in a CMP and leaves little room for own optimisation. Aspects like the contrast ratio of colours and the messages that must be shown to users at certain layers of the CMP dialogues are some examples of clearly specified conditions to be met. For further and more detailed reading on the TCF v2 framework, please visit this page . Step by Step Guide of working with the Usercentrics TCF v2 CMP The following steps guide you towards configuring your CMP to support TCF v2. You need to login to our Admin Tool and ensure you have the access to the CMP version 2 area. If you don\u2019t, speak to your Usercentrics contact to enable this for you: Choose the TCF Scope In the configuration section you also find the option to choose from the two modes the TCF framework supports: Service-Specific Scope means that a user given consent applies only to the specific website/app and cannot be propagated to other sites. This is the scope that is broadly supported within the ad tech ecosystem and most likely the one you want to choose. Global Scope means that when a user sets his or her consent on one site, that consent is then used by all other sites the user visits, if these site are also using the TCF 2.0 Global Scope. Technically this is done by storing the tcString in a third party cookie through which it can be transported from one to the next site. Conceptually it means that if a user opts in/out on one site to a given service then this decision is propagated to all further sites the user visits. Configure the vendors Global Vendor List (GVL) Under \u201cService Settings\u201d you can configure the vendors or Data Processing Services you are using on you site. The list shown under \u201cTransparency & Consent Framework 2.0\u201d contains the vendors of the IAB GVL. The CMP automatically manages updates to that list. The list of available vendors is provided by the IAB and vendor information must be used as it is. By checking the box on the left of each vendor, you can activate the vendor. This means the user will be informed in the CMP banners that you are using this vendor on your site. You can deactivate the vendor at any time by unchecking the same checkbox. Note: As you are changing the list of used vendors when activating new ones and saving the changes, this will lead to the CMP banners to be shown again to users who already have given consent to your previous settings in order to show/provide the option to give consent for these new vendors as well. There is also a concept of so called \u201cStacks\u201d within the framework which allows you to achieve a slimmer UX when displaying to users which purposes apply to the vendors used on your site. You may want experiment with this feature in particular if you are using many vendors. Non-IAB Vendors The configuration of non-IAB vendors works the usual way. You may define the service categories and choose from our list of fully prepared services or define your own custom services. There is nothing TCF v2 specific to consider with the configuration of the non-IAB services. Configure the Design / Layout The CMP UI Our CMP layout consists of two layers: The first layer contains all the textual information required by the framework, as well as the list of purposes that apply to the vendors you configured. The user may choose on this first layer to opt in/out of certain purposes or go to the second layer to view more details. The second layer gives users details about the enabled vendors and purposes. On this layer the user has more detailed opt in/out options. The CMP UI is customisable and you may choose your colour themes, fonts, headlines, logo and button options. Design Under the \u201cAppearance\u201d--> \u201cDesign\u201d section you can customise the following: Color theme Font-Family Font-Size Choose your own logo Layout Under the \u201cAppearance\u201d \u2192 \u201cLayout\u201d section you may choose your layout options. The current layouts of the UI are fixed as the TCF v2 framework prescribes a rather prominent display. As the framework itself is under review with regards to such restrictions this might change in future and we may be able to offer more options. A further layout option you may customise is the privacy trigger. The trigger is shown when the user closes the CMP UI. Through this trigger the user can go back to modifying the consent settings in the CMP UI. You may customise the trigger icon and position. Content The CMP also offers customisation options under the \u201cContent\u201d section. Some texts must remain as provided due to TCF v2 requirements and can not be edited. Following are the customisable elements: Layer titels Additional banner messages Imprint link Privacy policy URL Privacy policy link text Button labels Integrate the TCF v2 CMP in your site Once all the above is configured, the last step required to integrate the CMP in your site, is to place the TCF v2 related CMP Script tag in your website. The script tag can be copied from the \u201cImplementation\u201d section. If you want to provide support for older browsers like IE11, please use the following script tag instead: <script id=\"usercentrics-cmp\" data-settings-id=\"XXXXXXXX\" src=\"https://app.usercentrics.eu/browser-ui/latest/loader.js\" data-tcf-enabled></script> Service integration Here a few important notes on what you need to consider when integration vendors / services under TCF 2.0. IAB Vendors The Usercentrics CMP exposes the IAB TCF 2.0 API which offers a standardised way for publishers and vendors to fetch the users consent information. IAB certified vendors are able to work with the TCF 2.0 API, which means in most cases no further modification or adjustments to vendor scripts are needed. This means vendors can request the consent state when the CMP is loaded using the __tcfapi function with the command getTCData. Sample: __tcfapi ( 'getTCData' , 2 , ( tcData , success ) => { console . log ( tcData ) }); In order to react on changes of the consent state vendors can make use of the event listener provided by the API using the __tcfapi function with the command addEventListener. Sample: __tcfapi ( 'addEventListener' , 2 , function ( tcData , success ){ // inital tc string information if ( success && tcData . eventStatus === 'tcloaded' ) { console . log ( ' TCF tcLoaded Event - tcString: ' + tcData . tcString ); } // tc string after user interaction completed else if ( success && tcData . eventStatus === 'useractioncomplete' ) { console . log ( 'TCF useractioncomplete Event - tcString: ' + tcData . tcString ); } else { // do something else } }); More details about the TCF 2.0 CMP API and its commands can be found here . Non-IAB Vendors Non-IAB vendors do not follow the framework\u2019s concepts and therefore do not use the TCF API or tcString. For those, there is nothing TCF v2 specific to be considered. Use our Direct Integration Guide to handle non-IAB vendors. Tag Management Systems If you are using a tag manager for vendor script integration, you should consider the following information. IAB registered vendors have to be loaded in order to request the tcString from our CMP and understand the information. Therefore, no tag manager triggers should be configured around those vendor tags. Non-IAB vendors need to be handled manually. The CMP version 2 uses a an event \u201cconsent_status\u201d which should be used in your tag manager to trigger the services. Here's an example configuration for the Google Tag Manager: Create Variables You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent. Navigate to \"Variables\" in the side menu of the Google Tag Manager and then click on \"New\". Add a new variable of type \"Data Layer Variable\". In the top left, name the variable \"XXX Variable\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g Google Analytics Under \"Data Layer Variable Name\", insert the name of Data Processing Service e.g \u201cGoogle Analytics\u201d. a. The name has to match exactly (hyphenation, and capitalisation) the Service name you added in your Admin Interface under Service Settings Tick \"Set Default Value\" and set the default value to false. Save \"Google Analytics Variable\". Repeat for all non-IAB vendor scripts Add Trigger There are several ways on how to implement triggers in a Tag Management System. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. Navigate to \"Triggers\" in the side-menu and click on \"New\". Add a new trigger of type \"Custom Event\". In the top left, name the trigger \"XXX Trigger\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g \u201cGoogle Analytics Trigger\u201d Tick \"Use regex matching\" next to the \"Event Name\" input field Under \"Event Name\", insert \"(consent_status.*)\". a. please be ensure to spell consent_status exactly like this. Tick \"Some Custom Events\". In the drop-down menus, set the following condition: \"Google Analytics Variable\" contains true. a. Explanation: The variable contains the user's consent information (variable=true - user opted in || variable=false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable=true Save \"Google Analytics Trigger\". Add the trigger to \"Google Analytics Tag\". Repeat this for each non-IAB vendor script in your Tag Manager Repeat this for each non-IAB vendor Create a default status variable Create a new trigger on the event consent_status for the vendor script tag Add the trigger condition for the respective tag with the condition: \"Google Analytics Variable\" contains true. Add the trigger to the tag","title":"TCF 2"},{"location":"pages/features/tcf2/#usercentrics-tcf-20","text":"","title":"Usercentrics - TCF 2.0"},{"location":"pages/features/tcf2/#general-information","text":"The Usercentrics CMP is IAB TCF 2.0 certified and therefore meets the requirements of the specification of the IAB TCF 2.0 framework. The standard regulates how user consent information has to be captured and used within the programmatic advertising ecosystem, with the goal of a frictionless functioning of the ecosystem through following a standardised approach of implementing data privacy regulations. We are briefly explaining here some key concepts of the framework: The tcString is a technical concept which encodes the consent information in a machine readable format. The tcString contains all required information for any system in the ecosystem to validate what consent has been given by a user and what processing is allowed based on that. The tcString is generated and provided by a CMP at the point where users make consent decisions. Each vendor service that collects data must take the information encoded in the tcString into account and decide if and what consent the user has given. The TCF v2 API is the technical concept that allows the vendors integrated in a website or app to interact with the CMP in order to e.g. obtain the tcString in a standardised way. Any IAB TCF v2 certified CMP implements this API. The Global Vendor List (GVL) is a list of all service vendors who registered for the IAB TCF v2 framework. By registering for the TCF 2.0 framework these vendors confirm that they comply with the framework policies. The list is maintained by the IAB and regular updates are provided, typically on a weekly basis. The list contains all necessary information about the vendors, that is required by the framework such as descriptions of the services and the data the service uses, the purposes for which the service uses the data, the duration of operation of cookies or similar information that the service stores on a user\u2019s device. The TCF v2 framework also prescribes rather strict UX behaviours for CMPs. This impacts the design but also the content shown in a CMP and leaves little room for own optimisation. Aspects like the contrast ratio of colours and the messages that must be shown to users at certain layers of the CMP dialogues are some examples of clearly specified conditions to be met. For further and more detailed reading on the TCF v2 framework, please visit this page .","title":"General Information"},{"location":"pages/features/tcf2/#step-by-step-guide-of-working-with-the-usercentrics-tcf-v2-cmp","text":"The following steps guide you towards configuring your CMP to support TCF v2. You need to login to our Admin Tool and ensure you have the access to the CMP version 2 area. If you don\u2019t, speak to your Usercentrics contact to enable this for you:","title":"Step by Step Guide of working with the Usercentrics TCF v2 CMP"},{"location":"pages/features/tcf2/#choose-the-tcf-scope","text":"In the configuration section you also find the option to choose from the two modes the TCF framework supports: Service-Specific Scope means that a user given consent applies only to the specific website/app and cannot be propagated to other sites. This is the scope that is broadly supported within the ad tech ecosystem and most likely the one you want to choose. Global Scope means that when a user sets his or her consent on one site, that consent is then used by all other sites the user visits, if these site are also using the TCF 2.0 Global Scope. Technically this is done by storing the tcString in a third party cookie through which it can be transported from one to the next site. Conceptually it means that if a user opts in/out on one site to a given service then this decision is propagated to all further sites the user visits.","title":"Choose the TCF Scope"},{"location":"pages/features/tcf2/#configure-the-vendors","text":"","title":"Configure the vendors"},{"location":"pages/features/tcf2/#global-vendor-list-gvl","text":"Under \u201cService Settings\u201d you can configure the vendors or Data Processing Services you are using on you site. The list shown under \u201cTransparency & Consent Framework 2.0\u201d contains the vendors of the IAB GVL. The CMP automatically manages updates to that list. The list of available vendors is provided by the IAB and vendor information must be used as it is. By checking the box on the left of each vendor, you can activate the vendor. This means the user will be informed in the CMP banners that you are using this vendor on your site. You can deactivate the vendor at any time by unchecking the same checkbox. Note: As you are changing the list of used vendors when activating new ones and saving the changes, this will lead to the CMP banners to be shown again to users who already have given consent to your previous settings in order to show/provide the option to give consent for these new vendors as well. There is also a concept of so called \u201cStacks\u201d within the framework which allows you to achieve a slimmer UX when displaying to users which purposes apply to the vendors used on your site. You may want experiment with this feature in particular if you are using many vendors.","title":"Global Vendor List (GVL)"},{"location":"pages/features/tcf2/#non-iab-vendors","text":"The configuration of non-IAB vendors works the usual way. You may define the service categories and choose from our list of fully prepared services or define your own custom services. There is nothing TCF v2 specific to consider with the configuration of the non-IAB services.","title":"Non-IAB Vendors"},{"location":"pages/features/tcf2/#configure-the-design-layout","text":"","title":"Configure the Design / Layout"},{"location":"pages/features/tcf2/#the-cmp-ui","text":"Our CMP layout consists of two layers: The first layer contains all the textual information required by the framework, as well as the list of purposes that apply to the vendors you configured. The user may choose on this first layer to opt in/out of certain purposes or go to the second layer to view more details. The second layer gives users details about the enabled vendors and purposes. On this layer the user has more detailed opt in/out options. The CMP UI is customisable and you may choose your colour themes, fonts, headlines, logo and button options.","title":"The CMP UI"},{"location":"pages/features/tcf2/#design","text":"Under the \u201cAppearance\u201d--> \u201cDesign\u201d section you can customise the following: Color theme Font-Family Font-Size Choose your own logo","title":"Design"},{"location":"pages/features/tcf2/#layout","text":"Under the \u201cAppearance\u201d \u2192 \u201cLayout\u201d section you may choose your layout options. The current layouts of the UI are fixed as the TCF v2 framework prescribes a rather prominent display. As the framework itself is under review with regards to such restrictions this might change in future and we may be able to offer more options. A further layout option you may customise is the privacy trigger. The trigger is shown when the user closes the CMP UI. Through this trigger the user can go back to modifying the consent settings in the CMP UI. You may customise the trigger icon and position.","title":"Layout"},{"location":"pages/features/tcf2/#content","text":"The CMP also offers customisation options under the \u201cContent\u201d section. Some texts must remain as provided due to TCF v2 requirements and can not be edited. Following are the customisable elements: Layer titels Additional banner messages Imprint link Privacy policy URL Privacy policy link text Button labels","title":"Content"},{"location":"pages/features/tcf2/#integrate-the-tcf-v2-cmp-in-your-site","text":"Once all the above is configured, the last step required to integrate the CMP in your site, is to place the TCF v2 related CMP Script tag in your website. The script tag can be copied from the \u201cImplementation\u201d section. If you want to provide support for older browsers like IE11, please use the following script tag instead: <script id=\"usercentrics-cmp\" data-settings-id=\"XXXXXXXX\" src=\"https://app.usercentrics.eu/browser-ui/latest/loader.js\" data-tcf-enabled></script>","title":"Integrate the TCF v2 CMP in your site"},{"location":"pages/features/tcf2/#service-integration","text":"Here a few important notes on what you need to consider when integration vendors / services under TCF 2.0.","title":"Service integration"},{"location":"pages/features/tcf2/#iab-vendors","text":"The Usercentrics CMP exposes the IAB TCF 2.0 API which offers a standardised way for publishers and vendors to fetch the users consent information. IAB certified vendors are able to work with the TCF 2.0 API, which means in most cases no further modification or adjustments to vendor scripts are needed. This means vendors can request the consent state when the CMP is loaded using the __tcfapi function with the command getTCData. Sample: __tcfapi ( 'getTCData' , 2 , ( tcData , success ) => { console . log ( tcData ) }); In order to react on changes of the consent state vendors can make use of the event listener provided by the API using the __tcfapi function with the command addEventListener. Sample: __tcfapi ( 'addEventListener' , 2 , function ( tcData , success ){ // inital tc string information if ( success && tcData . eventStatus === 'tcloaded' ) { console . log ( ' TCF tcLoaded Event - tcString: ' + tcData . tcString ); } // tc string after user interaction completed else if ( success && tcData . eventStatus === 'useractioncomplete' ) { console . log ( 'TCF useractioncomplete Event - tcString: ' + tcData . tcString ); } else { // do something else } }); More details about the TCF 2.0 CMP API and its commands can be found here .","title":"IAB Vendors"},{"location":"pages/features/tcf2/#non-iab-vendors_1","text":"Non-IAB vendors do not follow the framework\u2019s concepts and therefore do not use the TCF API or tcString. For those, there is nothing TCF v2 specific to be considered. Use our Direct Integration Guide to handle non-IAB vendors.","title":"Non-IAB Vendors"},{"location":"pages/features/tcf2/#tag-management-systems","text":"If you are using a tag manager for vendor script integration, you should consider the following information. IAB registered vendors have to be loaded in order to request the tcString from our CMP and understand the information. Therefore, no tag manager triggers should be configured around those vendor tags. Non-IAB vendors need to be handled manually. The CMP version 2 uses a an event \u201cconsent_status\u201d which should be used in your tag manager to trigger the services. Here's an example configuration for the Google Tag Manager:","title":"Tag Management Systems"},{"location":"pages/features/tcf2/#create-variables","text":"You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent. Navigate to \"Variables\" in the side menu of the Google Tag Manager and then click on \"New\". Add a new variable of type \"Data Layer Variable\". In the top left, name the variable \"XXX Variable\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g Google Analytics Under \"Data Layer Variable Name\", insert the name of Data Processing Service e.g \u201cGoogle Analytics\u201d. a. The name has to match exactly (hyphenation, and capitalisation) the Service name you added in your Admin Interface under Service Settings Tick \"Set Default Value\" and set the default value to false. Save \"Google Analytics Variable\". Repeat for all non-IAB vendor scripts","title":"Create Variables"},{"location":"pages/features/tcf2/#add-trigger","text":"There are several ways on how to implement triggers in a Tag Management System. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. Navigate to \"Triggers\" in the side-menu and click on \"New\". Add a new trigger of type \"Custom Event\". In the top left, name the trigger \"XXX Trigger\". a. \u201cXXX\u201d \u2192 Please insert here the name of Data Processing Service e.g \u201cGoogle Analytics Trigger\u201d Tick \"Use regex matching\" next to the \"Event Name\" input field Under \"Event Name\", insert \"(consent_status.*)\". a. please be ensure to spell consent_status exactly like this. Tick \"Some Custom Events\". In the drop-down menus, set the following condition: \"Google Analytics Variable\" contains true. a. Explanation: The variable contains the user's consent information (variable=true - user opted in || variable=false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable=true Save \"Google Analytics Trigger\". Add the trigger to \"Google Analytics Tag\". Repeat this for each non-IAB vendor script in your Tag Manager","title":"Add Trigger"},{"location":"pages/features/tcf2/#repeat-this-for-each-non-iab-vendor","text":"Create a default status variable Create a new trigger on the event consent_status for the vendor script tag Add the trigger condition for the respective tag with the condition: \"Google Analytics Variable\" contains true. Add the trigger to the tag","title":"Repeat this for each non-IAB vendor"},{"location":"pages/gcm/consent-mode/","text":"Google Consent Mode General Information With Consent Mode Google has provided a solution for advertisers to adjust the behaviour of Google tags on their website based on the user consent status. By pairing the Consent Mode API with the Usercentrics Consent Management Platform (CMP) advertisers can indicate if the user has given consent for cookie usage related to ads and/or advertising. The supported Google tags will respect this signal and adjust their behaviour accordingly only utilizing cookies if consent was granted for the specific purposes. !> Google also supports the IABs TCF 2.0 framework with its ad systems. Consent Mode is meant to be used by advertisers not using a TCF 2.0 CMP implementation. Following Google services currently support the Consent Mode: Google Analytics (template id: HkocEodjb7) -> (Consent type: analytics_storage) Google Analytics 4 (template id: 87JYasXPF) -> (Consent type: analytics_storage) Google Ads Conversion Tracking (template id: twMyStLkn) -> (Consent type: ad_storage) Google Ads Remarketing (template id: B1Hk_zoTX) -> (Consent type: ad_storage) Conversion Linker (template id: LykAT-gy) -> (Consent type: ad_storage) DoubleClick Floodlight (template id: ByzZ5EsOsZX) -> (Consent type: ad_storage) DEPRECATED PRODUCT Google Campaign Manager (template id: pxiRY9112) -> (Consent type: ad_storage) DEPRECATED PRODUCT Display & Video 360 (template id: UekC8ye4S) -> (Consent type: ad_storage) Search Ads 360 (template id: DHS2sEi4b) -> (Consent type: ad_storage) Google Ads (template id: S1_9Vsuj-Q) -> (Consent type: ad_storage) Google Campaign Manager 360 (template id: dyHOCwp5Y) -> (Consent type: ad_storage) You may use the Consent Mode instead of prior blocking the Google tags . The benefit is that Google will use the signal to adjust the behaviour of their tags based on the user's consent in the Usercentrics CMP instead of having them blocked when no consent is given. Details on the tag behaviour with Consent Mode can be found here . Prerequisites !> Consent Mode requires that you use gtag.js or Google Tag Manager. If you use older tags versions (like ga.js or analytics.js) you need to update to the latest tag versions first. Implementation Example Implementing the Consent Mode with the Usercentrics CMP solution as alternative to prior blocking requires just 2 steps: Step 1: Adjust the existing Google Tag Manager code Your current Google Tag Manager code may currently look like this: <script type=\"text/plain\" data-usercentrics=\"Google Tag Manager\"> (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0], j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src= 'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f); })(window,document,\u2019script','dataLayer','GTM-XXXXXX');</script> This needs to be changed to the following: !> Please make sure to put these scripts at the very top of the head and on the same order as below. \u26a0\ufe0f To adjust the default measurement capabilities, set the default values for the command to run on every page of your site before any commands that send measurement data (such as config or event). For more information please check Adjust Tag Behavior <script type=\"text/javascript\"> // create dataLayer window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } // set \u201edenied\" as default for both ad and analytics storage, gtag(\"consent\", \"default\", { ad_storage: \"denied\", analytics_storage: \"denied\", wait_for_update: 2000 // milliseconds to wait for update }); // Enable ads data redaction by default [optional] gtag(\"set\", \"ads_data_redaction\", true); </script> <script type=\"text/javascript\"> // Google Tag Manager (function(w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID </script> Explanation The first part of the script initializes a plain data layer and provides the gtag function before the gtm.js/gtag.js is loaded <script type=\"text/javascript\"> // create dataLayer window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } In the middle part of the code the default values for both Consent Mode keys ad_storage and analytics_storage are defined. Additionally we set ads_data_redaction to true which means, that ad-click identifiers (e.g., GCLID / DCLID) in consent and conversion pings are redacted and network requests will also be sent through a cookieless domain. This is only in effect, when ad_storage is set to 'denied', if ad_storage is 'granted', ads_data_redaction has no effect. Setting ads_data_redaction to true is optional. More details on behaviour can be found here . // set \u201edenied\" as default for both ad and analytics storage, gtag(\"consent\", \"default\", { ad_storage: \"denied\", analytics_storage: \"denied\", wait_for_update: 2000 // milliseconds to wait for update }); // Enable ads data redaction by default [optional] gtag(\"set\", \"ads_data_redaction\", true); </script> The last part is the Google Tag Manager script. If you want to use Consent Mode as alternative to prior blocking the type of the script tag is \"text/javascript\". If you use the Smart Data Protector you may have to exclude Google Tag Manager, Google Analytics and/or Google Ads Remarkting from the blocking by SDP. <script type=\"text/javascript\"> // Google Tag Manager (function(w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID </script> Step 2 (optional): Use the Usercentrics CMP events to signal the consent status via the Consent Mode API for Custom Data Processing Services !> In case you use custom data processing services, follow the steps below. Otherwise, please jump to step 3. In order to trigger the Consent Mode API for custom Data Processing Services, you need to first add a window event. On the Admin Interface under Implementation -> Web please click on Add new Data Layer and select Window Event . Then expand the Window Event card and on the Window Event Name field, please insert the name of the event. It can be anything, but just make sure to use the same event name on the script below. Then click on the + button and click Save . Assuming you already have a window event in your Usercentrics CMP, add the following script to call the Consent Mode API in order to update the consent mode keys based on the consent status. In this example we use the event name 'ucEvent' and the 2 custom data processing services 'Google Ads Remarketing' and 'Google Analytics'. (If you have chosen to use different names for the data processing services use your customized ones instead.) <script type=\"text/javascript\"> // Please replace 'ucEvent' with the event you have just created window.addEventListener(\"ucEvent\", function (e) { if( e.detail && e.detail.event == \"consent_status\") { // Please replace the analytics service name here with the customized service var ucAnalyticsService = 'Google Analytics'; // Please replace the ad service name here with the customized service var ucAdService = 'Google Ads Remarketing'; if(e.detail.hasOwnProperty(ucAnalyticsService) && e.detail.hasOwnProperty(ucAdService)) { gtag(\"consent\", \"update\", { ad_storage: e.detail[ucAdService] ? 'granted':'denied', analytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied' }); } else { if(e.detail.hasOwnProperty(ucAdService)) { gtag(\"consent\", \"update\", { ad_storage: e.detail[ucAdService] ? 'granted':'denied' }); } if(e.detail.hasOwnProperty(ucAnalyticsService)) { gtag(\"consent\", \"update\", { analytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied' }); } } } }); </script> Explanation The event is fired on each page load and every time the user actively changes his consent decision. Based on the status for both services the Consent Mode API is called to signal the granted or denied state. Step 3: Enable Google Consent Mode on the Usercentrics Admin Interface !> For new customers, Google Consent Mode is enabled by default. Assuming you've completed the steps above, it's now time to enable the feature. Go to Usercentrics Admin Interface -> Configuration -> CMP Settings , enable Google Consent Mode and click Save. \u2190 Back to Feature Overview","title":"Google Consent Mode"},{"location":"pages/gcm/consent-mode/#google-consent-mode","text":"","title":"Google Consent Mode"},{"location":"pages/gcm/consent-mode/#general-information","text":"With Consent Mode Google has provided a solution for advertisers to adjust the behaviour of Google tags on their website based on the user consent status. By pairing the Consent Mode API with the Usercentrics Consent Management Platform (CMP) advertisers can indicate if the user has given consent for cookie usage related to ads and/or advertising. The supported Google tags will respect this signal and adjust their behaviour accordingly only utilizing cookies if consent was granted for the specific purposes. !> Google also supports the IABs TCF 2.0 framework with its ad systems. Consent Mode is meant to be used by advertisers not using a TCF 2.0 CMP implementation. Following Google services currently support the Consent Mode: Google Analytics (template id: HkocEodjb7) -> (Consent type: analytics_storage) Google Analytics 4 (template id: 87JYasXPF) -> (Consent type: analytics_storage) Google Ads Conversion Tracking (template id: twMyStLkn) -> (Consent type: ad_storage) Google Ads Remarketing (template id: B1Hk_zoTX) -> (Consent type: ad_storage) Conversion Linker (template id: LykAT-gy) -> (Consent type: ad_storage) DoubleClick Floodlight (template id: ByzZ5EsOsZX) -> (Consent type: ad_storage) DEPRECATED PRODUCT Google Campaign Manager (template id: pxiRY9112) -> (Consent type: ad_storage) DEPRECATED PRODUCT Display & Video 360 (template id: UekC8ye4S) -> (Consent type: ad_storage) Search Ads 360 (template id: DHS2sEi4b) -> (Consent type: ad_storage) Google Ads (template id: S1_9Vsuj-Q) -> (Consent type: ad_storage) Google Campaign Manager 360 (template id: dyHOCwp5Y) -> (Consent type: ad_storage) You may use the Consent Mode instead of prior blocking the Google tags . The benefit is that Google will use the signal to adjust the behaviour of their tags based on the user's consent in the Usercentrics CMP instead of having them blocked when no consent is given. Details on the tag behaviour with Consent Mode can be found here .","title":"General Information"},{"location":"pages/gcm/consent-mode/#prerequisites","text":"!> Consent Mode requires that you use gtag.js or Google Tag Manager. If you use older tags versions (like ga.js or analytics.js) you need to update to the latest tag versions first.","title":"Prerequisites"},{"location":"pages/gcm/consent-mode/#implementation-example","text":"Implementing the Consent Mode with the Usercentrics CMP solution as alternative to prior blocking requires just 2 steps:","title":"Implementation Example"},{"location":"pages/gcm/consent-mode/#step-1-adjust-the-existing-google-tag-manager-code","text":"Your current Google Tag Manager code may currently look like this: <script type=\"text/plain\" data-usercentrics=\"Google Tag Manager\"> (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start': new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0], j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src= 'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f); })(window,document,\u2019script','dataLayer','GTM-XXXXXX');</script> This needs to be changed to the following: !> Please make sure to put these scripts at the very top of the head and on the same order as below. \u26a0\ufe0f To adjust the default measurement capabilities, set the default values for the command to run on every page of your site before any commands that send measurement data (such as config or event). For more information please check Adjust Tag Behavior <script type=\"text/javascript\"> // create dataLayer window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } // set \u201edenied\" as default for both ad and analytics storage, gtag(\"consent\", \"default\", { ad_storage: \"denied\", analytics_storage: \"denied\", wait_for_update: 2000 // milliseconds to wait for update }); // Enable ads data redaction by default [optional] gtag(\"set\", \"ads_data_redaction\", true); </script> <script type=\"text/javascript\"> // Google Tag Manager (function(w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID </script> Explanation The first part of the script initializes a plain data layer and provides the gtag function before the gtm.js/gtag.js is loaded <script type=\"text/javascript\"> // create dataLayer window.dataLayer = window.dataLayer || []; function gtag() { dataLayer.push(arguments); } In the middle part of the code the default values for both Consent Mode keys ad_storage and analytics_storage are defined. Additionally we set ads_data_redaction to true which means, that ad-click identifiers (e.g., GCLID / DCLID) in consent and conversion pings are redacted and network requests will also be sent through a cookieless domain. This is only in effect, when ad_storage is set to 'denied', if ad_storage is 'granted', ads_data_redaction has no effect. Setting ads_data_redaction to true is optional. More details on behaviour can be found here . // set \u201edenied\" as default for both ad and analytics storage, gtag(\"consent\", \"default\", { ad_storage: \"denied\", analytics_storage: \"denied\", wait_for_update: 2000 // milliseconds to wait for update }); // Enable ads data redaction by default [optional] gtag(\"set\", \"ads_data_redaction\", true); </script> The last part is the Google Tag Manager script. If you want to use Consent Mode as alternative to prior blocking the type of the script tag is \"text/javascript\". If you use the Smart Data Protector you may have to exclude Google Tag Manager, Google Analytics and/or Google Ads Remarkting from the blocking by SDP. <script type=\"text/javascript\"> // Google Tag Manager (function(w, d, s, l, i) { w[l] = w[l] || []; w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' }); var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true; j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; f.parentNode.insertBefore(j, f); })(window, document, 'script', 'dataLayer', 'GTM-XXXXX'); //replace GTM-XXXXXX with Google Tag Manager ID </script>","title":"Step 1: Adjust the existing Google Tag Manager code"},{"location":"pages/gcm/consent-mode/#step-2-optional-use-the-usercentrics-cmp-events-to-signal-the-consent-status-via-the-consent-mode-api-for-custom-data-processing-services","text":"!> In case you use custom data processing services, follow the steps below. Otherwise, please jump to step 3. In order to trigger the Consent Mode API for custom Data Processing Services, you need to first add a window event. On the Admin Interface under Implementation -> Web please click on Add new Data Layer and select Window Event . Then expand the Window Event card and on the Window Event Name field, please insert the name of the event. It can be anything, but just make sure to use the same event name on the script below. Then click on the + button and click Save . Assuming you already have a window event in your Usercentrics CMP, add the following script to call the Consent Mode API in order to update the consent mode keys based on the consent status. In this example we use the event name 'ucEvent' and the 2 custom data processing services 'Google Ads Remarketing' and 'Google Analytics'. (If you have chosen to use different names for the data processing services use your customized ones instead.) <script type=\"text/javascript\"> // Please replace 'ucEvent' with the event you have just created window.addEventListener(\"ucEvent\", function (e) { if( e.detail && e.detail.event == \"consent_status\") { // Please replace the analytics service name here with the customized service var ucAnalyticsService = 'Google Analytics'; // Please replace the ad service name here with the customized service var ucAdService = 'Google Ads Remarketing'; if(e.detail.hasOwnProperty(ucAnalyticsService) && e.detail.hasOwnProperty(ucAdService)) { gtag(\"consent\", \"update\", { ad_storage: e.detail[ucAdService] ? 'granted':'denied', analytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied' }); } else { if(e.detail.hasOwnProperty(ucAdService)) { gtag(\"consent\", \"update\", { ad_storage: e.detail[ucAdService] ? 'granted':'denied' }); } if(e.detail.hasOwnProperty(ucAnalyticsService)) { gtag(\"consent\", \"update\", { analytics_storage: e.detail[ucAnalyticsService] ? 'granted':'denied' }); } } } }); </script> Explanation The event is fired on each page load and every time the user actively changes his consent decision. Based on the status for both services the Consent Mode API is called to signal the granted or denied state.","title":"Step 2 (optional): Use the Usercentrics CMP events to signal the consent status via the Consent Mode API for Custom Data Processing Services"},{"location":"pages/gcm/consent-mode/#step-3-enable-google-consent-mode-on-the-usercentrics-admin-interface","text":"!> For new customers, Google Consent Mode is enabled by default. Assuming you've completed the steps above, it's now time to enable the feature. Go to Usercentrics Admin Interface -> Configuration -> CMP Settings , enable Google Consent Mode and click Save. \u2190 Back to Feature Overview","title":"Step 3: Enable Google Consent Mode on the Usercentrics Admin Interface"},{"location":"pages/getting-started/browser-support/","text":"Loader.js is our standard script tag. It supports browsers starting from these versions: Browser Version Chrome 37 Edge 15 Firefox 41 Internet Explorer 11 Opera 31 Safari 11 Yandex 17.6 For Mobile, Loader.js also works on the following Operating Systems and Browsers: Operating System Browser Version Android Android Internet Browser Google Chrome Opera Firefox Android 4.4 Android 7+ Android 7+ Android 7+ iOS Safari Chromium Firefox iOS 10.3 iOS 12.0 iOS 12.0 Former versions of our standard script tags, bundle.js and bundle_legacy.js, are still supported. These are the starting browser versions that we support for each script: Browser bundle.js bundle_legacy.js Chrome 63 37 Edge 18(Legacy) / 79 (Chromium-Based) 15 Firefox 58 41 Opera 50 31 Safari 11 11 Yandex - 17.6 Internet Explorer - 11","title":"Browser Support"},{"location":"pages/getting-started/sdk/","text":"Browser SDK With the Usercentrics CMP Browser SDK our aim is to provide a lightweight library which enables you to build your own fully customized Consent Solution while still leveraging the Usercentrics service database and tools. We also offer collaboration possibilities with Usercentrics Partners who are able to support you in building your own customized solution. Contact our sales team for more information. Installing the dependency npm install @usercentrics/cmp-browser-sdk --save Default (non-TCF) initialization import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); if ( initialUIValues . variant === UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter. Accept / deny / update services in the default (non-TCF) context import Usercentrics , { UserDecision } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const categories = UC . getCategories (); const settings = UC . getSettings (); /** * ... */ const onAcceptAllHandler = () : void => { UC . acceptAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onDenyAllHandler = () : void => { UC . denyAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onSaveHandler = ( userDecisions : UserDecision []) : void => { // UserDecisions needs to include all the user choices for each service that were made in your UI UC . updateServices ( userDecisions ). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; }); TCF initialization First, make sure TCF is enabled in your settings . import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution // NOTE: If TCF is enabled, the ui property of the settings object will always be of type TCFUISettings, not DefaultUISettings. const settings = UC . getSettings (); // getTCFData() returns all TCF related data (vendors, purposes, special features etc.) const tcfData = UC . getTCFData (); if ( initialUIValues . variant === UI_VARIANT . TCF ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // NOTE: Remember to call setTCFUIAsOpen()! UC . setTCFUIAsOpen (); // Show TCF first layer return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter. For TCF, the createTcfApiStub option needs to be set to true in order for the __tcfapi queue to initialize right away (we cannot wait for the settings request to finish). Accept / deny / update vendors, purposes, special features in the TCF context Note that both features and special purposes are for disclosing only and do not require any user decision. They cannot be updated. Note that if TCF is enabled, the default (non-TCF) data is still available (e.g. getCategories()). A hybrid UI can be built if both sets of methods (TCF and default (non-TCF)) are called. import Usercentrics , { TCF_DECISION_UI_LAYER } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const settings = UC . getSettings (); const tcfData = UC . getTCFData (); /** * ... */ // The fromLayer parameter needs to identify the layer from which the acceptAll button was triggered. const onAcceptAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . acceptAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the denyAll button was triggered. const onDenyAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . denyAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the save button was triggered. const onSaveHandler = ( tcfUserDecisions : TCFUserDecisions , fromLayer : TCF_DECISION_UI_LAYER ) : void => { // TCFUserDecisions needs to include all the user choices for each vendor, purpose, special feature that were made in your UI UC . updateChoicesForTCF ( tcfUserDecisions , fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // Special handler for closing the TCF UI without any user changes (e.g. for any close button / click-away handler) const onTCFUICloseHandler = () : void => { UC . setTCFUIAsClosed (); }; }); Changing the language After UC is initialized you can change the language by calling: UC . changeLanguage ( 'NEW_LANGUAGE' ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); }); Changing the view After UC is initialized you have to update the SDK after every view change: const enum UI_LAYER { FIRST_LAYER , NONE , PRIVACY_BUTTON , SECOND_LAYER , } UC . updateLayer ( UI_LAYER . FIRST_LAYER ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); }); Getting Services Information After UC is initialized you can retrieve the services information, by using one of the following methods: getServicesBaseInfo or getServicesFullInfo . The method getServices was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getServicesBaseInfo retrieve all services with their base information, without fetching the aggregator. Returns BaseService [] UC . init (). then (( initialUIValues ) => { // getServicesBaseInfo() returns all the services with their base information const servicesBase = UC . getServicesBaseInfo (); console . log ( \"BASE INFO\" , servicesBase ) ... }); getServicesFullInfo retrieves all services with their complete information, fetching the aggregator if necessary. Returns Promise< Service []> UC . init (). then (( initialUIValues ) => { // getServicesFullInfo() returns all services with their complete information const servicesFull = UC . getServicesFullInfo () servicesFull . then ( info => { console . log ( \"FULL INFO\" , info ) }); ... }); Getting Categories Information After UC is initialized you can retrieve the categories information, by using one of the following methods: getCategoriesBaseInfo or getCategoriesFullInfo . The method getCategories was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getCategoriesBaseInfo retrieves the categories and their base services info to display this information in your UI. Returns BaseCategory [] UC . init (). then (( initialUIValues ) => { // getCategoriesBaseInfo() returns the categories and their base services info to display this information in your UI. const categoriesBase = UC . getCategoriesBaseInfo (); console . log ( \"BASE CATEGORIES INFO\" , categoriesBase ) ... }); getCategoriesFullInfo retrieves the categories and their full services info to display this information in your UI. Returns Promise< Category []> UC . init (). then (( initialUIValues ) => { // getCategoriesFullInfo() returns the categories and their full services info to display this information in your UI. const categoriesFull = UC . getCategoriesFullInfo (); categoriesFull . then ( info => { console . log ( \"FULL INFO\" , info ) }); ... }); Cross-Device Consent Sharing NOTE : If the given controllerId returns no history from the Usercentrics backend, that controllerId will not be updated for the end user. controllerId is known before init import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { controllerId : 'CONTROLLER_ID_FOR_END_USER' }); UC . init (). then (( initialView ) => { /** * ... */ }); controllerId is known after init import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialView ) => { /** * ... */ UC . restoreUserSession ( 'CONTROLLER_ID_FOR_END_USER' ). then (() => { /** * ... */ }); }); IE11 compatibility If your Consent Solution should work with IE11 (or other legacy browsers), then there's a few extra steps you need to do: Include a CustomEvent polyfill https://www.npmjs.com/package/custom-event-polyfill Include a fetch polyfill https://www.npmjs.com/package/whatwg-fetch Also you'll have to have Babel (with core-js) (or similar) in your build setup to make sure, that Symbol etc. get polyfilled. Script tag support You can also use the SDK as a script tag on your site: < script src = \"https://app.usercentrics.eu/browser-sdk/2.13.3/bundle.js\" ></ script > You can now access all methods/constants by using them from within the UC_SDK namespace: const UC = new UC_SDK . default ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); if ( initialUIValues . variant === UC_SDK . UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UC_SDK . UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UC_SDK . UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UC_SDK.UI_LAYER.NONE : default : // Show nothing return ; } } }); NOTE : If you need Internet Explorer 11 support, you can point the src attribute to https://app.usercentrics.eu/browser-sdk/2.6.1/bundle_legacy.js . Considerations for building your custom TCF v2.0 UI Note : This does NOT apply if you use the unaltered Usercentrics UI together with this SDK If you plan to build your own custom UI for TCF v2.0, Usercentrics cannot be liable that your custom UI conforms to all the IAB rules and guidelines. In this case, you can still use this SDK, but you need to register your solution at the IAB yourself. You can then enter your cmp-id (provided by the IAB) and cmp-version through the Usercentrics Admin Interface. In the case that you build your own TCF v2.0 UI it is NOT allowed to use the default Usercentrics cmp-id and cmp-version. Technical Documentation Technical Documentation can be found on our documentation website .","title":"Browser SDK"},{"location":"pages/getting-started/sdk/#browser-sdk","text":"With the Usercentrics CMP Browser SDK our aim is to provide a lightweight library which enables you to build your own fully customized Consent Solution while still leveraging the Usercentrics service database and tools. We also offer collaboration possibilities with Usercentrics Partners who are able to support you in building your own customized solution. Contact our sales team for more information.","title":"Browser SDK"},{"location":"pages/getting-started/sdk/#installing-the-dependency","text":"npm install @usercentrics/cmp-browser-sdk --save","title":"Installing the dependency"},{"location":"pages/getting-started/sdk/#default-non-tcf-initialization","text":"import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); if ( initialUIValues . variant === UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter.","title":"Default (non-TCF) initialization"},{"location":"pages/getting-started/sdk/#accept-deny-update-services-in-the-default-non-tcf-context","text":"import Usercentrics , { UserDecision } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const categories = UC . getCategories (); const settings = UC . getSettings (); /** * ... */ const onAcceptAllHandler = () : void => { UC . acceptAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onDenyAllHandler = () : void => { UC . denyAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onSaveHandler = ( userDecisions : UserDecision []) : void => { // UserDecisions needs to include all the user choices for each service that were made in your UI UC . updateServices ( userDecisions ). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; });","title":"Accept / deny / update services in the default (non-TCF) context"},{"location":"pages/getting-started/sdk/#tcf-initialization","text":"First, make sure TCF is enabled in your settings . import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution // NOTE: If TCF is enabled, the ui property of the settings object will always be of type TCFUISettings, not DefaultUISettings. const settings = UC . getSettings (); // getTCFData() returns all TCF related data (vendors, purposes, special features etc.) const tcfData = UC . getTCFData (); if ( initialUIValues . variant === UI_VARIANT . TCF ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // NOTE: Remember to call setTCFUIAsOpen()! UC . setTCFUIAsOpen (); // Show TCF first layer return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter. For TCF, the createTcfApiStub option needs to be set to true in order for the __tcfapi queue to initialize right away (we cannot wait for the settings request to finish).","title":"TCF initialization"},{"location":"pages/getting-started/sdk/#accept-deny-update-vendors-purposes-special-features-in-the-tcf-context","text":"Note that both features and special purposes are for disclosing only and do not require any user decision. They cannot be updated. Note that if TCF is enabled, the default (non-TCF) data is still available (e.g. getCategories()). A hybrid UI can be built if both sets of methods (TCF and default (non-TCF)) are called. import Usercentrics , { TCF_DECISION_UI_LAYER } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const settings = UC . getSettings (); const tcfData = UC . getTCFData (); /** * ... */ // The fromLayer parameter needs to identify the layer from which the acceptAll button was triggered. const onAcceptAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . acceptAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the denyAll button was triggered. const onDenyAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . denyAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the save button was triggered. const onSaveHandler = ( tcfUserDecisions : TCFUserDecisions , fromLayer : TCF_DECISION_UI_LAYER ) : void => { // TCFUserDecisions needs to include all the user choices for each vendor, purpose, special feature that were made in your UI UC . updateChoicesForTCF ( tcfUserDecisions , fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // Special handler for closing the TCF UI without any user changes (e.g. for any close button / click-away handler) const onTCFUICloseHandler = () : void => { UC . setTCFUIAsClosed (); }; });","title":"Accept / deny / update vendors, purposes, special features in the TCF context"},{"location":"pages/getting-started/sdk/#changing-the-language","text":"After UC is initialized you can change the language by calling: UC . changeLanguage ( 'NEW_LANGUAGE' ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); });","title":"Changing the language"},{"location":"pages/getting-started/sdk/#changing-the-view","text":"After UC is initialized you have to update the SDK after every view change: const enum UI_LAYER { FIRST_LAYER , NONE , PRIVACY_BUTTON , SECOND_LAYER , } UC . updateLayer ( UI_LAYER . FIRST_LAYER ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); });","title":"Changing the view"},{"location":"pages/getting-started/sdk/#getting-services-information","text":"After UC is initialized you can retrieve the services information, by using one of the following methods: getServicesBaseInfo or getServicesFullInfo . The method getServices was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getServicesBaseInfo retrieve all services with their base information, without fetching the aggregator. Returns BaseService [] UC . init (). then (( initialUIValues ) => { // getServicesBaseInfo() returns all the services with their base information const servicesBase = UC . getServicesBaseInfo (); console . log ( \"BASE INFO\" , servicesBase ) ... }); getServicesFullInfo retrieves all services with their complete information, fetching the aggregator if necessary. Returns Promise< Service []> UC . init (). then (( initialUIValues ) => { // getServicesFullInfo() returns all services with their complete information const servicesFull = UC . getServicesFullInfo () servicesFull . then ( info => { console . log ( \"FULL INFO\" , info ) }); ... });","title":"Getting Services Information"},{"location":"pages/getting-started/sdk/#getting-categories-information","text":"After UC is initialized you can retrieve the categories information, by using one of the following methods: getCategoriesBaseInfo or getCategoriesFullInfo . The method getCategories was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getCategoriesBaseInfo retrieves the categories and their base services info to display this information in your UI. Returns BaseCategory [] UC . init (). then (( initialUIValues ) => { // getCategoriesBaseInfo() returns the categories and their base services info to display this information in your UI. const categoriesBase = UC . getCategoriesBaseInfo (); console . log ( \"BASE CATEGORIES INFO\" , categoriesBase ) ... }); getCategoriesFullInfo retrieves the categories and their full services info to display this information in your UI. Returns Promise< Category []> UC . init (). then (( initialUIValues ) => { // getCategoriesFullInfo() returns the categories and their full services info to display this information in your UI. const categoriesFull = UC . getCategoriesFullInfo (); categoriesFull . then ( info => { console . log ( \"FULL INFO\" , info ) }); ... });","title":"Getting Categories Information"},{"location":"pages/getting-started/sdk/#cross-device-consent-sharing","text":"NOTE : If the given controllerId returns no history from the Usercentrics backend, that controllerId will not be updated for the end user.","title":"Cross-Device Consent Sharing"},{"location":"pages/getting-started/sdk/#controllerid-is-known-before-init","text":"import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { controllerId : 'CONTROLLER_ID_FOR_END_USER' }); UC . init (). then (( initialView ) => { /** * ... */ });","title":"controllerId is known before init"},{"location":"pages/getting-started/sdk/#controllerid-is-known-after-init","text":"import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialView ) => { /** * ... */ UC . restoreUserSession ( 'CONTROLLER_ID_FOR_END_USER' ). then (() => { /** * ... */ }); });","title":"controllerId is known after init"},{"location":"pages/getting-started/sdk/#ie11-compatibility","text":"If your Consent Solution should work with IE11 (or other legacy browsers), then there's a few extra steps you need to do: Include a CustomEvent polyfill https://www.npmjs.com/package/custom-event-polyfill Include a fetch polyfill https://www.npmjs.com/package/whatwg-fetch Also you'll have to have Babel (with core-js) (or similar) in your build setup to make sure, that Symbol etc. get polyfilled.","title":"IE11 compatibility"},{"location":"pages/getting-started/sdk/#script-tag-support","text":"You can also use the SDK as a script tag on your site: < script src = \"https://app.usercentrics.eu/browser-sdk/2.13.3/bundle.js\" ></ script > You can now access all methods/constants by using them from within the UC_SDK namespace: const UC = new UC_SDK . default ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); if ( initialUIValues . variant === UC_SDK . UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UC_SDK . UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UC_SDK . UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UC_SDK.UI_LAYER.NONE : default : // Show nothing return ; } } }); NOTE : If you need Internet Explorer 11 support, you can point the src attribute to https://app.usercentrics.eu/browser-sdk/2.6.1/bundle_legacy.js .","title":"Script tag support"},{"location":"pages/getting-started/sdk/#considerations-for-building-your-custom-tcf-v20-ui","text":"Note : This does NOT apply if you use the unaltered Usercentrics UI together with this SDK If you plan to build your own custom UI for TCF v2.0, Usercentrics cannot be liable that your custom UI conforms to all the IAB rules and guidelines. In this case, you can still use this SDK, but you need to register your solution at the IAB yourself. You can then enter your cmp-id (provided by the IAB) and cmp-version through the Usercentrics Admin Interface. In the case that you build your own TCF v2.0 UI it is NOT allowed to use the default Usercentrics cmp-id and cmp-version.","title":"Considerations for building your custom TCF v2.0 UI"},{"location":"pages/getting-started/sdk/#technical-documentation","text":"Technical Documentation can be found on our documentation website .","title":"Technical Documentation"},{"location":"pages/getting-started/ui/","text":"window.addEventListener('load', (event) => { var taskList = document.querySelector(\"ul[class=task-list]\"); var taskListItems = taskList.children; var checkboxes = taskList.querySelectorAll(\"input[type=checkbox]\"); checkboxes.forEach((checkbox, index) => { // Getting the label between parenthesis const name = taskListItems[index].textContent.match(/\\(([^)]+)\\)/)[1]; checkbox.addEventListener('change', function() { if (this.checked) { addElementToCodeBox(name); } else { removeElementFromCodeBox(name); } }); }) }); Data Processing Services (DPS) On the Admin Interface under Service Settings -> Data Processing Services please add the Data Processing Services (DPS) that you would like to add to your configuration. Please note that the following Google services that support Google Consent Mode are available here . Integrate the JavaScript Tag To execute your scripts only after your visitors have given their consent, you must first integrate the Usercentrics script into in the head area of your website. Find your personal script with your Settings-ID in the Admin Interface Implementation section. You can refine your script with the following list, or you can use the default one already provided below. Script Properties Avoid Prefetch Services (data-avoid-prefetch-services) Block Data Layer Push (data-block-data-layer-push) Add ControllerId (data-controller-id) Disable Server Consents (data-disable-server-consents) Disable Tracking (data-disable-tracking) EU Mode (data-eu-mode) Specify language (data-language) Enable TCF (data-tcf-enabled) Nonce (nonce) Please note that some of the properties bellow need to be set, for example, selecting Specify Language, you will need to input your desired language. Javascript tag < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" async ></ script > Warning After integrating the JavaScript Tag, the integrated scripts (Data Processing Services) have to be added to your configuration and adjusted on your Website or Tag Manager, for that, check our Guide Section Next steps We offer other features that you can configure and use with your Usercentrics CMP. If you wish so, please take a look at the UI Section on our documentation.","title":"Browser UI"},{"location":"pages/getting-started/ui/#data-processing-services-dps","text":"On the Admin Interface under Service Settings -> Data Processing Services please add the Data Processing Services (DPS) that you would like to add to your configuration. Please note that the following Google services that support Google Consent Mode are available here .","title":"Data Processing Services (DPS)"},{"location":"pages/getting-started/ui/#integrate-the-javascript-tag","text":"To execute your scripts only after your visitors have given their consent, you must first integrate the Usercentrics script into in the head area of your website. Find your personal script with your Settings-ID in the Admin Interface Implementation section. You can refine your script with the following list, or you can use the default one already provided below. Script Properties Avoid Prefetch Services (data-avoid-prefetch-services) Block Data Layer Push (data-block-data-layer-push) Add ControllerId (data-controller-id) Disable Server Consents (data-disable-server-consents) Disable Tracking (data-disable-tracking) EU Mode (data-eu-mode) Specify language (data-language) Enable TCF (data-tcf-enabled) Nonce (nonce) Please note that some of the properties bellow need to be set, for example, selecting Specify Language, you will need to input your desired language. Javascript tag < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" async ></ script > Warning After integrating the JavaScript Tag, the integrated scripts (Data Processing Services) have to be added to your configuration and adjusted on your Website or Tag Manager, for that, check our Guide Section","title":"Integrate the JavaScript Tag"},{"location":"pages/getting-started/ui/#next-steps","text":"We offer other features that you can configure and use with your Usercentrics CMP. If you wish so, please take a look at the UI Section on our documentation.","title":"Next steps"},{"location":"pages/gtm/configuration/","text":"Google Tag Manager Configuration Get detailed information on how to configure your Google Tag Manager with the Usercentrics Browser SDK. Prerequisites In order to follow this documentation, we assume you have: A Google Tag Manager account . Created a Google Tag Manager container on you website. Inserted the Google Tag Manager script into your website. Inserted your Usercentrics script into your website. Learn how to do this here . You can also directly integrate the Usercentrics Script via the Google Tag Manager. Usercentrics does NOT recommend this. However, you can learn how to do it here . Your personal Usercentrics script: Non-TCF Script < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" async ></ script > TCF Script < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" data-tcf-enabled ></ script > Background Information Google Tag Manager can be tricky at times. If you're having trouble understanding it, the following information is meant to clarify some basic issues: Google Tag Manager helps you configure when the Javascript tags on your website are activated. Each tag needs to have at least one trigger . Triggers listen for certain website events (e.g. the website is fully loaded). Once this event takes place the trigger determines if the tag is activated. Triggers can be firing or exception triggers: Exception triggers determine when a tag is NOT fired and take precedence over other triggers. Firing triggers determine when a tag is fired. Triggers can be reliant on variables . The firing of a tag will be blocked, if a condition based on the value of such a variable is not met. Usercentrics uses a special type of variable, a data layer variable , to communicate between your Google Tag Manager settings and your CMP. Adding Data-Processing Technologies This documentation will use Google Analytics as an example. However, the following process needs to be repeated separately for each technology. Replace \"Google Analytics\" in the naming of tags, triggers and variables with the name of the technology you are currently implementing, e.g Matomo. If you already have a Google Analytics tag in your Google Tag Manager configuration, you can jump to the Create a new Google Analytics variable section. Google Consent Mode Important The Google Consent Mode is activated by default in the Admin Interface. To deactivate the Google Consent Mode, go to the Admin Interface under Configuration / CMP Settings [CMP V2]. As the implementation differs for the Google Tags supported by the Google Consent Mode, please see our technical documentation for more information on the Google Consent Mode and the correct templates to use with your CMP. Create a new Google Analytics tag Navigate to \"Tags\" in the side-menu and then click on \"New\". Add a new tag of type \"Google Analytics: Universal Analytics\". Name it \"Google Analytics Tag\". Select your Google Analytics settings under \"Google Analytics Settings\". Read this to learn how set up your Google Analytics settings. Navigate to \"Tag firing options\" under \"Advanced Settings\" and select \"Once per page\". Explanation : If you want a certain technology to fire more than once per page view, you should set the tag firing option to \"Unlimited\". \"Once per page\", however, is Usercentrics' recommended setup. Save \"Google Analytics Tag\". Create a new Google Analytics variable You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent. Navigate to \"Variables\" in the side-menu and then click on \"New\". Add a new variable of type \"Data Layer Variable\". In the top left, name the variable \"Google Analytics Variable\". Under \"Data Layer Variable Name\", insert \"Google Analytics\". > \u26a0\ufe0f Note: Correct spelling, hyphenation and capitalization are mandatory for this field. Every technology must be added the way it is spelled in the Usercentrics Admin Interface. Here: \"Google Analytics\". Tick \"Set Default Value\" and set the default value to false . Save \"Google Analytics Variable\". Create a Google Analytics trigger There are several ways to implement this logic. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. Navigate to \"Triggers\" in the side-menu and click on \"New\". Add a new trigger of type \"Custom Event\". In the top left, name the trigger \"Google Analytics Trigger\". Tick \"Use regex matching\" next to the \"Event Name\" input field Under \"Event Name\", insert \"(consent_status.*)\". Correct spelling, hyphenation and capitalization are mandatory for this field. Tick \"Some Custom Events\". In the drop-down menus, set the following condition: \"Google Analytics Variable\" contains true . Explanation : The variable contains the user's consent information (variable= true - user opted in || variable= false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable= true . Save \"Google Analytics Trigger\". Add the trigger to \"Google Analytics Tag\". Repeat this for each non-IAB vendor script in your Tag Manager. Testing in Preview Mode In order to make sure your Google Tag Manager setup works, you need to test it in preview mode. Activate preview mode by clicking on \"Preview\" in the top-right corner. Visit your website. Open the development tools of your browser and navigate to the \"Network\" tap. Network requests of the implemented data-processing technologies should not be visible, unless they were defined as \"Essential\" in your Admin Interface. Press \"Accept All\" on the Usercentrics CMP. Now network requests of the implemented data-processing technologies should be visible in the \"Network\" tap.","title":"Configuration"},{"location":"pages/gtm/configuration/#google-tag-manager-configuration","text":"Get detailed information on how to configure your Google Tag Manager with the Usercentrics Browser SDK.","title":"Google Tag Manager Configuration"},{"location":"pages/gtm/configuration/#prerequisites","text":"In order to follow this documentation, we assume you have: A Google Tag Manager account . Created a Google Tag Manager container on you website. Inserted the Google Tag Manager script into your website. Inserted your Usercentrics script into your website. Learn how to do this here . You can also directly integrate the Usercentrics Script via the Google Tag Manager. Usercentrics does NOT recommend this. However, you can learn how to do it here . Your personal Usercentrics script: Non-TCF Script < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" async ></ script > TCF Script < script id = \"usercentrics-cmp\" data-settings-id = \"XXXXXXXX\" src = \"https://app.usercentrics.eu/browser-ui/latest/loader.js\" data-tcf-enabled ></ script >","title":"Prerequisites"},{"location":"pages/gtm/configuration/#background-information","text":"Google Tag Manager can be tricky at times. If you're having trouble understanding it, the following information is meant to clarify some basic issues: Google Tag Manager helps you configure when the Javascript tags on your website are activated. Each tag needs to have at least one trigger . Triggers listen for certain website events (e.g. the website is fully loaded). Once this event takes place the trigger determines if the tag is activated. Triggers can be firing or exception triggers: Exception triggers determine when a tag is NOT fired and take precedence over other triggers. Firing triggers determine when a tag is fired. Triggers can be reliant on variables . The firing of a tag will be blocked, if a condition based on the value of such a variable is not met. Usercentrics uses a special type of variable, a data layer variable , to communicate between your Google Tag Manager settings and your CMP.","title":"Background Information"},{"location":"pages/gtm/configuration/#adding-data-processing-technologies","text":"This documentation will use Google Analytics as an example. However, the following process needs to be repeated separately for each technology. Replace \"Google Analytics\" in the naming of tags, triggers and variables with the name of the technology you are currently implementing, e.g Matomo. If you already have a Google Analytics tag in your Google Tag Manager configuration, you can jump to the Create a new Google Analytics variable section.","title":"Adding Data-Processing Technologies"},{"location":"pages/gtm/configuration/#google-consent-mode","text":"Important The Google Consent Mode is activated by default in the Admin Interface. To deactivate the Google Consent Mode, go to the Admin Interface under Configuration / CMP Settings [CMP V2]. As the implementation differs for the Google Tags supported by the Google Consent Mode, please see our technical documentation for more information on the Google Consent Mode and the correct templates to use with your CMP.","title":"Google Consent Mode"},{"location":"pages/gtm/configuration/#create-a-new-google-analytics-tag","text":"Navigate to \"Tags\" in the side-menu and then click on \"New\". Add a new tag of type \"Google Analytics: Universal Analytics\". Name it \"Google Analytics Tag\". Select your Google Analytics settings under \"Google Analytics Settings\". Read this to learn how set up your Google Analytics settings. Navigate to \"Tag firing options\" under \"Advanced Settings\" and select \"Once per page\". Explanation : If you want a certain technology to fire more than once per page view, you should set the tag firing option to \"Unlimited\". \"Once per page\", however, is Usercentrics' recommended setup. Save \"Google Analytics Tag\".","title":"Create a new Google Analytics tag"},{"location":"pages/gtm/configuration/#create-a-new-google-analytics-variable","text":"You have to create consent default status variables for each of your non-IAB vendor script tags so that they are not triggered without consent. Navigate to \"Variables\" in the side-menu and then click on \"New\". Add a new variable of type \"Data Layer Variable\". In the top left, name the variable \"Google Analytics Variable\". Under \"Data Layer Variable Name\", insert \"Google Analytics\". > \u26a0\ufe0f Note: Correct spelling, hyphenation and capitalization are mandatory for this field. Every technology must be added the way it is spelled in the Usercentrics Admin Interface. Here: \"Google Analytics\". Tick \"Set Default Value\" and set the default value to false . Save \"Google Analytics Variable\".","title":"Create a new Google Analytics variable"},{"location":"pages/gtm/configuration/#create-a-google-analytics-trigger","text":"There are several ways to implement this logic. Usercentrics recommends the following option, however, depending on your setup, other structures might be more reasonable. Navigate to \"Triggers\" in the side-menu and click on \"New\". Add a new trigger of type \"Custom Event\". In the top left, name the trigger \"Google Analytics Trigger\". Tick \"Use regex matching\" next to the \"Event Name\" input field Under \"Event Name\", insert \"(consent_status.*)\". Correct spelling, hyphenation and capitalization are mandatory for this field. Tick \"Some Custom Events\". In the drop-down menus, set the following condition: \"Google Analytics Variable\" contains true . Explanation : The variable contains the user's consent information (variable= true - user opted in || variable= false - user opted out) for a specific technology. Hence, the trigger should only be fired (and tag therefore activated), if the variable= true . Save \"Google Analytics Trigger\". Add the trigger to \"Google Analytics Tag\". Repeat this for each non-IAB vendor script in your Tag Manager.","title":"Create a Google Analytics trigger"},{"location":"pages/gtm/configuration/#testing-in-preview-mode","text":"In order to make sure your Google Tag Manager setup works, you need to test it in preview mode. Activate preview mode by clicking on \"Preview\" in the top-right corner. Visit your website. Open the development tools of your browser and navigate to the \"Network\" tap. Network requests of the implemented data-processing technologies should not be visible, unless they were defined as \"Essential\" in your Admin Interface. Press \"Accept All\" on the Usercentrics CMP. Now network requests of the implemented data-processing technologies should be visible in the \"Network\" tap.","title":"Testing in Preview Mode"},{"location":"pages/gtm/templates/","text":"Implementing Usercentrics CMP via Google Tag Manager template General Information Websites using Google Tag Manager (GTM) can deploy the Usercentrics CMP by following these step-by-step instructions. Prerequisites You need to have created a GTM account, a website container in GTM and added this container snippet to your website. More information can be found here . Step 1: Create the tag using the Usercentrics CMP template In your GTM container, click \"Templates\" > \"Tag Templates\" > \"Search Gallery\" and select \"Usercentrics CMP\" from the list of community tag templates. Click \"Add to workspace\" and confirm by clicking \"Add\". Create a new tag by clicking \"New\" > \"Tag Configuration\" and select \"Usercentrics CMP\" from the list of standard tag types. Step 2: Configure the newly created tag Now, you need to configure the newly created tag. On the \"Settings Id\" field, please insert your settings-id. On the \"Default Language\" field, please leave it as it is or set the desired default language, for example 'de' for German. On the \"Enable \"Enable Transparency & Consent Framework 2.0 (TCF)\" field, check the checkbox if you want to enable TCF 2.0. On the \"Enable Accelerated Mobile Pages Framework (AMP)\" field, check the checkbox if you want to enable AMP. \u26a0\ufe0f To adjust the default measurement capabilities, set the default values for the command to run on every page of your site before any commands that send measurement data (such as config or event). For more information please check Adjust Tag Behavior On the \"Default Consent State\" separator, please select the default consents for: Statistics (consent type analytics_storage) Ads/Marketing (consent type ad_storage) Preferences (consent types functionality_storage and personalization_storage) On the \"Wait for update\" field, please input how many miliseconds to wait before firing tags waiting for consent, for more information please check asynchronous tools Step 3: Save the tag Choose \"Consent initialization - All pages\" as trigger and apply a name to your tag at the top of the configuration page, e.g. \"Usercentrics\". Click \"Save\" to create the tag. Now please follow the additional steps from our documentation to adjust the tags in your Google Tag Manager in order to block them until consent was given by the users: GTM Implementation Guide .","title":"Templates"},{"location":"pages/gtm/templates/#implementing-usercentrics-cmp-via-google-tag-manager-template","text":"","title":"Implementing Usercentrics CMP via Google Tag Manager template"},{"location":"pages/gtm/templates/#general-information","text":"Websites using Google Tag Manager (GTM) can deploy the Usercentrics CMP by following these step-by-step instructions.","title":"General Information"},{"location":"pages/gtm/templates/#prerequisites","text":"You need to have created a GTM account, a website container in GTM and added this container snippet to your website. More information can be found here .","title":"Prerequisites"},{"location":"pages/gtm/templates/#step-1-create-the-tag-using-the-usercentrics-cmp-template","text":"In your GTM container, click \"Templates\" > \"Tag Templates\" > \"Search Gallery\" and select \"Usercentrics CMP\" from the list of community tag templates. Click \"Add to workspace\" and confirm by clicking \"Add\". Create a new tag by clicking \"New\" > \"Tag Configuration\" and select \"Usercentrics CMP\" from the list of standard tag types.","title":"Step 1: Create the tag using the Usercentrics CMP template"},{"location":"pages/gtm/templates/#step-2-configure-the-newly-created-tag","text":"Now, you need to configure the newly created tag. On the \"Settings Id\" field, please insert your settings-id. On the \"Default Language\" field, please leave it as it is or set the desired default language, for example 'de' for German. On the \"Enable \"Enable Transparency & Consent Framework 2.0 (TCF)\" field, check the checkbox if you want to enable TCF 2.0. On the \"Enable Accelerated Mobile Pages Framework (AMP)\" field, check the checkbox if you want to enable AMP. \u26a0\ufe0f To adjust the default measurement capabilities, set the default values for the command to run on every page of your site before any commands that send measurement data (such as config or event). For more information please check Adjust Tag Behavior On the \"Default Consent State\" separator, please select the default consents for: Statistics (consent type analytics_storage) Ads/Marketing (consent type ad_storage) Preferences (consent types functionality_storage and personalization_storage) On the \"Wait for update\" field, please input how many miliseconds to wait before firing tags waiting for consent, for more information please check asynchronous tools","title":"Step 2: Configure the newly created tag"},{"location":"pages/gtm/templates/#step-3-save-the-tag","text":"Choose \"Consent initialization - All pages\" as trigger and apply a name to your tag at the top of the configuration page, e.g. \"Usercentrics\". Click \"Save\" to create the tag. Now please follow the additional steps from our documentation to adjust the tags in your Google Tag Manager in order to block them until consent was given by the users: GTM Implementation Guide .","title":"Step 3: Save the tag"},{"location":"pages/guides/","text":"After integrating the JavaScript Tag, the integrated scripts (Data Processing Services) have to be added to your configuration and adjusted on your Website or Tag Manager. In this section you will find some useful guides that will help you through the process.","title":"Index"},{"location":"pages/guides/#_1","text":"After integrating the JavaScript Tag, the integrated scripts (Data Processing Services) have to be added to your configuration and adjusted on your Website or Tag Manager. In this section you will find some useful guides that will help you through the process.","title":""},{"location":"pages/guides/guide-example/","text":"","title":"Second Guide"},{"location":"pages/sdk/implementation-optional-steps/","text":"","title":"Implementation (Optional Steps)"},{"location":"pages/ui/","text":"Please, before diving further into this section to make sure you followed our Getting Started guide beforehand.","title":"Notes"},{"location":"pages/ui/#_1","text":"Please, before diving further into this section to make sure you followed our Getting Started guide beforehand.","title":""},{"location":"pages/ui/adjusting-implemented-scripts/","text":"Adjust your implemented Scripts After integrating the JavaScript Tag, the integrated scripts (Data Processing Services) have to be added to your configuration and adjusted on your Website or Tag Manager. Guide for scripts that are directly integrated into your website Guide for scripts that are integrated via Google Tag Manager Guide for implementing Usercentrics CMP via Google Tag Manager template Guide for Mapp Intelligence Configuration","title":"Adjusting Implemented Scripts"},{"location":"pages/ui/adjusting-implemented-scripts/#adjust-your-implemented-scripts","text":"After integrating the JavaScript Tag, the integrated scripts (Data Processing Services) have to be added to your configuration and adjusted on your Website or Tag Manager. Guide for scripts that are directly integrated into your website Guide for scripts that are integrated via Google Tag Manager Guide for implementing Usercentrics CMP via Google Tag Manager template Guide for Mapp Intelligence Configuration","title":"Adjust your implemented Scripts"},{"location":"pages/ui/implementation-optional-steps/","text":"White labeling URLs For customers that only allow sources from the same domain on their websites for security reasons, you can now configure from which address all Usercentrics resources (JSON files, JavaScript files etc.) should be loaded. Important: This should be configured before the UI script from Step 1 In order to configure the domains please define the window variable called UC_UI_DOMAINS with the following structure: window . UC_UI_DOMAINS = { aggregator : '' , app : '' , cdn : '' , consents : '' , graphql : '' , trackingEvent : '' }; Our Endpoints Your proxy servers should point to the following domains Name Purpose Key Domain Aggregator Get all the services and their details aggregator https://aggregator.service.usercentrics.eu App Enable some UC features (ex. Cross Domain) app https://app.usercentrics.eu CDN UC content delivery server (settings information, translations, etc.) cdn https://api.usercentrics.eu Consents Get the consents data for Cross Domain feature consents https://consents.usercentrics.eu GraphQL Stores all user decisions on server graphql https://graphql.usercentrics.eu Tracking Event Tracking Pixel feature trackingEvent https://uct.service.usercentrics.eu","title":"Implementation (Optional Steps)"},{"location":"pages/ui/implementation-optional-steps/#_1","text":"","title":""},{"location":"pages/ui/implementation-optional-steps/#white-labeling-urls","text":"For customers that only allow sources from the same domain on their websites for security reasons, you can now configure from which address all Usercentrics resources (JSON files, JavaScript files etc.) should be loaded. Important: This should be configured before the UI script from Step 1 In order to configure the domains please define the window variable called UC_UI_DOMAINS with the following structure: window . UC_UI_DOMAINS = { aggregator : '' , app : '' , cdn : '' , consents : '' , graphql : '' , trackingEvent : '' }; Our Endpoints Your proxy servers should point to the following domains Name Purpose Key Domain Aggregator Get all the services and their details aggregator https://aggregator.service.usercentrics.eu App Enable some UC features (ex. Cross Domain) app https://app.usercentrics.eu CDN UC content delivery server (settings information, translations, etc.) cdn https://api.usercentrics.eu Consents Get the consents data for Cross Domain feature consents https://consents.usercentrics.eu GraphQL Stores all user decisions on server graphql https://graphql.usercentrics.eu Tracking Event Tracking Pixel feature trackingEvent https://uct.service.usercentrics.eu","title":"White labeling URLs"},{"location":"sdk/","text":"@usercentrics/cmp-browser-sdk - v2.13.4 / Exports Usercentrics CMP Browser SDK With the Usercentrics CMP Browser SDK our aim is to provide a lightweight library which enables you to build your own fully customized Consent Solution while still leveraging the Usercentrics service database and tools. We also offer collaboration possibilities with Usercentrics Partners who are able to support you in building your own customized solution. Contact our sales team for more information. Installing the dependency npm install @usercentrics/cmp-browser-sdk --save Default (non-TCF) initialization import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); if ( initialUIValues . variant === UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter. Accept / deny / update services in the default (non-TCF) context import Usercentrics , { UserDecision } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const categories = UC . getCategories (); const settings = UC . getSettings (); /** * ... */ const onAcceptAllHandler = () : void => { UC . acceptAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onDenyAllHandler = () : void => { UC . denyAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onSaveHandler = ( userDecisions : UserDecision []) : void => { // UserDecisions needs to include all the user choices for each service that were made in your UI UC . updateServices ( userDecisions ). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; }); TCF initialization First, make sure TCF is enabled in your settings . import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution // NOTE: If TCF is enabled, the ui property of the settings object will always be of type TCFUISettings, not DefaultUISettings. const settings = UC . getSettings (); // getTCFData() returns all TCF related data (vendors, purposes, special features etc.) const tcfData = UC . getTCFData (); if ( initialUIValues . variant === UI_VARIANT . TCF ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // NOTE: Remember to call setTCFUIAsOpen()! UC . setTCFUIAsOpen (); // Show TCF first layer return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter. For TCF, the createTcfApiStub option needs to be set to true in order for the __tcfapi queue to initialize right away (we cannot wait for the settings request to finish). Accept / deny / update vendors, purposes, special features in the TCF context Note that both features and special purposes are for disclosing only and do not require any user decision. They cannot be updated. Note that if TCF is enabled, the default (non-TCF) data is still available (e.g. getCategories()). A hybrid UI can be built if both sets of methods (TCF and default (non-TCF)) are called. import Usercentrics , { TCF_DECISION_UI_LAYER } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const settings = UC . getSettings (); const tcfData = UC . getTCFData (); /** * ... */ // The fromLayer parameter needs to identify the layer from which the acceptAll button was triggered. const onAcceptAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . acceptAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the denyAll button was triggered. const onDenyAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . denyAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the save button was triggered. const onSaveHandler = ( tcfUserDecisions : TCFUserDecisions , fromLayer : TCF_DECISION_UI_LAYER ) : void => { // TCFUserDecisions needs to include all the user choices for each vendor, purpose, special feature that were made in your UI UC . updateChoicesForTCF ( tcfUserDecisions , fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // Special handler for closing the TCF UI without any user changes (e.g. for any close button / click-away handler) const onTCFUICloseHandler = () : void => { UC . setTCFUIAsClosed (); }; }); Changing the language After UC is initialized you can change the language by calling: UC . changeLanguage ( 'NEW_LANGUAGE' ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); }); Changing the view After UC is initialized you have to update the SDK after every view change: const enum UI_LAYER { FIRST_LAYER , NONE , PRIVACY_BUTTON , SECOND_LAYER , } UC . updateLayer ( UI_LAYER . FIRST_LAYER ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); }); Getting Services Information After UC is initialized you can retrieve the services information, by using one of the following methods: getServicesBaseInfo or getServicesFullInfo . The method getServices was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getServicesBaseInfo retrieve all services with their base information, without fetching the aggregator. Returns BaseService [] UC.init().then((initialUIValues) => { // getServicesBaseInfo() returns all the services with their base information const servicesBase = UC.getServicesBaseInfo(); console.log(\"BASE INFO\", servicesBase) ... }); getServicesFullInfo retrieves all services with their complete information, fetching the aggregator if necessary. Returns Promise< Service []> UC.init().then((initialUIValues) => { // getServicesFullInfo() returns all services with their complete information const servicesFull = UC.getServicesFullInfo() servicesFull.then(info => { console.log(\"FULL INFO\", info) }); ... }); Getting Categories Information After UC is initialized you can retrieve the categories information, by using one of the following methods: getCategoriesBaseInfo or getCategoriesFullInfo . The method getCategories was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getCategoriesBaseInfo retrieves the categories and their base services info to display this information in your UI. Returns BaseCategory [] UC.init().then((initialUIValues) => { // getCategoriesBaseInfo() returns the categories and their base services info to display this information in your UI. const categoriesBase = UC.getCategoriesBaseInfo(); console.log(\"BASE CATEGORIES INFO\", categoriesBase) ... }); getCategoriesFullInfo retrieves the categories and their full services info to display this information in your UI. Returns Promise< Category []> UC.init().then((initialUIValues) => { // getCategoriesFullInfo() returns the categories and their full services info to display this information in your UI. const categoriesFull = UC.getCategoriesFullInfo(); categoriesFull.then(info => { console.log(\"FULL INFO\", info) }); ... }); Cross-Device Consent Sharing NOTE : If the given controllerId returns no history from the Usercentrics backend, that controllerId will not be updated for the end user. controllerId is known before init import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { controllerId : 'CONTROLLER_ID_FOR_END_USER' }); UC . init (). then (( initialView ) => { /** * ... */ }); controllerId is known after init import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialView ) => { /** * ... */ UC . restoreUserSession ( 'CONTROLLER_ID_FOR_END_USER' ). then (() => { /** * ... */ }); }); IE11 compatibility If your Consent Solution should work with IE11 (or other legacy browsers), then there's a few extra steps you need to do: Include a CustomEvent polyfill https://www.npmjs.com/package/custom-event-polyfill Include a fetch polyfill https://www.npmjs.com/package/whatwg-fetch Also you'll have to have Babel (with core-js) (or similar) in your build setup to make sure, that Symbol etc. get polyfilled. Script tag support You can also use the SDK as a script tag on your site: < script src = \"https://app.usercentrics.eu/browser-sdk/2.13.4/bundle.js\" ></ script > You can now access all methods/constants by using them from within the UC_SDK namespace: const UC = new UC_SDK . default ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); if ( initialUIValues . variant === UC_SDK . UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UC_SDK . UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UC_SDK . UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UC_SDK . UI_LAYER . NONE : default : // Show nothing return ; } } }); NOTE : If you need Internet Explorer 11 support, you can point the src attribute to https://app.usercentrics.eu/browser-sdk/2.6.1/bundle_legacy.js . Considerations for building your custom TCF v2.0 UI Note : This does NOT apply if you use the unaltered Usercentrics UI together with this SDK If you plan to build your own custom UI for TCF v2.0, Usercentrics cannot be liable that your custom UI conforms to all the IAB rules and guidelines. In this case, you can still use this SDK, but you need to register your solution at the IAB yourself. You can then enter your cmp-id (provided by the IAB) and cmp-version through the Usercentrics Admin Interface. In the case that you build your own TCF v2.0 UI it is NOT allowed to use the default Usercentrics cmp-id and cmp-version. Documentation Documentation can be found on our documentation website .","title":"Index"},{"location":"sdk/#usercentrics-cmp-browser-sdk","text":"With the Usercentrics CMP Browser SDK our aim is to provide a lightweight library which enables you to build your own fully customized Consent Solution while still leveraging the Usercentrics service database and tools. We also offer collaboration possibilities with Usercentrics Partners who are able to support you in building your own customized solution. Contact our sales team for more information.","title":"Usercentrics CMP Browser SDK"},{"location":"sdk/#installing-the-dependency","text":"npm install @usercentrics/cmp-browser-sdk --save","title":"Installing the dependency"},{"location":"sdk/#default-non-tcf-initialization","text":"import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); if ( initialUIValues . variant === UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter.","title":"Default (non-TCF) initialization"},{"location":"sdk/#accept-deny-update-services-in-the-default-non-tcf-context","text":"import Usercentrics , { UserDecision } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const categories = UC . getCategories (); const settings = UC . getSettings (); /** * ... */ const onAcceptAllHandler = () : void => { UC . acceptAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onDenyAllHandler = () : void => { UC . denyAllServices (). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; const onSaveHandler = ( userDecisions : UserDecision []) : void => { // UserDecisions needs to include all the user choices for each service that were made in your UI UC . updateServices ( userDecisions ). then (() => { // Remember to fetch the now updated categories const categories = UC . getCategories (); }); }; });","title":"Accept / deny / update services in the default (non-TCF) context"},{"location":"sdk/#tcf-initialization","text":"First, make sure TCF is enabled in your settings . import Usercentrics , { UI_LAYER , UI_VARIANT } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { // getSettings() returns all Usercentrics settings you need for your custom solution // NOTE: If TCF is enabled, the ui property of the settings object will always be of type TCFUISettings, not DefaultUISettings. const settings = UC . getSettings (); // getTCFData() returns all TCF related data (vendors, purposes, special features etc.) const tcfData = UC . getTCFData (); if ( initialUIValues . variant === UI_VARIANT . TCF ) { switch ( initialUIValues . initialLayer ) { case UI_LAYER . FIRST_LAYER : // NOTE: Remember to call setTCFUIAsOpen()! UC . setTCFUIAsOpen (); // Show TCF first layer return ; case UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UI_LAYER.NONE : default : // Show nothing return ; } } }); The constructor also supports an optional Options parameter. For TCF, the createTcfApiStub option needs to be set to true in order for the __tcfapi queue to initialize right away (we cannot wait for the settings request to finish).","title":"TCF initialization"},{"location":"sdk/#accept-deny-update-vendors-purposes-special-features-in-the-tcf-context","text":"Note that both features and special purposes are for disclosing only and do not require any user decision. They cannot be updated. Note that if TCF is enabled, the default (non-TCF) data is still available (e.g. getCategories()). A hybrid UI can be built if both sets of methods (TCF and default (non-TCF)) are called. import Usercentrics , { TCF_DECISION_UI_LAYER } from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { createTcfApiStub : true }); UC . init (). then (( initialUIValues ) => { const settings = UC . getSettings (); const tcfData = UC . getTCFData (); /** * ... */ // The fromLayer parameter needs to identify the layer from which the acceptAll button was triggered. const onAcceptAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . acceptAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the denyAll button was triggered. const onDenyAllHandler = ( fromLayer : TCF_DECISION_UI_LAYER ) : void => { UC . denyAllForTCF ( fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // The fromLayer parameter needs to identify the layer from which the save button was triggered. const onSaveHandler = ( tcfUserDecisions : TCFUserDecisions , fromLayer : TCF_DECISION_UI_LAYER ) : void => { // TCFUserDecisions needs to include all the user choices for each vendor, purpose, special feature that were made in your UI UC . updateChoicesForTCF ( tcfUserDecisions , fromLayer ). then (() => { // Remember to fetch the new (updated) tcfData const tcfData = UC . getTCFData (); }); }; // Special handler for closing the TCF UI without any user changes (e.g. for any close button / click-away handler) const onTCFUICloseHandler = () : void => { UC . setTCFUIAsClosed (); }; });","title":"Accept / deny / update vendors, purposes, special features in the TCF context"},{"location":"sdk/#changing-the-language","text":"After UC is initialized you can change the language by calling: UC . changeLanguage ( 'NEW_LANGUAGE' ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); });","title":"Changing the language"},{"location":"sdk/#changing-the-view","text":"After UC is initialized you have to update the SDK after every view change: const enum UI_LAYER { FIRST_LAYER , NONE , PRIVACY_BUTTON , SECOND_LAYER , } UC . updateLayer ( UI_LAYER . FIRST_LAYER ). then (() => { // Remember to fetch new (translated) settings const settings = UC . getSettings (); // If you use the default (non-TCF) setup, make sure to fetch new (translated) categories / settings const categories = UC . getCategories (); // If you use the TCF setup, make sure to fetch new (translated) tcfData const tcfData = UC . getTCFData (); });","title":"Changing the view"},{"location":"sdk/#getting-services-information","text":"After UC is initialized you can retrieve the services information, by using one of the following methods: getServicesBaseInfo or getServicesFullInfo . The method getServices was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getServicesBaseInfo retrieve all services with their base information, without fetching the aggregator. Returns BaseService [] UC.init().then((initialUIValues) => { // getServicesBaseInfo() returns all the services with their base information const servicesBase = UC.getServicesBaseInfo(); console.log(\"BASE INFO\", servicesBase) ... }); getServicesFullInfo retrieves all services with their complete information, fetching the aggregator if necessary. Returns Promise< Service []> UC.init().then((initialUIValues) => { // getServicesFullInfo() returns all services with their complete information const servicesFull = UC.getServicesFullInfo() servicesFull.then(info => { console.log(\"FULL INFO\", info) }); ... });","title":"Getting Services Information"},{"location":"sdk/#getting-categories-information","text":"After UC is initialized you can retrieve the categories information, by using one of the following methods: getCategoriesBaseInfo or getCategoriesFullInfo . The method getCategories was deprecated in the version 2.2.0-beta.3 and it will be deleted in version 3.0, so we advise you to update to these new methods, based in your needs: getCategoriesBaseInfo retrieves the categories and their base services info to display this information in your UI. Returns BaseCategory [] UC.init().then((initialUIValues) => { // getCategoriesBaseInfo() returns the categories and their base services info to display this information in your UI. const categoriesBase = UC.getCategoriesBaseInfo(); console.log(\"BASE CATEGORIES INFO\", categoriesBase) ... }); getCategoriesFullInfo retrieves the categories and their full services info to display this information in your UI. Returns Promise< Category []> UC.init().then((initialUIValues) => { // getCategoriesFullInfo() returns the categories and their full services info to display this information in your UI. const categoriesFull = UC.getCategoriesFullInfo(); categoriesFull.then(info => { console.log(\"FULL INFO\", info) }); ... });","title":"Getting Categories Information"},{"location":"sdk/#cross-device-consent-sharing","text":"NOTE : If the given controllerId returns no history from the Usercentrics backend, that controllerId will not be updated for the end user.","title":"Cross-Device Consent Sharing"},{"location":"sdk/#controllerid-is-known-before-init","text":"import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' , { controllerId : 'CONTROLLER_ID_FOR_END_USER' }); UC . init (). then (( initialView ) => { /** * ... */ });","title":"controllerId is known before init"},{"location":"sdk/#controllerid-is-known-after-init","text":"import Usercentrics from '@usercentrics/cmp-browser-sdk' ; const UC = new Usercentrics ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialView ) => { /** * ... */ UC . restoreUserSession ( 'CONTROLLER_ID_FOR_END_USER' ). then (() => { /** * ... */ }); });","title":"controllerId is known after init"},{"location":"sdk/#ie11-compatibility","text":"If your Consent Solution should work with IE11 (or other legacy browsers), then there's a few extra steps you need to do: Include a CustomEvent polyfill https://www.npmjs.com/package/custom-event-polyfill Include a fetch polyfill https://www.npmjs.com/package/whatwg-fetch Also you'll have to have Babel (with core-js) (or similar) in your build setup to make sure, that Symbol etc. get polyfilled.","title":"IE11 compatibility"},{"location":"sdk/#script-tag-support","text":"You can also use the SDK as a script tag on your site: < script src = \"https://app.usercentrics.eu/browser-sdk/2.13.4/bundle.js\" ></ script > You can now access all methods/constants by using them from within the UC_SDK namespace: const UC = new UC_SDK . default ( 'YOUR_USERCENTRICS_SETTINGS_ID' ); UC . init (). then (( initialUIValues ) => { // getCategories() returns all categories' and data processing services' information const categories = UC . getCategories (); // getSettings() returns all Usercentrics settings you need for your custom solution const settings = UC . getSettings (); if ( initialUIValues . variant === UC_SDK . UI_VARIANT . DEFAULT ) { switch ( initialUIValues . initialLayer ) { case UC_SDK . UI_LAYER . FIRST_LAYER : // Show first layer (i.e. privacy banner) return ; case UC_SDK . UI_LAYER . PRIVACY_BUTTON : // Show privacy button return ; case UC_SDK . UI_LAYER . NONE : default : // Show nothing return ; } } }); NOTE : If you need Internet Explorer 11 support, you can point the src attribute to https://app.usercentrics.eu/browser-sdk/2.6.1/bundle_legacy.js .","title":"Script tag support"},{"location":"sdk/#considerations-for-building-your-custom-tcf-v20-ui","text":"Note : This does NOT apply if you use the unaltered Usercentrics UI together with this SDK If you plan to build your own custom UI for TCF v2.0, Usercentrics cannot be liable that your custom UI conforms to all the IAB rules and guidelines. In this case, you can still use this SDK, but you need to register your solution at the IAB yourself. You can then enter your cmp-id (provided by the IAB) and cmp-version through the Usercentrics Admin Interface. In the case that you build your own TCF v2.0 UI it is NOT allowed to use the default Usercentrics cmp-id and cmp-version.","title":"Considerations for building your custom TCF v2.0 UI"},{"location":"sdk/#documentation","text":"Documentation can be found on our documentation website .","title":"Documentation"},{"location":"sdk/modules/","text":"@usercentrics/cmp-browser-sdk - v2.13.X / Exports @usercentrics/cmp-browser-sdk - v2.13.4 Table of contents Enumerations API_COMMANDS BUTTON_ALIGNMENT CLOSE_OPTION CONSENT_ACTION CONSENT_TYPE FIRST_LAYER_VARIANT RestrictionType SECOND_LAYER_SIDE SECOND_LAYER_TRIGGER SECOND_LAYER_VARIANT TCF_DECISION_UI_LAYER THEME TRACKING_EVENT_TYPE UI_LAYER UI_VARIANT Classes Core default Interfaces AggregatedServices BaseCategory BasePurpose BaseUISettings ButtonColor ButtonsCustomization Category CcpaButtons CcpaButtonsConfig CcpaFirstLayer CcpaFirstLayerConfig CcpaSecondLayer CcpaSecondLayerConfig CcpaUI CcpaUISettings ColorCustomization CommonButtonsCustomization CommonUI Consent ConsentHistory CookieInformationLabels Customization DataDistribution DataExchangeSetting DefaultButtonsCustomization DefaultCnil DefaultFirstLayerConfig DefaultGeneralLabels DefaultLabels DefaultSecondLayerConfig DefaultTCFGeneralLabels DefaultUI DefaultUIButtons DefaultUIFirstLayer DefaultUILabels DefaultUISecondLayer DefaultUISettings DeviceStorage Disclosure ExtendedService FontCustomization IdAndName InitOptions InitialUIValues Language LanguageConfig LayerCustomization LinkCustomization LogoCustomization OverlayCustomization PoweredBy PrivacyButton PrivacyButtonUI ProcessingCompany ResurfaceOptions SaveButtonCustomization SecondLayerConfig Service ServiceHashArrayObject Settings ShowSecondLayerButton TCFButtonsConfig TCFChangedPurposes TCFData TCFFirstLayerConfig TCFLabels TCFOptions TCFPurpose TCFSecondLayerConfig TCFSpecialFeature TCFStack TCFUISettings TCFUserDecisionOnPurpose TCFUserDecisionOnVendor TCFUserDecisions TCFVendor TCFVendorRestriction TcfUI TcfUISettingsLabels ToggleCustomization TrackEventParameters URLs UserCountryData UserDecision UserSessionData Type aliases AriaLabelsTranslation BaseService CcpaButtonCustomization CornerPosition Data DefaultButtonsConfig Labels LogoPosition Maybe MaybeButton SecondLayerUrl TCFFeature TCFSpecialPurpose TCFUserDecisionOnSpecialFeature TCFVendorRestrictionType TcfButtonsCustomization UI UISettings Functions isCcpaData isCcpaLabels isCcpaUI isDefaultData isDefaultLabels isDefaultUI isPrivacyButtonUI isTcfData isTcfLabels isTcfUI Enumerations API_COMMANDS \u2022 API_COMMANDS : Enum API_COMMANDS Defined in services/SettingsV2/enums/Ccpa/enums.public.ts:1 BUTTON_ALIGNMENT \u2022 BUTTON_ALIGNMENT : Enum BUTTON_ALIGNMENT Defined in services/SettingsV2/enums/enums.public.ts:27 CLOSE_OPTION \u2022 CLOSE_OPTION : Enum CLOSE_OPTION Defined in services/Api/enums/enums.legacy.ts:29 CONSENT_ACTION \u2022 Const CONSENT_ACTION : Enum CONSENT_ACTION Used internally inside the SDK to define the action of a Consent Defined in services/DataFacade/enums/enums.public.ts:2 CONSENT_TYPE \u2022 Const CONSENT_TYPE : Enum CONSENT_TYPE Defined in services/DataFacade/enums/enums.public.ts:14 FIRST_LAYER_VARIANT \u2022 Const FIRST_LAYER_VARIANT : Enum FIRST_LAYER_VARIANT Defined in services/SettingsV2/enums/enums.public.ts:1 RestrictionType \u2022 RestrictionType : Enum RestrictionType Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:6 SECOND_LAYER_SIDE \u2022 Const SECOND_LAYER_SIDE : Enum SECOND_LAYER_SIDE Defined in services/SettingsV2/enums/enums.public.ts:22 SECOND_LAYER_TRIGGER \u2022 SECOND_LAYER_TRIGGER : Enum SECOND_LAYER_TRIGGER Defined in services/SettingsV2/enums/enums.public.ts:16 SECOND_LAYER_VARIANT \u2022 Const SECOND_LAYER_VARIANT : Enum SECOND_LAYER_VARIANT Defined in services/SettingsV2/enums/enums.public.ts:6 TCF_DECISION_UI_LAYER \u2022 Const TCF_DECISION_UI_LAYER : Enum TCF_DECISION_UI_LAYER The layer that the user's decision came from Defined in services/SettingsV2/enums/TCF/enums.public.ts:2 THEME \u2022 Const THEME : Enum THEME Defined in services/SettingsV2/enums/enums.public.ts:11 TRACKING_EVENT_TYPE \u2022 TRACKING_EVENT_TYPE : Enum TRACKING_EVENT_TYPE Defined in services/DataFacade/enums/enums.public.ts:19 UI_LAYER \u2022 Const UI_LAYER : Enum UI_LAYER All the different UI layers Defined in interfaces.ts:8 UI_VARIANT \u2022 Const UI_VARIANT : Enum UI_VARIANT All the different UI variants Defined in interfaces.ts:16 Classes Core \u2022 Core : Class Core Defined in services/SettingsV2/Core/index.ts:8 default \u2022 default : Class default Defined in index.ts:122 Interfaces AggregatedServices \u2022 AggregatedServices : Interface AggregatedServices Defined in services/SettingsV2/interfaces/interfaces.ts:29 BaseCategory \u2022 BaseCategory : Interface BaseCategory Defined in services/SettingsV2/interfaces/interfaces.ts:37 BasePurpose \u2022 BasePurpose : Interface BasePurpose Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:193 BaseUISettings \u2022 BaseUISettings : Interface BaseUISettings Defined in services/Settings/interfaces/interfaces.ts:31 ButtonColor \u2022 ButtonColor : Interface ButtonColor Defined in services/SettingsV2/UI/interfaces.ts:16 ButtonsCustomization \u2022 ButtonsCustomization : Interface ButtonsCustomization Defined in services/SettingsV2/UI/interfaces.ts:40 Category \u2022 Category : Interface Category Defined in services/SettingsV2/interfaces/interfaces.ts:40 CcpaButtons \u2022 CcpaButtons : Interface CcpaButtons Defined in services/Settings/interfaces/interfaces.ui.public.ts:88 CcpaButtonsConfig \u2022 CcpaButtonsConfig : Interface CcpaButtonsConfig Defined in services/SettingsV2/UI/interfaces.ts:94 CcpaFirstLayer \u2022 CcpaFirstLayer : Interface CcpaFirstLayer Defined in services/Settings/interfaces/interfaces.ui.public.ts:95 CcpaFirstLayerConfig \u2022 CcpaFirstLayerConfig : Interface CcpaFirstLayerConfig Defined in services/SettingsV2/UI/interfaces.ts:120 CcpaSecondLayer \u2022 CcpaSecondLayer : Interface CcpaSecondLayer Defined in services/Settings/interfaces/interfaces.ui.public.ts:105 CcpaSecondLayerConfig \u2022 CcpaSecondLayerConfig : Interface CcpaSecondLayerConfig Defined in services/SettingsV2/UI/interfaces.ts:150 CcpaUI \u2022 CcpaUI : Interface CcpaUI Defined in services/SettingsV2/UI/interfaces.ts:186 CcpaUISettings \u2022 CcpaUISettings : Interface CcpaUISettings Defined in services/Settings/interfaces/interfaces.ts:42 ColorCustomization \u2022 ColorCustomization : Interface ColorCustomization Defined in services/Settings/interfaces/interfaces.ui.public.ts:22 CommonButtonsCustomization \u2022 CommonButtonsCustomization : Interface CommonButtonsCustomization Defined in services/SettingsV2/UI/interfaces.ts:29 CommonUI \u2022 CommonUI : Interface CommonUI Defined in services/SettingsV2/UI/interfaces.ts:169 Consent \u2022 Consent : Interface Consent Defined in services/SettingsV2/interfaces/interfaces.default.public.ts:36 ConsentHistory \u2022 ConsentHistory : Interface ConsentHistory Defined in services/DataFacade/interfaces/interfaces.public.ts:6 CookieInformationLabels \u2022 CookieInformationLabels : Interface CookieInformationLabels Defined in services/SettingsV2/Labels/interfaces.ts:63 Customization \u2022 Customization : Interface Customization Defined in services/Settings/interfaces/interfaces.ui.public.ts:36 DataDistribution \u2022 DataDistribution : Interface DataDistribution Defined in services/SettingsV2/interfaces/interfaces.default.public.ts:13 DataExchangeSetting \u2022 DataExchangeSetting : Interface DataExchangeSetting Defined in services/SettingsV2/interfaces/interfaces.ts:7 DefaultButtonsCustomization \u2022 DefaultButtonsCustomization : Interface DefaultButtonsCustomization Defined in services/SettingsV2/UI/interfaces.ts:34 DefaultCnil \u2022 DefaultCnil : Interface DefaultCnil Defined in services/Settings/interfaces/interfaces.ts:67 DefaultFirstLayerConfig \u2022 DefaultFirstLayerConfig : Interface DefaultFirstLayerConfig Defined in services/SettingsV2/UI/interfaces.ts:124 DefaultGeneralLabels \u2022 DefaultGeneralLabels : Interface DefaultGeneralLabels Defined in services/SettingsV2/Labels/interfaces.ts:36 DefaultLabels \u2022 DefaultLabels : Interface DefaultLabels Defined in services/SettingsV2/Labels/interfaces.ts:255 DefaultSecondLayerConfig \u2022 DefaultSecondLayerConfig : Interface DefaultSecondLayerConfig Defined in services/SettingsV2/UI/interfaces.ts:154 DefaultTCFGeneralLabels \u2022 DefaultTCFGeneralLabels : Interface DefaultTCFGeneralLabels Defined in services/Settings/interfaces/interfaces.ui.public.ts:166 DefaultUI \u2022 DefaultUI : Interface DefaultUI Defined in services/SettingsV2/UI/interfaces.ts:192 DefaultUIButtons \u2022 DefaultUIButtons : Interface DefaultUIButtons Defined in services/Settings/interfaces/interfaces.ui.public.ts:153 DefaultUIFirstLayer \u2022 DefaultUIFirstLayer : Interface DefaultUIFirstLayer Defined in services/Settings/interfaces/interfaces.ui.public.ts:142 DefaultUILabels \u2022 DefaultUILabels : Interface DefaultUILabels Defined in services/Settings/interfaces/interfaces.ts:71 DefaultUISecondLayer \u2022 DefaultUISecondLayer : Interface DefaultUISecondLayer Defined in services/Settings/interfaces/interfaces.ui.public.ts:121 DefaultUISettings \u2022 DefaultUISettings : Interface DefaultUISettings Defined in services/Settings/interfaces/interfaces.ts:59 DeviceStorage \u2022 DeviceStorage : Interface DeviceStorage Defined in services/Api/interfaces/interfaces.legacy.ts:148 Disclosure \u2022 Disclosure : Interface Disclosure Defined in services/Api/interfaces/interfaces.legacy.ts:137 ExtendedService \u2022 ExtendedService : Interface ExtendedService Defined in services/Settings/interfaces/interfaces.ui.public.ts:67 FontCustomization \u2022 FontCustomization : Interface FontCustomization Defined in services/SettingsV2/UI/interfaces.ts:50 IdAndName \u2022 IdAndName : Interface IdAndName A generic wrapper for a unique id and a name. Introduced to minimize redundancy. Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:186 InitOptions \u2022 InitOptions : Interface InitOptions Additional options you can pass to the constructor Defined in interfaces.ts:39 InitialUIValues \u2022 InitialUIValues : Interface InitialUIValues The init() return values, that determine what variant and layer should be shown Defined in interfaces.ts:23 Language \u2022 Language : Interface Language Defined in services/SettingsV2/interfaces/interfaces.default.public.ts:18 LanguageConfig \u2022 LanguageConfig : Interface LanguageConfig Defined in services/SettingsV2/Core/interfaces.ts:1 LayerCustomization \u2022 LayerCustomization : Interface LayerCustomization Defined in services/SettingsV2/UI/interfaces.ts:55 LinkCustomization \u2022 LinkCustomization : Interface LinkCustomization Defined in services/SettingsV2/UI/interfaces.ts:60 LogoCustomization \u2022 LogoCustomization : Interface LogoCustomization Defined in services/SettingsV2/UI/interfaces.ts:67 OverlayCustomization \u2022 OverlayCustomization : Interface OverlayCustomization Defined in services/SettingsV2/UI/interfaces.ts:73 PoweredBy \u2022 PoweredBy : Interface PoweredBy Defined in services/SettingsV2/UI/interfaces.ts:107 PrivacyButton \u2022 PrivacyButton : Interface PrivacyButton Defined in services/SettingsV2/Core/interfaces.ts:8 PrivacyButtonUI \u2022 PrivacyButtonUI : Interface PrivacyButtonUI Defined in services/SettingsV2/UI/interfaces.ts:204 ProcessingCompany \u2022 ProcessingCompany : Interface ProcessingCompany Defined in services/SettingsV2/interfaces/interfaces.default.public.ts:23 ResurfaceOptions \u2022 ResurfaceOptions : Interface ResurfaceOptions Defined in services/SettingsV2/interfaces/interfaces.ts:22 SaveButtonCustomization \u2022 SaveButtonCustomization : Interface SaveButtonCustomization Defined in services/SettingsV2/UI/interfaces.ts:23 SecondLayerConfig \u2022 SecondLayerConfig : Interface SecondLayerConfig Defined in services/SettingsV2/UI/interfaces.ts:140 Service \u2022 Service : Interface Service Defined in services/SettingsV2/interfaces/interfaces.ts:33 ServiceHashArrayObject \u2022 ServiceHashArrayObject : Interface ServiceHashArrayObject Defined in services/SettingsV2/interfaces/interfaces.ts:12 Settings \u2022 Settings : Interface Settings Defined in services/Settings/interfaces/interfaces.ts:104 ShowSecondLayerButton \u2022 ShowSecondLayerButton : Interface ShowSecondLayerButton Defined in services/Settings/interfaces/interfaces.ui.public.ts:158 TCFButtonsConfig \u2022 TCFButtonsConfig : Interface TCFButtonsConfig Defined in services/SettingsV2/UI/interfaces.ts:103 TCFChangedPurposes \u2022 TCFChangedPurposes : Interface TCFChangedPurposes Defined in services/SettingsV2/interfaces/interfaces.ts:17 TCFData \u2022 TCFData : Interface TCFData A wrapper for all the data that needs to be disclosed to the end-user if TCF is enabled Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:109 TCFFirstLayerConfig \u2022 TCFFirstLayerConfig : Interface TCFFirstLayerConfig Defined in services/SettingsV2/UI/interfaces.ts:131 TCFLabels \u2022 TCFLabels : Interface TCFLabels Defined in services/Settings/interfaces/interfaces.ts:78 TCFOptions \u2022 TCFOptions : Interface TCFOptions Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:21 TCFPurpose \u2022 TCFPurpose : Interface TCFPurpose A TCF purpose that needs to be disclosed to the end-user and requires the end-user's consent and legitimate interest consent. Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:61 TCFSecondLayerConfig \u2022 TCFSecondLayerConfig : Interface TCFSecondLayerConfig Defined in services/SettingsV2/UI/interfaces.ts:160 TCFSpecialFeature \u2022 TCFSpecialFeature : Interface TCFSpecialFeature A TCF special feature that needs to be disclosed to the end-user and requires the end-user's consent. Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:80 TCFStack \u2022 TCFStack : Interface TCFStack A TCF stack is a collection of multiple TCF purposes and TCF special features, with one shared description. On the first layer of a TCF UI, stacks may be shown as alternative to the included single purposes and special features. Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:95 TCFUISettings \u2022 TCFUISettings : Interface TCFUISettings Defined in services/Settings/interfaces/interfaces.ts:93 TCFUserDecisionOnPurpose \u2022 TCFUserDecisionOnPurpose : Interface TCFUserDecisionOnPurpose A user's consent decision for a single purpose Defined in services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:14 TCFUserDecisionOnVendor \u2022 TCFUserDecisionOnVendor : Interface TCFUserDecisionOnVendor A user's consent decision for a single vendor Defined in services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:23 TCFUserDecisions \u2022 TCFUserDecisions : Interface TCFUserDecisions A user's consent decision on all TCF options Defined in services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:4 TCFVendor \u2022 TCFVendor : Interface TCFVendor A TCF vendor (aka. advertiser, tracking service, third party) that is registered with the IAB global vendor list. A TCF vendor needs to be disclosed to the end-user and requires the end-user's consent and legitimate interest consent. Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:135 TCFVendorRestriction \u2022 TCFVendorRestriction : Interface TCFVendorRestriction A TCF vendor restriction for a flexible purpose Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:178 TcfUI \u2022 TcfUI : Interface TcfUI Defined in services/SettingsV2/UI/interfaces.ts:198 TcfUISettingsLabels \u2022 TcfUISettingsLabels : Interface TcfUISettingsLabels Defined in services/SettingsV2/Labels/interfaces.ts:261 ToggleCustomization \u2022 ToggleCustomization : Interface ToggleCustomization Defined in services/SettingsV2/UI/interfaces.ts:78 TrackEventParameters \u2022 TrackEventParameters : Interface TrackEventParameters Defined in services/DataFacade/interfaces/interfaces.public.ts:23 URLs \u2022 URLs : Interface URLs Defined in services/SettingsV2/interfaces/interfaces.default.public.ts:29 UserCountryData \u2022 UserCountryData : Interface UserCountryData Defined in services/Location/interfaces/interfaces.public.ts:1 UserDecision \u2022 UserDecision : Interface UserDecision A user's consent decision for a single service Defined in services/SettingsV2/interfaces/interfaces.default.public.ts:4 UserSessionData \u2022 UserSessionData : Interface UserSessionData Defined in services/DataFacade/interfaces/interfaces.public.ts:16 Type aliases AriaLabelsTranslation \u01ac AriaLabelsTranslation : LegacyAriaLabelsTranslations Defined in services/Api/interfaces/interfaces.legacy.ts:111 BaseService \u01ac BaseService : BaseServiceData & ServiceLabels Defined in services/SettingsV2/interfaces/interfaces.ts:32 CcpaButtonCustomization \u01ac CcpaButtonCustomization : SaveButtonCustomization Defined in services/SettingsV2/UI/interfaces.ts:27 CornerPosition \u01ac CornerPosition : \"tl\" | \"tr\" | \"bl\" | \"br\" Defined in services/SettingsV2/Core/interfaces.ts:6 Data \u01ac Data : DefaultData | CcpaData | TcfData Defined in services/SettingsV2/Data/interfaces.ts:115 DefaultButtonsConfig \u01ac DefaultButtonsConfig : ButtonsCustomization & DefaultButtonsCustomization Defined in services/SettingsV2/UI/interfaces.ts:101 Labels \u01ac Labels : CcpaLabels | DefaultLabels | TcfUISettingsLabels Defined in services/SettingsV2/Labels/interfaces.ts:270 LogoPosition \u01ac LogoPosition : \"center\" | \"left\" | \"right\" Defined in services/SettingsV2/interfaces/interfaces.default.public.ts:11 Maybe \u01ac Maybe : T | null | undefined Type parameters Name T Defined in services/SettingsV2/interfaces/interfaces.ts:44 MaybeButton \u01ac MaybeButton : ButtonColor | null Defined in services/SettingsV2/UI/interfaces.ts:21 SecondLayerUrl \u01ac SecondLayerUrl : string Defined in services/SettingsV2/UI/interfaces.ts:14 TCFFeature \u01ac TCFFeature : BasePurpose A TCF feature that needs to be disclosed to the end-user. Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:58 TCFSpecialPurpose \u01ac TCFSpecialPurpose : BasePurpose A TCF special purpose that needs to be disclosed to the end-user. Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:77 TCFUserDecisionOnSpecialFeature \u01ac TCFUserDecisionOnSpecialFeature : BaseTCFUserDecision A user's consent decision for a single special feature Defined in services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:20 TCFVendorRestrictionType \u01ac TCFVendorRestrictionType : RestrictionType Defined in services/SettingsV2/interfaces/TCF/interfaces.public.ts:55 TcfButtonsCustomization \u01ac TcfButtonsCustomization : CommonButtonsCustomization Defined in services/SettingsV2/UI/interfaces.ts:38 UI \u01ac UI : CcpaUI | DefaultUI | TcfUI | PrivacyButtonUI Defined in services/SettingsV2/UI/interfaces.ts:213 UISettings \u01ac UISettings : CcpaUISettings | DefaultUISettings | TCFUISettings Defined in services/Settings/interfaces/interfaces.ts:102 Functions isCcpaData \u25b8 Const isCcpaData ( data ): data is CcpaData Parameters Name Type data Maybe<Data> Returns data is CcpaData Defined in services/SettingsV2/helpers.ts:210 isCcpaLabels \u25b8 Const isCcpaLabels ( labels ): labels is CcpaLabels Parameters Name Type labels Maybe<Labels> Returns labels is CcpaLabels Defined in services/SettingsV2/helpers.ts:222 isCcpaUI \u25b8 Const isCcpaUI ( ui ): ui is CcpaUI Parameters Name Type ui Maybe<UI> Returns ui is CcpaUI Defined in services/SettingsV2/helpers.ts:234 isDefaultData \u25b8 Const isDefaultData ( data ): data is DefaultData Parameters Name Type data Maybe<Data> Returns data is DefaultData Defined in services/SettingsV2/helpers.ts:218 isDefaultLabels \u25b8 Const isDefaultLabels ( labels ): labels is DefaultLabels Parameters Name Type labels Maybe<Labels> Returns labels is DefaultLabels Defined in services/SettingsV2/helpers.ts:230 isDefaultUI \u25b8 Const isDefaultUI ( ui ): ui is DefaultUI Parameters Name Type ui Maybe<UI> Returns ui is DefaultUI Defined in services/SettingsV2/helpers.ts:246 isPrivacyButtonUI \u25b8 Const isPrivacyButtonUI ( ui ): ui is PrivacyButtonUI Parameters Name Type ui Maybe<UI> Returns ui is PrivacyButtonUI Defined in services/SettingsV2/helpers.ts:250 isTcfData \u25b8 Const isTcfData ( data ): data is TcfData Parameters Name Type data Maybe<Data> Returns data is TcfData Defined in services/SettingsV2/helpers.ts:214 isTcfLabels \u25b8 Const isTcfLabels ( labels ): labels is TcfUISettingsLabels Parameters Name Type labels Maybe<Labels> Returns labels is TcfUISettingsLabels Defined in services/SettingsV2/helpers.ts:226 isTcfUI \u25b8 Const isTcfUI ( ui ): ui is TcfUI Parameters Name Type ui Maybe<UI> Returns ui is TcfUI Defined in services/SettingsV2/helpers.ts:242","title":"Technical SDK"},{"location":"sdk/modules/#usercentricscmp-browser-sdk-v2134","text":"","title":"@usercentrics/cmp-browser-sdk - v2.13.4"},{"location":"sdk/modules/#table-of-contents","text":"","title":"Table of contents"},{"location":"sdk/modules/#enumerations","text":"API_COMMANDS BUTTON_ALIGNMENT CLOSE_OPTION CONSENT_ACTION CONSENT_TYPE FIRST_LAYER_VARIANT RestrictionType SECOND_LAYER_SIDE SECOND_LAYER_TRIGGER SECOND_LAYER_VARIANT TCF_DECISION_UI_LAYER THEME TRACKING_EVENT_TYPE UI_LAYER UI_VARIANT","title":"Enumerations"},{"location":"sdk/modules/#classes","text":"Core default","title":"Classes"},{"location":"sdk/modules/#interfaces","text":"AggregatedServices BaseCategory BasePurpose BaseUISettings ButtonColor ButtonsCustomization Category CcpaButtons CcpaButtonsConfig CcpaFirstLayer CcpaFirstLayerConfig CcpaSecondLayer CcpaSecondLayerConfig CcpaUI CcpaUISettings ColorCustomization CommonButtonsCustomization CommonUI Consent ConsentHistory CookieInformationLabels Customization DataDistribution DataExchangeSetting DefaultButtonsCustomization DefaultCnil DefaultFirstLayerConfig DefaultGeneralLabels DefaultLabels DefaultSecondLayerConfig DefaultTCFGeneralLabels DefaultUI DefaultUIButtons DefaultUIFirstLayer DefaultUILabels DefaultUISecondLayer DefaultUISettings DeviceStorage Disclosure ExtendedService FontCustomization IdAndName InitOptions InitialUIValues Language LanguageConfig LayerCustomization LinkCustomization LogoCustomization OverlayCustomization PoweredBy PrivacyButton PrivacyButtonUI ProcessingCompany ResurfaceOptions SaveButtonCustomization SecondLayerConfig Service ServiceHashArrayObject Settings ShowSecondLayerButton TCFButtonsConfig TCFChangedPurposes TCFData TCFFirstLayerConfig TCFLabels TCFOptions TCFPurpose TCFSecondLayerConfig TCFSpecialFeature TCFStack TCFUISettings TCFUserDecisionOnPurpose TCFUserDecisionOnVendor TCFUserDecisions TCFVendor TCFVendorRestriction TcfUI TcfUISettingsLabels ToggleCustomization TrackEventParameters URLs UserCountryData UserDecision UserSessionData","title":"Interfaces"},{"location":"sdk/modules/#type-aliases","text":"AriaLabelsTranslation BaseService CcpaButtonCustomization CornerPosition Data DefaultButtonsConfig Labels LogoPosition Maybe MaybeButton SecondLayerUrl TCFFeature TCFSpecialPurpose TCFUserDecisionOnSpecialFeature TCFVendorRestrictionType TcfButtonsCustomization UI UISettings","title":"Type aliases"},{"location":"sdk/modules/#functions","text":"isCcpaData isCcpaLabels isCcpaUI isDefaultData isDefaultLabels isDefaultUI isPrivacyButtonUI isTcfData isTcfLabels isTcfUI","title":"Functions"},{"location":"sdk/modules/#enumerations_1","text":"","title":"Enumerations"},{"location":"sdk/modules/#api_commands","text":"\u2022 API_COMMANDS : Enum API_COMMANDS","title":"API_COMMANDS"},{"location":"sdk/modules/#defined-in","text":"services/SettingsV2/enums/Ccpa/enums.public.ts:1","title":"Defined in"},{"location":"sdk/modules/#button_alignment","text":"\u2022 BUTTON_ALIGNMENT : Enum BUTTON_ALIGNMENT","title":"BUTTON_ALIGNMENT"},{"location":"sdk/modules/#defined-in_1","text":"services/SettingsV2/enums/enums.public.ts:27","title":"Defined in"},{"location":"sdk/modules/#close_option","text":"\u2022 CLOSE_OPTION : Enum CLOSE_OPTION","title":"CLOSE_OPTION"},{"location":"sdk/modules/#defined-in_2","text":"services/Api/enums/enums.legacy.ts:29","title":"Defined in"},{"location":"sdk/modules/#consent_action","text":"\u2022 Const CONSENT_ACTION : Enum CONSENT_ACTION Used internally inside the SDK to define the action of a Consent","title":"CONSENT_ACTION"},{"location":"sdk/modules/#defined-in_3","text":"services/DataFacade/enums/enums.public.ts:2","title":"Defined in"},{"location":"sdk/modules/#consent_type","text":"\u2022 Const CONSENT_TYPE : Enum CONSENT_TYPE","title":"CONSENT_TYPE"},{"location":"sdk/modules/#defined-in_4","text":"services/DataFacade/enums/enums.public.ts:14","title":"Defined in"},{"location":"sdk/modules/#first_layer_variant","text":"\u2022 Const FIRST_LAYER_VARIANT : Enum FIRST_LAYER_VARIANT","title":"FIRST_LAYER_VARIANT"},{"location":"sdk/modules/#defined-in_5","text":"services/SettingsV2/enums/enums.public.ts:1","title":"Defined in"},{"location":"sdk/modules/#restrictiontype","text":"\u2022 RestrictionType : Enum RestrictionType","title":"RestrictionType"},{"location":"sdk/modules/#defined-in_6","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:6","title":"Defined in"},{"location":"sdk/modules/#second_layer_side","text":"\u2022 Const SECOND_LAYER_SIDE : Enum SECOND_LAYER_SIDE","title":"SECOND_LAYER_SIDE"},{"location":"sdk/modules/#defined-in_7","text":"services/SettingsV2/enums/enums.public.ts:22","title":"Defined in"},{"location":"sdk/modules/#second_layer_trigger","text":"\u2022 SECOND_LAYER_TRIGGER : Enum SECOND_LAYER_TRIGGER","title":"SECOND_LAYER_TRIGGER"},{"location":"sdk/modules/#defined-in_8","text":"services/SettingsV2/enums/enums.public.ts:16","title":"Defined in"},{"location":"sdk/modules/#second_layer_variant","text":"\u2022 Const SECOND_LAYER_VARIANT : Enum SECOND_LAYER_VARIANT","title":"SECOND_LAYER_VARIANT"},{"location":"sdk/modules/#defined-in_9","text":"services/SettingsV2/enums/enums.public.ts:6","title":"Defined in"},{"location":"sdk/modules/#tcf_decision_ui_layer","text":"\u2022 Const TCF_DECISION_UI_LAYER : Enum TCF_DECISION_UI_LAYER The layer that the user's decision came from","title":"TCF_DECISION_UI_LAYER"},{"location":"sdk/modules/#defined-in_10","text":"services/SettingsV2/enums/TCF/enums.public.ts:2","title":"Defined in"},{"location":"sdk/modules/#theme","text":"\u2022 Const THEME : Enum THEME","title":"THEME"},{"location":"sdk/modules/#defined-in_11","text":"services/SettingsV2/enums/enums.public.ts:11","title":"Defined in"},{"location":"sdk/modules/#tracking_event_type","text":"\u2022 TRACKING_EVENT_TYPE : Enum TRACKING_EVENT_TYPE","title":"TRACKING_EVENT_TYPE"},{"location":"sdk/modules/#defined-in_12","text":"services/DataFacade/enums/enums.public.ts:19","title":"Defined in"},{"location":"sdk/modules/#ui_layer","text":"\u2022 Const UI_LAYER : Enum UI_LAYER All the different UI layers","title":"UI_LAYER"},{"location":"sdk/modules/#defined-in_13","text":"interfaces.ts:8","title":"Defined in"},{"location":"sdk/modules/#ui_variant","text":"\u2022 Const UI_VARIANT : Enum UI_VARIANT All the different UI variants","title":"UI_VARIANT"},{"location":"sdk/modules/#defined-in_14","text":"interfaces.ts:16","title":"Defined in"},{"location":"sdk/modules/#classes_1","text":"","title":"Classes"},{"location":"sdk/modules/#core","text":"\u2022 Core : Class Core","title":"Core"},{"location":"sdk/modules/#defined-in_15","text":"services/SettingsV2/Core/index.ts:8","title":"Defined in"},{"location":"sdk/modules/#default","text":"\u2022 default : Class default","title":"default"},{"location":"sdk/modules/#defined-in_16","text":"index.ts:122","title":"Defined in"},{"location":"sdk/modules/#interfaces_1","text":"","title":"Interfaces"},{"location":"sdk/modules/#aggregatedservices","text":"\u2022 AggregatedServices : Interface AggregatedServices","title":"AggregatedServices"},{"location":"sdk/modules/#defined-in_17","text":"services/SettingsV2/interfaces/interfaces.ts:29","title":"Defined in"},{"location":"sdk/modules/#basecategory","text":"\u2022 BaseCategory : Interface BaseCategory","title":"BaseCategory"},{"location":"sdk/modules/#defined-in_18","text":"services/SettingsV2/interfaces/interfaces.ts:37","title":"Defined in"},{"location":"sdk/modules/#basepurpose","text":"\u2022 BasePurpose : Interface BasePurpose","title":"BasePurpose"},{"location":"sdk/modules/#defined-in_19","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:193","title":"Defined in"},{"location":"sdk/modules/#baseuisettings","text":"\u2022 BaseUISettings : Interface BaseUISettings","title":"BaseUISettings"},{"location":"sdk/modules/#defined-in_20","text":"services/Settings/interfaces/interfaces.ts:31","title":"Defined in"},{"location":"sdk/modules/#buttoncolor","text":"\u2022 ButtonColor : Interface ButtonColor","title":"ButtonColor"},{"location":"sdk/modules/#defined-in_21","text":"services/SettingsV2/UI/interfaces.ts:16","title":"Defined in"},{"location":"sdk/modules/#buttonscustomization","text":"\u2022 ButtonsCustomization : Interface ButtonsCustomization","title":"ButtonsCustomization"},{"location":"sdk/modules/#defined-in_22","text":"services/SettingsV2/UI/interfaces.ts:40","title":"Defined in"},{"location":"sdk/modules/#category","text":"\u2022 Category : Interface Category","title":"Category"},{"location":"sdk/modules/#defined-in_23","text":"services/SettingsV2/interfaces/interfaces.ts:40","title":"Defined in"},{"location":"sdk/modules/#ccpabuttons","text":"\u2022 CcpaButtons : Interface CcpaButtons","title":"CcpaButtons"},{"location":"sdk/modules/#defined-in_24","text":"services/Settings/interfaces/interfaces.ui.public.ts:88","title":"Defined in"},{"location":"sdk/modules/#ccpabuttonsconfig","text":"\u2022 CcpaButtonsConfig : Interface CcpaButtonsConfig","title":"CcpaButtonsConfig"},{"location":"sdk/modules/#defined-in_25","text":"services/SettingsV2/UI/interfaces.ts:94","title":"Defined in"},{"location":"sdk/modules/#ccpafirstlayer","text":"\u2022 CcpaFirstLayer : Interface CcpaFirstLayer","title":"CcpaFirstLayer"},{"location":"sdk/modules/#defined-in_26","text":"services/Settings/interfaces/interfaces.ui.public.ts:95","title":"Defined in"},{"location":"sdk/modules/#ccpafirstlayerconfig","text":"\u2022 CcpaFirstLayerConfig : Interface CcpaFirstLayerConfig","title":"CcpaFirstLayerConfig"},{"location":"sdk/modules/#defined-in_27","text":"services/SettingsV2/UI/interfaces.ts:120","title":"Defined in"},{"location":"sdk/modules/#ccpasecondlayer","text":"\u2022 CcpaSecondLayer : Interface CcpaSecondLayer","title":"CcpaSecondLayer"},{"location":"sdk/modules/#defined-in_28","text":"services/Settings/interfaces/interfaces.ui.public.ts:105","title":"Defined in"},{"location":"sdk/modules/#ccpasecondlayerconfig","text":"\u2022 CcpaSecondLayerConfig : Interface CcpaSecondLayerConfig","title":"CcpaSecondLayerConfig"},{"location":"sdk/modules/#defined-in_29","text":"services/SettingsV2/UI/interfaces.ts:150","title":"Defined in"},{"location":"sdk/modules/#ccpaui","text":"\u2022 CcpaUI : Interface CcpaUI","title":"CcpaUI"},{"location":"sdk/modules/#defined-in_30","text":"services/SettingsV2/UI/interfaces.ts:186","title":"Defined in"},{"location":"sdk/modules/#ccpauisettings","text":"\u2022 CcpaUISettings : Interface CcpaUISettings","title":"CcpaUISettings"},{"location":"sdk/modules/#defined-in_31","text":"services/Settings/interfaces/interfaces.ts:42","title":"Defined in"},{"location":"sdk/modules/#colorcustomization","text":"\u2022 ColorCustomization : Interface ColorCustomization","title":"ColorCustomization"},{"location":"sdk/modules/#defined-in_32","text":"services/Settings/interfaces/interfaces.ui.public.ts:22","title":"Defined in"},{"location":"sdk/modules/#commonbuttonscustomization","text":"\u2022 CommonButtonsCustomization : Interface CommonButtonsCustomization","title":"CommonButtonsCustomization"},{"location":"sdk/modules/#defined-in_33","text":"services/SettingsV2/UI/interfaces.ts:29","title":"Defined in"},{"location":"sdk/modules/#commonui","text":"\u2022 CommonUI : Interface CommonUI","title":"CommonUI"},{"location":"sdk/modules/#defined-in_34","text":"services/SettingsV2/UI/interfaces.ts:169","title":"Defined in"},{"location":"sdk/modules/#consent","text":"\u2022 Consent : Interface Consent","title":"Consent"},{"location":"sdk/modules/#defined-in_35","text":"services/SettingsV2/interfaces/interfaces.default.public.ts:36","title":"Defined in"},{"location":"sdk/modules/#consenthistory","text":"\u2022 ConsentHistory : Interface ConsentHistory","title":"ConsentHistory"},{"location":"sdk/modules/#defined-in_36","text":"services/DataFacade/interfaces/interfaces.public.ts:6","title":"Defined in"},{"location":"sdk/modules/#cookieinformationlabels","text":"\u2022 CookieInformationLabels : Interface CookieInformationLabels","title":"CookieInformationLabels"},{"location":"sdk/modules/#defined-in_37","text":"services/SettingsV2/Labels/interfaces.ts:63","title":"Defined in"},{"location":"sdk/modules/#customization","text":"\u2022 Customization : Interface Customization","title":"Customization"},{"location":"sdk/modules/#defined-in_38","text":"services/Settings/interfaces/interfaces.ui.public.ts:36","title":"Defined in"},{"location":"sdk/modules/#datadistribution","text":"\u2022 DataDistribution : Interface DataDistribution","title":"DataDistribution"},{"location":"sdk/modules/#defined-in_39","text":"services/SettingsV2/interfaces/interfaces.default.public.ts:13","title":"Defined in"},{"location":"sdk/modules/#dataexchangesetting","text":"\u2022 DataExchangeSetting : Interface DataExchangeSetting","title":"DataExchangeSetting"},{"location":"sdk/modules/#defined-in_40","text":"services/SettingsV2/interfaces/interfaces.ts:7","title":"Defined in"},{"location":"sdk/modules/#defaultbuttonscustomization","text":"\u2022 DefaultButtonsCustomization : Interface DefaultButtonsCustomization","title":"DefaultButtonsCustomization"},{"location":"sdk/modules/#defined-in_41","text":"services/SettingsV2/UI/interfaces.ts:34","title":"Defined in"},{"location":"sdk/modules/#defaultcnil","text":"\u2022 DefaultCnil : Interface DefaultCnil","title":"DefaultCnil"},{"location":"sdk/modules/#defined-in_42","text":"services/Settings/interfaces/interfaces.ts:67","title":"Defined in"},{"location":"sdk/modules/#defaultfirstlayerconfig","text":"\u2022 DefaultFirstLayerConfig : Interface DefaultFirstLayerConfig","title":"DefaultFirstLayerConfig"},{"location":"sdk/modules/#defined-in_43","text":"services/SettingsV2/UI/interfaces.ts:124","title":"Defined in"},{"location":"sdk/modules/#defaultgenerallabels","text":"\u2022 DefaultGeneralLabels : Interface DefaultGeneralLabels","title":"DefaultGeneralLabels"},{"location":"sdk/modules/#defined-in_44","text":"services/SettingsV2/Labels/interfaces.ts:36","title":"Defined in"},{"location":"sdk/modules/#defaultlabels","text":"\u2022 DefaultLabels : Interface DefaultLabels","title":"DefaultLabels"},{"location":"sdk/modules/#defined-in_45","text":"services/SettingsV2/Labels/interfaces.ts:255","title":"Defined in"},{"location":"sdk/modules/#defaultsecondlayerconfig","text":"\u2022 DefaultSecondLayerConfig : Interface DefaultSecondLayerConfig","title":"DefaultSecondLayerConfig"},{"location":"sdk/modules/#defined-in_46","text":"services/SettingsV2/UI/interfaces.ts:154","title":"Defined in"},{"location":"sdk/modules/#defaulttcfgenerallabels","text":"\u2022 DefaultTCFGeneralLabels : Interface DefaultTCFGeneralLabels","title":"DefaultTCFGeneralLabels"},{"location":"sdk/modules/#defined-in_47","text":"services/Settings/interfaces/interfaces.ui.public.ts:166","title":"Defined in"},{"location":"sdk/modules/#defaultui","text":"\u2022 DefaultUI : Interface DefaultUI","title":"DefaultUI"},{"location":"sdk/modules/#defined-in_48","text":"services/SettingsV2/UI/interfaces.ts:192","title":"Defined in"},{"location":"sdk/modules/#defaultuibuttons","text":"\u2022 DefaultUIButtons : Interface DefaultUIButtons","title":"DefaultUIButtons"},{"location":"sdk/modules/#defined-in_49","text":"services/Settings/interfaces/interfaces.ui.public.ts:153","title":"Defined in"},{"location":"sdk/modules/#defaultuifirstlayer","text":"\u2022 DefaultUIFirstLayer : Interface DefaultUIFirstLayer","title":"DefaultUIFirstLayer"},{"location":"sdk/modules/#defined-in_50","text":"services/Settings/interfaces/interfaces.ui.public.ts:142","title":"Defined in"},{"location":"sdk/modules/#defaultuilabels","text":"\u2022 DefaultUILabels : Interface DefaultUILabels","title":"DefaultUILabels"},{"location":"sdk/modules/#defined-in_51","text":"services/Settings/interfaces/interfaces.ts:71","title":"Defined in"},{"location":"sdk/modules/#defaultuisecondlayer","text":"\u2022 DefaultUISecondLayer : Interface DefaultUISecondLayer","title":"DefaultUISecondLayer"},{"location":"sdk/modules/#defined-in_52","text":"services/Settings/interfaces/interfaces.ui.public.ts:121","title":"Defined in"},{"location":"sdk/modules/#defaultuisettings","text":"\u2022 DefaultUISettings : Interface DefaultUISettings","title":"DefaultUISettings"},{"location":"sdk/modules/#defined-in_53","text":"services/Settings/interfaces/interfaces.ts:59","title":"Defined in"},{"location":"sdk/modules/#devicestorage","text":"\u2022 DeviceStorage : Interface DeviceStorage","title":"DeviceStorage"},{"location":"sdk/modules/#defined-in_54","text":"services/Api/interfaces/interfaces.legacy.ts:148","title":"Defined in"},{"location":"sdk/modules/#disclosure","text":"\u2022 Disclosure : Interface Disclosure","title":"Disclosure"},{"location":"sdk/modules/#defined-in_55","text":"services/Api/interfaces/interfaces.legacy.ts:137","title":"Defined in"},{"location":"sdk/modules/#extendedservice","text":"\u2022 ExtendedService : Interface ExtendedService","title":"ExtendedService"},{"location":"sdk/modules/#defined-in_56","text":"services/Settings/interfaces/interfaces.ui.public.ts:67","title":"Defined in"},{"location":"sdk/modules/#fontcustomization","text":"\u2022 FontCustomization : Interface FontCustomization","title":"FontCustomization"},{"location":"sdk/modules/#defined-in_57","text":"services/SettingsV2/UI/interfaces.ts:50","title":"Defined in"},{"location":"sdk/modules/#idandname","text":"\u2022 IdAndName : Interface IdAndName A generic wrapper for a unique id and a name. Introduced to minimize redundancy.","title":"IdAndName"},{"location":"sdk/modules/#defined-in_58","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:186","title":"Defined in"},{"location":"sdk/modules/#initoptions","text":"\u2022 InitOptions : Interface InitOptions Additional options you can pass to the constructor","title":"InitOptions"},{"location":"sdk/modules/#defined-in_59","text":"interfaces.ts:39","title":"Defined in"},{"location":"sdk/modules/#initialuivalues","text":"\u2022 InitialUIValues : Interface InitialUIValues The init() return values, that determine what variant and layer should be shown","title":"InitialUIValues"},{"location":"sdk/modules/#defined-in_60","text":"interfaces.ts:23","title":"Defined in"},{"location":"sdk/modules/#language","text":"\u2022 Language : Interface Language","title":"Language"},{"location":"sdk/modules/#defined-in_61","text":"services/SettingsV2/interfaces/interfaces.default.public.ts:18","title":"Defined in"},{"location":"sdk/modules/#languageconfig","text":"\u2022 LanguageConfig : Interface LanguageConfig","title":"LanguageConfig"},{"location":"sdk/modules/#defined-in_62","text":"services/SettingsV2/Core/interfaces.ts:1","title":"Defined in"},{"location":"sdk/modules/#layercustomization","text":"\u2022 LayerCustomization : Interface LayerCustomization","title":"LayerCustomization"},{"location":"sdk/modules/#defined-in_63","text":"services/SettingsV2/UI/interfaces.ts:55","title":"Defined in"},{"location":"sdk/modules/#linkcustomization","text":"\u2022 LinkCustomization : Interface LinkCustomization","title":"LinkCustomization"},{"location":"sdk/modules/#defined-in_64","text":"services/SettingsV2/UI/interfaces.ts:60","title":"Defined in"},{"location":"sdk/modules/#logocustomization","text":"\u2022 LogoCustomization : Interface LogoCustomization","title":"LogoCustomization"},{"location":"sdk/modules/#defined-in_65","text":"services/SettingsV2/UI/interfaces.ts:67","title":"Defined in"},{"location":"sdk/modules/#overlaycustomization","text":"\u2022 OverlayCustomization : Interface OverlayCustomization","title":"OverlayCustomization"},{"location":"sdk/modules/#defined-in_66","text":"services/SettingsV2/UI/interfaces.ts:73","title":"Defined in"},{"location":"sdk/modules/#poweredby","text":"\u2022 PoweredBy : Interface PoweredBy","title":"PoweredBy"},{"location":"sdk/modules/#defined-in_67","text":"services/SettingsV2/UI/interfaces.ts:107","title":"Defined in"},{"location":"sdk/modules/#privacybutton","text":"\u2022 PrivacyButton : Interface PrivacyButton","title":"PrivacyButton"},{"location":"sdk/modules/#defined-in_68","text":"services/SettingsV2/Core/interfaces.ts:8","title":"Defined in"},{"location":"sdk/modules/#privacybuttonui","text":"\u2022 PrivacyButtonUI : Interface PrivacyButtonUI","title":"PrivacyButtonUI"},{"location":"sdk/modules/#defined-in_69","text":"services/SettingsV2/UI/interfaces.ts:204","title":"Defined in"},{"location":"sdk/modules/#processingcompany","text":"\u2022 ProcessingCompany : Interface ProcessingCompany","title":"ProcessingCompany"},{"location":"sdk/modules/#defined-in_70","text":"services/SettingsV2/interfaces/interfaces.default.public.ts:23","title":"Defined in"},{"location":"sdk/modules/#resurfaceoptions","text":"\u2022 ResurfaceOptions : Interface ResurfaceOptions","title":"ResurfaceOptions"},{"location":"sdk/modules/#defined-in_71","text":"services/SettingsV2/interfaces/interfaces.ts:22","title":"Defined in"},{"location":"sdk/modules/#savebuttoncustomization","text":"\u2022 SaveButtonCustomization : Interface SaveButtonCustomization","title":"SaveButtonCustomization"},{"location":"sdk/modules/#defined-in_72","text":"services/SettingsV2/UI/interfaces.ts:23","title":"Defined in"},{"location":"sdk/modules/#secondlayerconfig","text":"\u2022 SecondLayerConfig : Interface SecondLayerConfig","title":"SecondLayerConfig"},{"location":"sdk/modules/#defined-in_73","text":"services/SettingsV2/UI/interfaces.ts:140","title":"Defined in"},{"location":"sdk/modules/#service","text":"\u2022 Service : Interface Service","title":"Service"},{"location":"sdk/modules/#defined-in_74","text":"services/SettingsV2/interfaces/interfaces.ts:33","title":"Defined in"},{"location":"sdk/modules/#servicehasharrayobject","text":"\u2022 ServiceHashArrayObject : Interface ServiceHashArrayObject","title":"ServiceHashArrayObject"},{"location":"sdk/modules/#defined-in_75","text":"services/SettingsV2/interfaces/interfaces.ts:12","title":"Defined in"},{"location":"sdk/modules/#settings","text":"\u2022 Settings : Interface Settings","title":"Settings"},{"location":"sdk/modules/#defined-in_76","text":"services/Settings/interfaces/interfaces.ts:104","title":"Defined in"},{"location":"sdk/modules/#showsecondlayerbutton","text":"\u2022 ShowSecondLayerButton : Interface ShowSecondLayerButton","title":"ShowSecondLayerButton"},{"location":"sdk/modules/#defined-in_77","text":"services/Settings/interfaces/interfaces.ui.public.ts:158","title":"Defined in"},{"location":"sdk/modules/#tcfbuttonsconfig","text":"\u2022 TCFButtonsConfig : Interface TCFButtonsConfig","title":"TCFButtonsConfig"},{"location":"sdk/modules/#defined-in_78","text":"services/SettingsV2/UI/interfaces.ts:103","title":"Defined in"},{"location":"sdk/modules/#tcfchangedpurposes","text":"\u2022 TCFChangedPurposes : Interface TCFChangedPurposes","title":"TCFChangedPurposes"},{"location":"sdk/modules/#defined-in_79","text":"services/SettingsV2/interfaces/interfaces.ts:17","title":"Defined in"},{"location":"sdk/modules/#tcfdata","text":"\u2022 TCFData : Interface TCFData A wrapper for all the data that needs to be disclosed to the end-user if TCF is enabled","title":"TCFData"},{"location":"sdk/modules/#defined-in_80","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:109","title":"Defined in"},{"location":"sdk/modules/#tcffirstlayerconfig","text":"\u2022 TCFFirstLayerConfig : Interface TCFFirstLayerConfig","title":"TCFFirstLayerConfig"},{"location":"sdk/modules/#defined-in_81","text":"services/SettingsV2/UI/interfaces.ts:131","title":"Defined in"},{"location":"sdk/modules/#tcflabels","text":"\u2022 TCFLabels : Interface TCFLabels","title":"TCFLabels"},{"location":"sdk/modules/#defined-in_82","text":"services/Settings/interfaces/interfaces.ts:78","title":"Defined in"},{"location":"sdk/modules/#tcfoptions","text":"\u2022 TCFOptions : Interface TCFOptions","title":"TCFOptions"},{"location":"sdk/modules/#defined-in_83","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:21","title":"Defined in"},{"location":"sdk/modules/#tcfpurpose","text":"\u2022 TCFPurpose : Interface TCFPurpose A TCF purpose that needs to be disclosed to the end-user and requires the end-user's consent and legitimate interest consent.","title":"TCFPurpose"},{"location":"sdk/modules/#defined-in_84","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:61","title":"Defined in"},{"location":"sdk/modules/#tcfsecondlayerconfig","text":"\u2022 TCFSecondLayerConfig : Interface TCFSecondLayerConfig","title":"TCFSecondLayerConfig"},{"location":"sdk/modules/#defined-in_85","text":"services/SettingsV2/UI/interfaces.ts:160","title":"Defined in"},{"location":"sdk/modules/#tcfspecialfeature","text":"\u2022 TCFSpecialFeature : Interface TCFSpecialFeature A TCF special feature that needs to be disclosed to the end-user and requires the end-user's consent.","title":"TCFSpecialFeature"},{"location":"sdk/modules/#defined-in_86","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:80","title":"Defined in"},{"location":"sdk/modules/#tcfstack","text":"\u2022 TCFStack : Interface TCFStack A TCF stack is a collection of multiple TCF purposes and TCF special features, with one shared description. On the first layer of a TCF UI, stacks may be shown as alternative to the included single purposes and special features.","title":"TCFStack"},{"location":"sdk/modules/#defined-in_87","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:95","title":"Defined in"},{"location":"sdk/modules/#tcfuisettings","text":"\u2022 TCFUISettings : Interface TCFUISettings","title":"TCFUISettings"},{"location":"sdk/modules/#defined-in_88","text":"services/Settings/interfaces/interfaces.ts:93","title":"Defined in"},{"location":"sdk/modules/#tcfuserdecisiononpurpose","text":"\u2022 TCFUserDecisionOnPurpose : Interface TCFUserDecisionOnPurpose A user's consent decision for a single purpose","title":"TCFUserDecisionOnPurpose"},{"location":"sdk/modules/#defined-in_89","text":"services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:14","title":"Defined in"},{"location":"sdk/modules/#tcfuserdecisiononvendor","text":"\u2022 TCFUserDecisionOnVendor : Interface TCFUserDecisionOnVendor A user's consent decision for a single vendor","title":"TCFUserDecisionOnVendor"},{"location":"sdk/modules/#defined-in_90","text":"services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:23","title":"Defined in"},{"location":"sdk/modules/#tcfuserdecisions","text":"\u2022 TCFUserDecisions : Interface TCFUserDecisions A user's consent decision on all TCF options","title":"TCFUserDecisions"},{"location":"sdk/modules/#defined-in_91","text":"services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:4","title":"Defined in"},{"location":"sdk/modules/#tcfvendor","text":"\u2022 TCFVendor : Interface TCFVendor A TCF vendor (aka. advertiser, tracking service, third party) that is registered with the IAB global vendor list. A TCF vendor needs to be disclosed to the end-user and requires the end-user's consent and legitimate interest consent.","title":"TCFVendor"},{"location":"sdk/modules/#defined-in_92","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:135","title":"Defined in"},{"location":"sdk/modules/#tcfvendorrestriction","text":"\u2022 TCFVendorRestriction : Interface TCFVendorRestriction A TCF vendor restriction for a flexible purpose","title":"TCFVendorRestriction"},{"location":"sdk/modules/#defined-in_93","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:178","title":"Defined in"},{"location":"sdk/modules/#tcfui","text":"\u2022 TcfUI : Interface TcfUI","title":"TcfUI"},{"location":"sdk/modules/#defined-in_94","text":"services/SettingsV2/UI/interfaces.ts:198","title":"Defined in"},{"location":"sdk/modules/#tcfuisettingslabels","text":"\u2022 TcfUISettingsLabels : Interface TcfUISettingsLabels","title":"TcfUISettingsLabels"},{"location":"sdk/modules/#defined-in_95","text":"services/SettingsV2/Labels/interfaces.ts:261","title":"Defined in"},{"location":"sdk/modules/#togglecustomization","text":"\u2022 ToggleCustomization : Interface ToggleCustomization","title":"ToggleCustomization"},{"location":"sdk/modules/#defined-in_96","text":"services/SettingsV2/UI/interfaces.ts:78","title":"Defined in"},{"location":"sdk/modules/#trackeventparameters","text":"\u2022 TrackEventParameters : Interface TrackEventParameters","title":"TrackEventParameters"},{"location":"sdk/modules/#defined-in_97","text":"services/DataFacade/interfaces/interfaces.public.ts:23","title":"Defined in"},{"location":"sdk/modules/#urls","text":"\u2022 URLs : Interface URLs","title":"URLs"},{"location":"sdk/modules/#defined-in_98","text":"services/SettingsV2/interfaces/interfaces.default.public.ts:29","title":"Defined in"},{"location":"sdk/modules/#usercountrydata","text":"\u2022 UserCountryData : Interface UserCountryData","title":"UserCountryData"},{"location":"sdk/modules/#defined-in_99","text":"services/Location/interfaces/interfaces.public.ts:1","title":"Defined in"},{"location":"sdk/modules/#userdecision","text":"\u2022 UserDecision : Interface UserDecision A user's consent decision for a single service","title":"UserDecision"},{"location":"sdk/modules/#defined-in_100","text":"services/SettingsV2/interfaces/interfaces.default.public.ts:4","title":"Defined in"},{"location":"sdk/modules/#usersessiondata","text":"\u2022 UserSessionData : Interface UserSessionData","title":"UserSessionData"},{"location":"sdk/modules/#defined-in_101","text":"services/DataFacade/interfaces/interfaces.public.ts:16","title":"Defined in"},{"location":"sdk/modules/#type-aliases_1","text":"","title":"Type aliases"},{"location":"sdk/modules/#arialabelstranslation","text":"\u01ac AriaLabelsTranslation : LegacyAriaLabelsTranslations","title":"AriaLabelsTranslation"},{"location":"sdk/modules/#defined-in_102","text":"services/Api/interfaces/interfaces.legacy.ts:111","title":"Defined in"},{"location":"sdk/modules/#baseservice","text":"\u01ac BaseService : BaseServiceData & ServiceLabels","title":"BaseService"},{"location":"sdk/modules/#defined-in_103","text":"services/SettingsV2/interfaces/interfaces.ts:32","title":"Defined in"},{"location":"sdk/modules/#ccpabuttoncustomization","text":"\u01ac CcpaButtonCustomization : SaveButtonCustomization","title":"CcpaButtonCustomization"},{"location":"sdk/modules/#defined-in_104","text":"services/SettingsV2/UI/interfaces.ts:27","title":"Defined in"},{"location":"sdk/modules/#cornerposition","text":"\u01ac CornerPosition : \"tl\" | \"tr\" | \"bl\" | \"br\"","title":"CornerPosition"},{"location":"sdk/modules/#defined-in_105","text":"services/SettingsV2/Core/interfaces.ts:6","title":"Defined in"},{"location":"sdk/modules/#data","text":"\u01ac Data : DefaultData | CcpaData | TcfData","title":"Data"},{"location":"sdk/modules/#defined-in_106","text":"services/SettingsV2/Data/interfaces.ts:115","title":"Defined in"},{"location":"sdk/modules/#defaultbuttonsconfig","text":"\u01ac DefaultButtonsConfig : ButtonsCustomization & DefaultButtonsCustomization","title":"DefaultButtonsConfig"},{"location":"sdk/modules/#defined-in_107","text":"services/SettingsV2/UI/interfaces.ts:101","title":"Defined in"},{"location":"sdk/modules/#labels","text":"\u01ac Labels : CcpaLabels | DefaultLabels | TcfUISettingsLabels","title":"Labels"},{"location":"sdk/modules/#defined-in_108","text":"services/SettingsV2/Labels/interfaces.ts:270","title":"Defined in"},{"location":"sdk/modules/#logoposition","text":"\u01ac LogoPosition : \"center\" | \"left\" | \"right\"","title":"LogoPosition"},{"location":"sdk/modules/#defined-in_109","text":"services/SettingsV2/interfaces/interfaces.default.public.ts:11","title":"Defined in"},{"location":"sdk/modules/#maybe","text":"\u01ac Maybe : T | null | undefined","title":"Maybe"},{"location":"sdk/modules/#type-parameters","text":"Name T","title":"Type parameters"},{"location":"sdk/modules/#defined-in_110","text":"services/SettingsV2/interfaces/interfaces.ts:44","title":"Defined in"},{"location":"sdk/modules/#maybebutton","text":"\u01ac MaybeButton : ButtonColor | null","title":"MaybeButton"},{"location":"sdk/modules/#defined-in_111","text":"services/SettingsV2/UI/interfaces.ts:21","title":"Defined in"},{"location":"sdk/modules/#secondlayerurl","text":"\u01ac SecondLayerUrl : string","title":"SecondLayerUrl"},{"location":"sdk/modules/#defined-in_112","text":"services/SettingsV2/UI/interfaces.ts:14","title":"Defined in"},{"location":"sdk/modules/#tcffeature","text":"\u01ac TCFFeature : BasePurpose A TCF feature that needs to be disclosed to the end-user.","title":"TCFFeature"},{"location":"sdk/modules/#defined-in_113","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:58","title":"Defined in"},{"location":"sdk/modules/#tcfspecialpurpose","text":"\u01ac TCFSpecialPurpose : BasePurpose A TCF special purpose that needs to be disclosed to the end-user.","title":"TCFSpecialPurpose"},{"location":"sdk/modules/#defined-in_114","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:77","title":"Defined in"},{"location":"sdk/modules/#tcfuserdecisiononspecialfeature","text":"\u01ac TCFUserDecisionOnSpecialFeature : BaseTCFUserDecision A user's consent decision for a single special feature","title":"TCFUserDecisionOnSpecialFeature"},{"location":"sdk/modules/#defined-in_115","text":"services/SettingsV2/interfaces/TCF/interfaces.decisions.public.ts:20","title":"Defined in"},{"location":"sdk/modules/#tcfvendorrestrictiontype","text":"\u01ac TCFVendorRestrictionType : RestrictionType","title":"TCFVendorRestrictionType"},{"location":"sdk/modules/#defined-in_116","text":"services/SettingsV2/interfaces/TCF/interfaces.public.ts:55","title":"Defined in"},{"location":"sdk/modules/#tcfbuttonscustomization","text":"\u01ac TcfButtonsCustomization : CommonButtonsCustomization","title":"TcfButtonsCustomization"},{"location":"sdk/modules/#defined-in_117","text":"services/SettingsV2/UI/interfaces.ts:38","title":"Defined in"},{"location":"sdk/modules/#ui","text":"\u01ac UI : CcpaUI | DefaultUI | TcfUI | PrivacyButtonUI","title":"UI"},{"location":"sdk/modules/#defined-in_118","text":"services/SettingsV2/UI/interfaces.ts:213","title":"Defined in"},{"location":"sdk/modules/#uisettings","text":"\u01ac UISettings : CcpaUISettings | DefaultUISettings | TCFUISettings","title":"UISettings"},{"location":"sdk/modules/#defined-in_119","text":"services/Settings/interfaces/interfaces.ts:102","title":"Defined in"},{"location":"sdk/modules/#functions_1","text":"","title":"Functions"},{"location":"sdk/modules/#isccpadata","text":"\u25b8 Const isCcpaData ( data ): data is CcpaData","title":"isCcpaData"},{"location":"sdk/modules/#parameters","text":"Name Type data Maybe<Data>","title":"Parameters"},{"location":"sdk/modules/#returns","text":"data is CcpaData","title":"Returns"},{"location":"sdk/modules/#defined-in_120","text":"services/SettingsV2/helpers.ts:210","title":"Defined in"},{"location":"sdk/modules/#isccpalabels","text":"\u25b8 Const isCcpaLabels ( labels ): labels is CcpaLabels","title":"isCcpaLabels"},{"location":"sdk/modules/#parameters_1","text":"Name Type labels Maybe<Labels>","title":"Parameters"},{"location":"sdk/modules/#returns_1","text":"labels is CcpaLabels","title":"Returns"},{"location":"sdk/modules/#defined-in_121","text":"services/SettingsV2/helpers.ts:222","title":"Defined in"},{"location":"sdk/modules/#isccpaui","text":"\u25b8 Const isCcpaUI ( ui ): ui is CcpaUI","title":"isCcpaUI"},{"location":"sdk/modules/#parameters_2","text":"Name Type ui Maybe<UI>","title":"Parameters"},{"location":"sdk/modules/#returns_2","text":"ui is CcpaUI","title":"Returns"},{"location":"sdk/modules/#defined-in_122","text":"services/SettingsV2/helpers.ts:234","title":"Defined in"},{"location":"sdk/modules/#isdefaultdata","text":"\u25b8 Const isDefaultData ( data ): data is DefaultData","title":"isDefaultData"},{"location":"sdk/modules/#parameters_3","text":"Name Type data Maybe<Data>","title":"Parameters"},{"location":"sdk/modules/#returns_3","text":"data is DefaultData","title":"Returns"},{"location":"sdk/modules/#defined-in_123","text":"services/SettingsV2/helpers.ts:218","title":"Defined in"},{"location":"sdk/modules/#isdefaultlabels","text":"\u25b8 Const isDefaultLabels ( labels ): labels is DefaultLabels","title":"isDefaultLabels"},{"location":"sdk/modules/#parameters_4","text":"Name Type labels Maybe<Labels>","title":"Parameters"},{"location":"sdk/modules/#returns_4","text":"labels is DefaultLabels","title":"Returns"},{"location":"sdk/modules/#defined-in_124","text":"services/SettingsV2/helpers.ts:230","title":"Defined in"},{"location":"sdk/modules/#isdefaultui","text":"\u25b8 Const isDefaultUI ( ui ): ui is DefaultUI","title":"isDefaultUI"},{"location":"sdk/modules/#parameters_5","text":"Name Type ui Maybe<UI>","title":"Parameters"},{"location":"sdk/modules/#returns_5","text":"ui is DefaultUI","title":"Returns"},{"location":"sdk/modules/#defined-in_125","text":"services/SettingsV2/helpers.ts:246","title":"Defined in"},{"location":"sdk/modules/#isprivacybuttonui","text":"\u25b8 Const isPrivacyButtonUI ( ui ): ui is PrivacyButtonUI","title":"isPrivacyButtonUI"},{"location":"sdk/modules/#parameters_6","text":"Name Type ui Maybe<UI>","title":"Parameters"},{"location":"sdk/modules/#returns_6","text":"ui is PrivacyButtonUI","title":"Returns"},{"location":"sdk/modules/#defined-in_126","text":"services/SettingsV2/helpers.ts:250","title":"Defined in"},{"location":"sdk/modules/#istcfdata","text":"\u25b8 Const isTcfData ( data ): data is TcfData","title":"isTcfData"},{"location":"sdk/modules/#parameters_7","text":"Name Type data Maybe<Data>","title":"Parameters"},{"location":"sdk/modules/#returns_7","text":"data is TcfData","title":"Returns"},{"location":"sdk/modules/#defined-in_127","text":"services/SettingsV2/helpers.ts:214","title":"Defined in"},{"location":"sdk/modules/#istcflabels","text":"\u25b8 Const isTcfLabels ( labels ): labels is TcfUISettingsLabels","title":"isTcfLabels"},{"location":"sdk/modules/#parameters_8","text":"Name Type labels Maybe<Labels>","title":"Parameters"},{"location":"sdk/modules/#returns_8","text":"labels is TcfUISettingsLabels","title":"Returns"},{"location":"sdk/modules/#defined-in_128","text":"services/SettingsV2/helpers.ts:226","title":"Defined in"},{"location":"sdk/modules/#istcfui","text":"\u25b8 Const isTcfUI ( ui ): ui is TcfUI","title":"isTcfUI"},{"location":"sdk/modules/#parameters_9","text":"Name Type ui Maybe<UI>","title":"Parameters"},{"location":"sdk/modules/#returns_9","text":"ui is TcfUI","title":"Returns"},{"location":"sdk/modules/#defined-in_129","text":"services/SettingsV2/helpers.ts:242","title":"Defined in"}]}